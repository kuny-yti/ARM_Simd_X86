#ifndef TESTDATA_H
#define TESTDATA_H

#include <stdint.h>
#include "typedef.h"

static const struct
{
    union{
        struct
        {
            union{
                const uint32_t u32;
                const float   f32;
            };
        }fNaNs;
        struct
        {
            union{
                const uint32_t u32;
                const float   f32;
            };
        }fTrue;
    };
    struct
    {
        union{
            const float   f32;
            const uint32_t u32;
        };
    }fNaNq;
    union{
        struct
        {
            union{
                const uint64_t u64;
                const double   f64;
            };
        }dNaNs;
        struct
        {
            union{
                const uint64_t u64;
                const double   f64;
            };
        }dTrue;
    };
    struct
    {
        union{
            const double   f64;
            const uint64_t u64;
        };
    }dNaNq;
}
_s_var =
{
{{{-1}}},
{{0.f/0.f}},
{{{-1}}},
{{0./0.}},
};
#define NaNq64 (0./0.)
#define NaNs64 (0xffffffffffffffff)
#define NaNq32 (0.f/0.f)
#define NaNs32 (0xffffffff)
#define True64 NaNs64
#define True32 NaNs32
#define False32 0
#define False64 0
#define Zero    0

// 6-10
static const struct
{
    int16_t a[8];
    int16_t b[8];
    int     la;
    int     lb;
    int     expect;
}
g_test_mm_cmpestrs_data[] =
{
{
{0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC},
{0x3333, 0x3333 ,0x3333 ,0x3333, 0x3333, 0x3333, 0x3333, 0x3333},
8, 8, 0
},
{
{0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC},
{0x3333, 0x3333 ,0x3333 ,0x3333, 0x3333, 0x3333, 0x3333, 0x3333},
7, 8, 1
}
};

static const struct
{
    int16_t a[8];
    int16_t b[8];
    int     la;
    int     lb;
    int     expect;
}
g_test_mm_cmpestrz_data[] =
{
{
{0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC},
{0x3333, 0x3333 ,0x3333 ,0x3333, 0x3333, 0x3333, 0x3333, 0x3333},
8, 8, 0
},
{
{0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC},
{0x3333, 0x3333 ,0x3333 ,0x3333, 0x3333, 0x3333, 0x3333, 0x3333},
8, 7, 1
}
};

static const struct
{
    int16_t a[8];
    int16_t b[8];
    int     la;
    int     lb;
    int     expect;
}
g_test_mm_cmpistrs_data[] =
{
{
{0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC},
{0x3333, 0x3333 ,0x3333 ,0x3333, 0x3333, 0x3333, 0x3333, 0x3333},
8, 8, 0
},
{
{0x0, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC},
{0x3333, 0x3333 ,0x3333 ,0x3333, 0x3333, 0x3333, 0x3333, 0x3333},
7, 8, 1
}
};

static const struct
{
    int16_t a[8];
    int16_t b[8];
    int     la;
    int     lb;
    int     expect;
}
g_test_mm_cmpistrz_data[] =
{
{
{0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC},
{0x3333, 0x3333 ,0x3333 ,0x3333, 0x3333, 0x3333, 0x3333, 0x3333},
8, 8, 0
},
{
{0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC},
{0x0, 0x3333 ,0x3333 ,0x3333, 0x3333, 0x3333, 0x3333, 0x3333},
8, 7, 1
}
};

static const struct
{
    int16_t a[8];
    int16_t b[8];
    uint8_t expect[6];
}
g_test_mm_cmp_epi16_mask_data[] =
{
{
{0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC},
{0x3333, 0x3333 ,0x3333 ,0x3333, 0x3333, 0x3333, 0x3333, 0x3333},
{0x00, 0x00, 0x00, 0xff, 0xff, 0xff}
},
{
{0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC},
{0x3333, 0x4CCC ,0x3333 ,0x3333, 0x3333, 0x3333, 0x3333, 0x3333},
{0x02, 0x00, 0x02, 0xfd, 0xff, 0xfd}
},
{
{0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC},
{0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC},
{0xff, 0x00, 0xff, 0x00, 0xff, 0x00}
}
};

static const struct
{
    int16_t a[8];
    int16_t b[8];
    uint8_t mask[6];
    uint8_t expect[6];
}
g_test_mm_mask_cmp_epi16_mask_data[] =
{
{
{0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC},
{0x3333, 0x3333 ,0x3333 ,0x3333, 0x3333, 0x3333, 0x3333, 0x3333},
{0xff, 0xff, 0xff, 0xf0, 0x1f, 0x00},
{0x00, 0x00, 0x00, 0xf0, 0x1f, 0x00} // 0, 1, 2, 4, 5, 6
},
{
{0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC},
{0x3333, 0x4CCC ,0x3333 ,0x3333, 0x3333, 0x3333, 0x3333, 0x3333},
{0xf1, 0xff, 0xf2, 0x07, 0x1f, 0x0d},
{0x00, 0x00, 0x02, 0x05, 0x1f, 0x0d} // 0, 1, 2, 4, 5, 6
},
{
{0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC},
{0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC},
{0x00, 0x00, 0xf2, 0x07, 0x1f, 0x0d},
{0x00, 0x00, 0xf2, 0x00, 0x1f, 0x00}
}
};

static const struct
{
    int16_t  a[16];
    int16_t  b[16];
    uint16_t expect[6];
}
g_test_mm256_cmp_epi16_mask_data[] =
{
{
{0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC,
    0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC},
{0x3333, 0x3333 ,0x3333 ,0x3333, 0x3333, 0x3333, 0x3333, 0x3333,
    0x3333, 0x3333 ,0x3333 ,0x3333, 0x3333, 0x3333, 0x3333, 0x3333},
{0x0000, 0x0000, 0x0000, 0xffff, 0xffff, 0xffff}
},
{
{0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC,
    0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC},
{0x3333, 0x4CCC ,0x3333 ,0x3333, 0x3333, 0x3333, 0x3333, 0x3333,
    0x3333, 0x4CCC ,0x3333 ,0x3333, 0x3333, 0x3333, 0x3333, 0x3333},
{0x0202, 0x0000, 0x0202, 0xfdfd, 0xffff, 0xfdfd}
},
{
{0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC,
    0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC},
{0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC,
    0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC},
{0xffff, 0x00, 0xffff, 0x00, 0xffff, 0x00}
}
};

static const struct
{
    int16_t  a[16];
    int16_t  b[16];
    uint16_t mask[6];
    uint16_t expect[6];
}
g_test_mm256_mask_cmp_epi16_mask_data[] =
{
{
{0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC,
    0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC},
{0x3333, 0x3333 ,0x3333 ,0x3333, 0x3333, 0x3333, 0x3333, 0x3333,
    0x3333, 0x3333 ,0x3333 ,0x3333, 0x3333, 0x3333, 0x3333, 0x3333},
{0xffff, 0xffff, 0xffff, 0xf000, 0x1f00, 0x0000},
{0x0000, 0x0000, 0x0000, 0xf000, 0x1f00, 0x0000} // 0, 1, 2, 4, 5, 6
},
{
{0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC,
    0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC},
{0x3333, 0x4CCC ,0x3333 ,0x3333, 0x3333, 0x3333, 0x3333, 0x3333,
    0x3333, 0x4CCC ,0x3333 ,0x3333, 0x3333, 0x3333, 0x3333, 0x3333},
{0xf100, 0xffff, 0xf20f, 0x0700, 0x1f0f, 0x0d00},
{0x0000, 0x0000, 0x0202, 0x0500, 0x1f0f, 0x0d00}// 0, 1, 2, 4, 5, 6
},
{
{0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC,
    0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC},
{0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC,
    0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC},
{0x0000, 0x0000, 0xf200, 0x0700, 0x1f00, 0x0d00},
{0x0000, 0x0000, 0xf200, 0x0000, 0x1f00, 0x0000}
}
};

static const struct
{
    int16_t  a[32];
    int16_t  b[32];
    uint32_t expect[6];
}
g_test_mm512_cmp_epi16_mask_data[] =
{
{
{0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC,
    0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC,
    0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC,
    0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC},
{0x3333, 0x3333 ,0x3333 ,0x3333, 0x3333, 0x3333, 0x3333, 0x3333,
    0x3333, 0x3333 ,0x3333 ,0x3333, 0x3333, 0x3333, 0x3333, 0x3333,
    0x3333, 0x3333 ,0x3333 ,0x3333, 0x3333, 0x3333, 0x3333, 0x3333,
    0x3333, 0x3333 ,0x3333 ,0x3333, 0x3333, 0x3333, 0x3333, 0x3333},
{0x00000000, 0x00000000, 0x00000000, NaNs32, NaNs32, NaNs32}
},
{
{0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC,
    0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC,
    0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC,
    0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC},
{0x3333, 0x4CCC ,0x3333 ,0x3333, 0x3333, 0x3333, 0x3333, 0x3333,
    0x3333, 0x4CCC ,0x3333 ,0x3333, 0x3333, 0x3333, 0x3333, 0x3333,
    0x3333, 0x4CCC ,0x3333 ,0x3333, 0x3333, 0x3333, 0x3333, 0x3333,
    0x3333, 0x4CCC ,0x3333 ,0x3333, 0x3333, 0x3333, 0x3333, 0x3333},
{0x02020202, 0x00000000, 0x02020202, 0xfdfdfdfd, NaNs32, 0xfdfdfdfd}
},
{
{0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC,
    0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC,
    0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC,
    0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC},
{0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC,
    0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC,
    0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC,
    0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC},
{NaNs32, 0x00000000, NaNs32, 0x00000000, NaNs32, 0x00000000}
}
};

static const struct
{
    int16_t  a[32];
    int16_t  b[32];
    uint32_t mask[6];
    uint32_t expect[6];
}
g_test_mm512_mask_cmp_epi16_mask_data[] =
{
{
{0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC,
    0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC,
    0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC,
    0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC},
{0x3333, 0x3333 ,0x3333 ,0x3333, 0x3333, 0x3333, 0x3333, 0x3333,
    0x3333, 0x3333 ,0x3333 ,0x3333, 0x3333, 0x3333, 0x3333, 0x3333,
    0x3333, 0x3333 ,0x3333 ,0x3333, 0x3333, 0x3333, 0x3333, 0x3333,
    0x3333, 0x3333 ,0x3333 ,0x3333, 0x3333, 0x3333, 0x3333, 0x3333},
{0xffff0000, 0xffff0000, 0xffff0000, 0xf0000000, 0x1f000000, 0x00000000},
{0x00000000, 0x00000000, 0x00000000, 0xf0000000, 0x1f000000, 0x00000000}// 0, 1, 2, 4, 5, 6
},
{
{0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC,
    0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC,
    0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC,
    0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC},
{0x3333, 0x4CCC ,0x3333 ,0x3333, 0x3333, 0x3333, 0x3333, 0x3333,
    0x3333, 0x4CCC ,0x3333 ,0x3333, 0x3333, 0x3333, 0x3333, 0x3333,
    0x3333, 0x4CCC ,0x3333 ,0x3333, 0x3333, 0x3333, 0x3333, 0x3333,
    0x3333, 0x4CCC ,0x3333 ,0x3333, 0x3333, 0x3333, 0x3333, 0x3333},
{0xf1000000, 0xffff0000, 0xf20f0000, 0x07000000, 0x1f0f0000, 0x0d000000},
{0x00000000, 0x00000000, 0x02020000, 0x05000000, 0x1f0f0000, 0x0d000000} // 0, 1, 2, 4, 5, 6
},
{
{0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC,
    0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC,
    0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC,
    0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC},
{0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC,
    0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC,
    0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC,
    0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC},
{0x00000000, 0x00000000, 0xf2000000, 0x07000000, 0x1f000000, 0x0d000000},
{0x00000000, 0x00000000, 0xf2000000, 0x00000000, 0x1f000000, 0x00000000}
}
};

static const struct
{
    int32_t a[4];
    int32_t b[4];
    uint8_t expect[6];
}
g_test_mm_cmp_epi32_mask_data[] =
{
{
{0x4CCCCCCC, 0x4CCCCCCC, 0x4CCCCCCC, 0x4CCCCCCC},
{0x33333333, 0x33333333 ,0x33333333 ,0x33333333},
{0x00, 0x00, 0x00, 0x0f, 0x0f, 0x0f}
},
{
{0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC},
{0x33333333, 0x4CCCCCCC ,0x33333333 ,0x33333333},
{0x02, 0x00, 0x02, 0x0d, 0x0f, 0x0d}
},
{
{0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC},
{0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC},
{0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00}
}
};

static const struct
{
    int32_t a[4];
    int32_t b[4];
    uint8_t mask[6];
    uint8_t expect[6];
}
g_test_mm_mask_cmp_epi32_mask_data[] =
{
{
{0x4CCCCCCC, 0x4CCCCCCC, 0x4CCCCCCC, 0x4CCCCCCC},
{0x33333333, 0x33333333 ,0x33333333 ,0x33333333},
{0x0f, 0x0f, 0x0f, 0x00, 0x03, 0x00},
{0x00, 0x00, 0x00, 0x00, 0x03, 0x00} // 0, 1, 2, 4, 5, 6
},
{
{0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC},
{0x33333333, 0x4CCCCCCC ,0x33333333 ,0x33333333},
{0x01, 0x0f, 0x02, 0x07, 0x0f, 0x0d},
{0x00, 0x00, 0x02, 0x05, 0x0f, 0x0d} // 0, 1, 2, 4, 5, 6
},
{
{0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC},
{0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC},
{0x00, 0x00, 0x02, 0x07, 0x0f, 0x0d},
{0x00, 0x00, 0x02, 0x00, 0x0f, 0x00}
}
};

static const struct
{
    int32_t  a[8];
    int32_t  b[8];
    uint8_t  expect[6];
}
g_test_mm256_cmp_epi32_mask_data[] =
{
{
{0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC,
    0x4CCCCCCC, 0x4CCCCCCC, 0x4CCCCCCC, 0x4CCCCCCC},
{0x33333333, 0x33333333 ,0x33333333 ,0x33333333,
    0x33333333, 0x33333333, 0x33333333, 0x33333333},
{0x00, 0x00, 0x00, 0xff, 0xff, 0xff}
},
{
{0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC,
    0x4CCCCCCC, 0x4CCCCCCC, 0x4CCCCCCC, 0x4CCCCCCC},
{0x33333333, 0x4CCCCCCC ,0x33333333 ,0x33333333,
    0x33333333, 0x33333333, 0x33333333, 0x33333333},
{0x02, 0x00, 0x02, 0xfd, 0xff, 0xfd}
},
{
{0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC,
    0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC},
{0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC,
    0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC},
{0xff, 0x00, 0xff, 0x00, 0xff, 0x00}
}
};

static const struct
{
    int32_t  a[8];
    int32_t  b[8];
    uint8_t mask[6];
    uint8_t expect[6];
}
g_test_mm256_mask_cmp_epi32_mask_data[] =
{
{
{0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC,
    0x4CCCCCCC, 0x4CCCCCCC, 0x4CCCCCCC, 0x4CCCCCCC},
{0x33333333, 0x33333333 ,0x33333333 ,0x33333333,
    0x33333333, 0x33333333, 0x33333333, 0x33333333},
{0xff, 0xff, 0xff, 0xf0, 0x1f, 0x00},
{0x00, 0x00, 0x00, 0xf0, 0x1f, 0x00} // 0, 1, 2, 4, 5, 6
},
{
{0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC,
    0x4CCCCCCC, 0x4CCCCCCC, 0x4CCCCCCC, 0x4CCCCCCC},
{0x33333333, 0x4CCCCCCC ,0x33333333 ,0x33333333,
    0x33333333, 0x33333333, 0x33333333, 0x33333333},
{0xf1, 0xff, 0xf2, 0x07, 0x1f, 0x0d},
{0x00, 0x00, 0x02, 0x05, 0x1f, 0x0d} // 0, 1, 2, 4, 5, 6
},
{
{0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC,
    0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC},
{0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC,
    0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC},
{0x00, 0x00, 0xf2, 0x07, 0x1f, 0x0d},
{0x00, 0x00, 0xf2, 0x00, 0x1f, 0x00}
}
};

static const struct
{
    int32_t  a[16];
    int32_t  b[16];
    uint16_t expect[6];
}
g_test_mm512_cmp_epi32_mask_data[] =
{
{
{0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC,
    0x4CCCCCCC, 0x4CCCCCCC, 0x4CCCCCCC, 0x4CCCCCCC,
    0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC,
    0x4CCCCCCC, 0x4CCCCCCC, 0x4CCCCCCC, 0x4CCCCCCC},
{0x33333333, 0x33333333 ,0x33333333 ,0x33333333,
    0x33333333, 0x33333333, 0x33333333, 0x33333333,
    0x33333333, 0x33333333 ,0x33333333 ,0x33333333,
    0x33333333, 0x33333333, 0x33333333, 0x33333333},
{0x0000, 0x0000, 0x0000, 0xffff, 0xffff, 0xffff}
},
{
{0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC,
    0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC,
    0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC,
    0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC},
{0x33333333, 0x4CCCCCCC ,0x33333333 ,0x33333333,
    0x33333333, 0x4CCCCCCC ,0x33333333 ,0x33333333,
    0x33333333, 0x4CCCCCCC ,0x33333333 ,0x33333333,
    0x33333333, 0x4CCCCCCC ,0x33333333 ,0x33333333},
{0x2222, 0x0000, 0x2222, 0xdddd, 0xffff, 0xdddd}
},
{
{0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC,
    0x4CCCCCCC, 0x4CCCCCCC, 0x4CCCCCCC, 0x4CCCCCCC,
    0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC,
    0x4CCCCCCC, 0x4CCCCCCC, 0x4CCCCCCC, 0x4CCCCCCC},
{0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC,
    0x4CCCCCCC, 0x4CCCCCCC, 0x4CCCCCCC, 0x4CCCCCCC,
    0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC,
    0x4CCCCCCC, 0x4CCCCCCC, 0x4CCCCCCC, 0x4CCCCCCC},
{0xffff, 0x0000, 0xffff, 0x0000, 0xffff, 0x0000}
}
};

static const struct
{
    int32_t  a[16];
    int32_t  b[16];
    uint16_t mask[6];
    uint16_t expect[6];
}
g_test_mm512_mask_cmp_epi32_mask_data[] =
{
{
{0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC,
    0x4CCCCCCC, 0x4CCCCCCC, 0x4CCCCCCC, 0x4CCCCCCC,
    0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC,
    0x4CCCCCCC, 0x4CCCCCCC, 0x4CCCCCCC, 0x4CCCCCCC},
{0x33333333, 0x33333333 ,0x33333333 ,0x33333333,
    0x33333333, 0x33333333, 0x33333333, 0x33333333,
    0x33333333, 0x33333333 ,0x33333333 ,0x33333333,
    0x33333333, 0x33333333, 0x33333333, 0x33333333},
{0xffff, 0xffff, 0xffff, 0xf000, 0x1f00, 0x0000},
{0x0000, 0x0000, 0x0000, 0xf000, 0x1f00, 0x0000} // 0, 1, 2, 4, 5, 6
},
{
{0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC,
    0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC,
    0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC,
    0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC},
{0x33333333, 0x4CCCCCCC ,0x33333333 ,0x33333333,
    0x33333333, 0x4CCCCCCC ,0x33333333 ,0x33333333,
    0x33333333, 0x4CCCCCCC ,0x33333333 ,0x33333333,
    0x33333333, 0x4CCCCCCC ,0x33333333 ,0x33333333},
{0xf100, 0xffff, 0xf20f, 0x0700, 0x1f0f, 0x0d00},
{0x2000, 0x0000, 0x2202, 0x0500, 0x1f0f, 0x0d00} // 0, 1, 2, 4, 5, 6
},
{
{0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC,
    0x4CCCCCCC, 0x4CCCCCCC, 0x4CCCCCCC, 0x4CCCCCCC,
    0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC,
    0x4CCCCCCC, 0x4CCCCCCC, 0x4CCCCCCC, 0x4CCCCCCC},
{0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC,
    0x4CCCCCCC, 0x4CCCCCCC, 0x4CCCCCCC, 0x4CCCCCCC,
    0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC,
    0x4CCCCCCC, 0x4CCCCCCC, 0x4CCCCCCC, 0x4CCCCCCC},
{0x0000, 0x0000, 0xf200, 0x0700, 0x1f00, 0x0d00},
{0x0000, 0x0000, 0xf200, 0x0000, 0x1f00, 0x0000}
}
};

static const struct
{
    int64_t  a[2];
    int64_t  b[2];
    uint8_t  expect[6];
}
g_test_mm_cmp_epi64_mask_data[] =
{
{
{0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC},
{0x3333333333333333, 0x3333333333333333},
{0x00, 0x00, 0x00, 0x03, 0x03, 0x03}
},
{
{0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC},
{0x3333333333333333, 0x4CCCCCCCCCCCCCCC},
{0x02, 0x00, 0x02, 0x01, 0x03, 0x01}
},
{
{0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC },
{0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC },
{0x03, 0x00, 0x03, 0x00, 0x03, 0x00}
}
};

// 6-11
static const struct
{
    int64_t  a[2];
    int64_t  b[2];
    uint8_t  m;
    uint8_t  expect[6];
}
g_test_mm_mask_cmp_epi64_mask_data[] =
{
{
{0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC},
{0x3333333333333333, 0x3333333333333333},
0x0f,
{0x00, 0x00, 0x00, 0x03, 0x03, 0x03}
},
{
{0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC},
{0x3333333333333333, 0x4CCCCCCCCCCCCCCC},
0x0f,
{0x02, 0x00, 0x02, 0x01, 0x03, 0x01}
},
{
{0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC },
{0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC },
0x0f,
{0x03, 0x00, 0x03, 0x00, 0x03, 0x00}
}
};

static const struct
{
    int64_t  a[4];
    int64_t  b[4];
    uint8_t  expect[6];
}
g_test_mm256_cmp_epi64_mask_data[] =
{
{
{0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC},
{0x3333333333333333, 0x3333333333333333, 0x3333333333333333, 0x3333333333333333},
{0x00, 0x00, 0x00, 0x0f, 0x0f, 0x0f}
},
{
{0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC},
{0x3333333333333333, 0x4CCCCCCCCCCCCCCC, 0x3333333333333333, 0x4CCCCCCCCCCCCCCC},
{0x0a, 0x00, 0x0a, 0x05, 0x0f, 0x05}
},
{
{0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC},
{0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC},
{0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00}
}
};

static const struct
{
    int64_t  a[4];
    int64_t  b[4];
    uint8_t  m;
    uint8_t  expect[6];
}
g_test_mm256_mask_cmp_epi64_mask_data[] =
{
{
{0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC},
{0x3333333333333333, 0x3333333333333333, 0x3333333333333333, 0x3333333333333333},
0x04,
{0x00, 0x00, 0x00, 0x04, 0x04, 0x04}
},
{
{0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC},
{0x3333333333333333, 0x4CCCCCCCCCCCCCCC, 0x3333333333333333, 0x4CCCCCCCCCCCCCCC},
0x0f,
{0x0a, 0x00, 0x0a, 0x05, 0x0f, 0x05}
},
{
{0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC},
{0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC},
0x02,
{0x02, 0x00, 0x02, 0x00, 0x02, 0x00}
}
};

static const struct
{
    int64_t  a[8];
    int64_t  b[8];
    uint8_t  expect[6];
}
g_test_mm512_cmp_epi64_mask_data[] =
{
{
{0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC,
    0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC},
{0x3333333333333333, 0x3333333333333333, 0x3333333333333333, 0x3333333333333333,
    0x3333333333333333, 0x3333333333333333, 0x3333333333333333, 0x3333333333333333},
{0x00, 0x00, 0x00, 0xff, 0xff, 0xff}
},
{
{0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC,
    0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC},
{0x3333333333333333, 0x4CCCCCCCCCCCCCCC, 0x3333333333333333, 0x4CCCCCCCCCCCCCCC,
    0x3333333333333333, 0x4CCCCCCCCCCCCCCC, 0x3333333333333333, 0x4CCCCCCCCCCCCCCC},
{0xaa, 0x00, 0xaa, 0x55, 0xff, 0x55}
},
{
{0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC,
    0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC},
{0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC,
    0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC},
{0xff, 0x00, 0xff, 0x00, 0xff, 0x00}
}
};

static const struct
{
    uint8_t  a[16];
    uint8_t  b[16];
    uint16_t expect[6];
}
g_test_mm_cmp_epu8_mask_data[] =
{
{
{0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C},
{0x33, 0x33 ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x33 ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33},
{0x00, 0x00, 0x00, 0xffff, 0xffff, 0xffff}
},
{
{0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C},
{0x33, 0x4C ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x4C ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33},
{0x0202, 0x00, 0x0202, 0xfdfd, 0xffff, 0xfdfd}
},
{
{0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C},
{0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C},
{0xffff, 0x00, 0xffff, 0x00, 0xffff, 0x00}
}
};
static const struct
{
    uint8_t  a[16];
    uint8_t  b[16];
    uint16_t m;
    uint16_t expect[6];
}
g_test_mm_mask_cmp_epu8_mask_data[] =
{
{
{0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C},
{0x33, 0x33 ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x33 ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33},
0xffff,
{0x00, 0x00, 0x00, 0xffff, 0xffff, 0xffff}
},
{
{0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C},
{0x33, 0x4C ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x4C ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33},
0xffff,
{0x0202, 0x00, 0x0202, 0xfdfd, 0xffff, 0xfdfd}
},
{
{0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C},
{0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C},
0xffff,
{0xffff, 0x00, 0xffff, 0x00, 0xffff, 0x00}
}
};
static const struct
{
    uint8_t  a[32];
    uint8_t  b[32];
    uint32_t expect[6];
}
g_test_mm256_cmp_epu8_mask_data[] =
{
{
{0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C},
{0x33, 0x33 ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x33 ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x33 ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x33 ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33},
{0x00, 0x00, 0x00, NaNs32, NaNs32, NaNs32}
},
{
{0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C},
{0x33, 0x4C ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x4C ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x4C ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x4C ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33},
{0x02020202, 0x00, 0x02020202, 0xfdfdfdfd, NaNs32, 0xfdfdfdfd}
},
{
{0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C},
{0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C},
{NaNs32, 0x00, NaNs32, 0x00, NaNs32, 0x00}
}
};

static const struct
{
    uint8_t  a[32];
    uint8_t  b[32];
    uint32_t m;
    uint32_t expect[6];
}
g_test_mm256_mask_cmp_epu8_mask_data[] =
{
{
{0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C},
{0x33, 0x33 ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x33 ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x33 ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x33 ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33},
0x1f000000,
{0x00, 0x00, 0x00, 0x1f000000, 0x1f000000, 0x1f000000}
},
{
{0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C},
{0x33, 0x4C ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x4C ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x4C ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x4C ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33},
0xf00f000f,
{0x00020002, 0x00, 0x00020002, 0xf00d000d, 0xf00f000f, 0xf00d000d}
},
{
{0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C},
{0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C},
0x0,
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
}
};
static const struct
{
    uint8_t  a[64];
    uint8_t  b[64];
    uint64_t expect[6];
}
g_test_mm512_cmp_epu8_mask_data[] =
{
{
{0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C},
{0x33, 0x33 ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x33 ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x33 ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x33 ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x33 ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x33 ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x33 ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x33 ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33},
{0x00, 0x00, 0x00, NaNs64, NaNs64, NaNs64}
},
{
{0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C},
{0x33, 0x4C ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x4C ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x4C ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x4C ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x4C ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x4C ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x4C ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x4C ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33},
{0x0202020202020202, 0x00, 0x0202020202020202,
    0xfdfdfdfdfdfdfdfd, NaNs64, 0xfdfdfdfdfdfdfdfd}
},
{
{0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C},
{0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C},
{NaNs64, 0x00, NaNs64, 0x00, NaNs64, 0x00}
}
};
static const struct
{
    uint8_t  a[64];
    uint8_t  b[64];
    uint64_t m;
    uint64_t expect[6];
}
g_test_mm512_mask_cmp_epu8_mask_data[] =
{
{
{0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C},
{0x33, 0x33 ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x33 ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x33 ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x33 ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x33 ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x33 ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x33 ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x33 ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33},
0x0f,
{0x00, 0x00, 0x00, 0x0f, 0x0f, 0x0f}
},
{
{0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C},
{0x33, 0x4C ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x4C ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x4C ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x4C ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x4C ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x4C ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x4C ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x4C ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33},
0xf0f,
{0x202, 0x00, 0x202,0xd0d, 0xf0f, 0xd0d}
},
{
{0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C},
{0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C},
0x00,
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
}
};

static const struct
{
    double   a[2];
    double   b[2];
    const struct
    {
        int imm;
        uint64_t e[2];
    } expect[32];
}
g_test_mm_cmp_pd_data[] =
{

{
{0.0/0.0, 0.0/0.0},
{1.1, 1.1},

{
{0, {0x0, 0x0}},
{1, {0x0, 0x0}},
{2, {0x0, 0x0}},
{3, {NaNs64, NaNs64}},
{4, {NaNs64, NaNs64}},
{5, {NaNs64, NaNs64}},
{6, {NaNs64, NaNs64}},
{7, {0x0, 0x0}},
{8, {NaNs64, NaNs64}},
{9, {NaNs64, NaNs64}},
{10, {NaNs64, NaNs64}},
{11, {0x0, 0x0}},
{12, {0x0, 0x0}},
{13, {0x0, 0x0}},
{14, {0x0, 0x0}},
{15, {NaNs64, NaNs64}},
{16, {0x0, 0x0}},
{17, {0x0, 0x0}},
{18, {0x0, 0x0}},
{19, {NaNs64, NaNs64}},
{20, {NaNs64, NaNs64}},
{21, {NaNs64, NaNs64}},
{22, {NaNs64, NaNs64}},
{23, {0x0, 0x0}},
{24, {NaNs64, NaNs64}},
{25, {NaNs64, NaNs64}},
{26, {NaNs64, NaNs64}},
{27, {0x0, 0x0}},
{28, {0x0, 0x0}},
{29, {0x0, 0x0}},
{30, {0x0, 0x0}},
{31, {NaNs64, NaNs64}}
}
},

{
{1.0, 1.1},
{1.0, 1.1},

{
{0, {NaNs64, NaNs64}},
{1, {0x0, 0x0}},
{2, {NaNs64, NaNs64}},
{3, {0x0, 0x0}},
{4, {0x0, 0x0}},
{5, {NaNs64, NaNs64}},
{6, {0x0, 0x0}},
{7, {NaNs64, NaNs64}},
{8, {NaNs64, NaNs64}},
{9, {0x0, 0x0}},
{10, {NaNs64, NaNs64}},
{11, {0x0, 0x0}},
{12, {0x0, 0x0}},
{13, {NaNs64, NaNs64}},
{14, {0x0, 0x0}},
{15, {NaNs64, NaNs64}},
{16, {NaNs64, NaNs64}},
{17, {0x0, 0x0}},
{18, {NaNs64, NaNs64}},
{19, {0x0, 0x0}},
{20, {0x0, 0x0}},
{21, {NaNs64, NaNs64}},
{22, {0x0, 0x0}},
{23, {NaNs64, NaNs64}},
{24, {NaNs64, NaNs64}},
{25, {0x0, 0x0}},
{26, {NaNs64, NaNs64}},
{27, {0x0, 0x0}},
{28, {0x0, 0x0}},
{29, {NaNs64, NaNs64}},
{30, {0x0, 0x0}},
{31, {NaNs64, NaNs64}}
}
},

{
{0.0/0.0, 0.0/0.0},
{0.0/0.0, 0.0/0.0},
{
{0, {0x0, 0x0}},
{1, {0x0, 0x0}},
{2, {0x0, 0x0}},
{3, {NaNs64, NaNs64}},
{4, {NaNs64, NaNs64}},
{5, {NaNs64, NaNs64}},
{6, {NaNs64, NaNs64}},
{7, {0x0, 0x0}},
{8, {NaNs64, NaNs64}},
{9, {NaNs64, NaNs64}},
{10, {NaNs64, NaNs64}},
{11, {0x0, 0x0}},
{12, {0x0, 0x0}},
{13, {0x0, 0x0}},
{14, {0x0, 0x0}},
{15, {NaNs64, NaNs64}},
{16, {0x0, 0x0}},
{17, {0x0, 0x0}},
{18, {0x0, 0x0}},
{19, {NaNs64, NaNs64}},
{20, {NaNs64, NaNs64}},
{21, {NaNs64, NaNs64}},
{22, {NaNs64, NaNs64}},
{23, {0x0, 0x0}},
{24, {NaNs64, NaNs64}},
{25, {NaNs64, NaNs64}},
{26, {NaNs64, NaNs64}},
{27, {0x0, 0x0}},
{28, {0x0, 0x0}},
{29, {0x0, 0x0}},
{30, {0x0, 0x0}},
{31, {NaNs64, NaNs64}}
}
},

{
{0.0, 0.0},
{1.0, 1.0},
{
{0, {0x0, 0x0}},
{1, {NaNs64, NaNs64}},
{2, {NaNs64, NaNs64}},
{3, {0x0, 0x0}},
{4, {NaNs64, NaNs64}},
{5, {0x0, 0x0}},
{6, {0x0, 0x0}},
{7, {NaNs64, NaNs64}},
{8, {0x0, 0x0}},
{9, {NaNs64, NaNs64}},
{10, {NaNs64, NaNs64}},
{11, {0x0, 0x0}},
{12, {NaNs64, NaNs64}},
{13, {0x0, 0x0}},
{14, {0x0, 0x0}},
{15, {NaNs64, NaNs64}},
{16, {0x0, 0x0}},
{17, {NaNs64, NaNs64}},
{18, {NaNs64, NaNs64}},
{19, {0x0, 0x0}},
{20, {NaNs64, NaNs64}},
{21, {0x0, 0x0}},
{22, {0x0, 0x0}},
{23, {NaNs64, NaNs64}},
{24, {0x0, 0x0}},
{25, {NaNs64, NaNs64}},
{26, {NaNs64, NaNs64}},
{27, {0x0, 0x0}},
{28, {NaNs64, NaNs64}},
{29, {0x0, 0x0}},
{30, {0x0, 0x0}},
{31, {NaNs64, NaNs64}}
}
},

{
{1.0, 1.0},
{0.0, 0.0},
{
{0, {0x0, 0x0}},
{1, {0x0, 0x0}},
{2, {0x0, 0x0}},
{3, {0x0, 0x0}},
{4, {NaNs64, NaNs64}},
{5, {NaNs64, NaNs64}},
{6, {NaNs64, NaNs64}},
{7, {NaNs64, NaNs64}},
{8, {0x0, 0x0}},
{9, {0x0, 0x0}},
{10, {0x0, 0x0}},
{11, {0x0, 0x0}},
{12, {NaNs64, NaNs64}},
{13, {NaNs64, NaNs64}},
{14, {NaNs64, NaNs64}},
{15, {NaNs64, NaNs64}},
{16, {0x0, 0x0}},
{17, {0x0, 0x0}},
{18, {0x0, 0x0}},
{19, {0x0, 0x0}},
{20, {NaNs64, NaNs64}},
{21, {NaNs64, NaNs64}},
{22, {NaNs64, NaNs64}},
{23, {NaNs64, NaNs64}},
{24, {0x0, 0x0}},
{25, {0x0, 0x0}},
{26, {0x0, 0x0}},
{27, {0x0, 0x0}},
{28, {NaNs64, NaNs64}},
{29, {NaNs64, NaNs64}},
{30, {NaNs64, NaNs64}},
{31, {NaNs64, NaNs64}}
}
},

{
{1.0, 0.0},
{0.0, 1.0},
{
{0, {0x0, 0x0}},
{1, {0x0, NaNs64}},
{2, {0x0, NaNs64}},
{3, {0x0, 0x0}},
{4, {NaNs64, NaNs64}},
{5, {NaNs64, 0x0}},
{6, {NaNs64, 0x0}},
{7, {NaNs64, NaNs64}},
{8, {0x0, 0x0}},
{9, {0x0, NaNs64}},
{10, {0x0, NaNs64}},
{11, {0x0, 0x0}},
{12, {NaNs64, NaNs64}},
{13, {NaNs64, 0x0}},
{14, {NaNs64, 0x0}},
{15, {NaNs64, NaNs64}},
{16, {0x0, 0x0}},
{17, {0x0, NaNs64}},
{18, {0x0, NaNs64}},
{19, {0x0, 0x0}},
{20, {NaNs64, NaNs64}},
{21, {NaNs64, 0x0}},
{22, {NaNs64, 0x0}},
{23, {NaNs64, NaNs64}},
{24, {0x0, 0x0}},
{25, {0x0, NaNs64}},
{26, {0x0, NaNs64}},
{27, {0x0, 0x0}},
{28, {NaNs64, NaNs64}},
{29, {NaNs64, 0x0}},
{30, {NaNs64, 0x0}},
{31, {NaNs64, NaNs64}}
}
},

{
{0.0, 1.0},
{1.0, 0.0},
{
{0, {0x0, 0x0}},
{1, {NaNs64, 0x0}},
{2, {NaNs64, 0x0}},
{3, {0x0, 0x0}},
{4, {NaNs64, NaNs64}},
{5, {0x0, NaNs64}},
{6, {0x0, NaNs64}},
{7, {NaNs64, NaNs64}},
{8, {0x0, 0x0}},
{9, {NaNs64, 0x0}},
{10, {NaNs64, 0x0}},
{11, {0x0, 0x0}},
{12, {NaNs64, NaNs64}},
{13, {0x0, NaNs64}},
{14, {0x0, NaNs64}},
{15, {NaNs64, NaNs64}},
{16, {0x0, 0x0}},
{17, {NaNs64, 0x0}},
{18, {NaNs64, 0x0}},
{19, {0x0, 0x0}},
{20, {NaNs64, NaNs64}},
{21, {0x0, NaNs64}},
{22, {0x0, NaNs64}},
{23, {NaNs64, NaNs64}},
{24, {0x0, 0x0}},
{25, {NaNs64, 0x0}},
{26, {NaNs64, 0x0}},
{27, {0x0, 0x0}},
{28, {NaNs64, NaNs64}},
{29, {0x0, NaNs64}},
{30, {0x0, NaNs64}},
{31, {NaNs64, NaNs64}}
}
},

{
{1.0, 0.0},
{1.0, 0.0},
{
{0, {NaNs64, NaNs64}},
{1, {0x0, 0x0}},
{2, {NaNs64, NaNs64}},
{3, {0x0, 0x0}},
{4, {0x0, 0x0}},
{5, {NaNs64, NaNs64}},
{6, {0x0, 0x0}},
{7, {NaNs64, NaNs64}},
{8, {NaNs64, NaNs64}},
{9, {0x0, 0x0}},
{10, {NaNs64, NaNs64}},
{11, {0x0, 0x0}},
{12, {0x0, 0x0}},
{13, {NaNs64, NaNs64}},
{14, {0x0, 0x0}},
{15, {NaNs64, NaNs64}},
{16, {NaNs64, NaNs64}},
{17, {0x0, 0x0}},
{18, {NaNs64, NaNs64}},
{19, {0x0, 0x0}},
{20, {0x0, 0x0}},
{21, {NaNs64, NaNs64}},
{22, {0x0, 0x0}},
{23, {NaNs64, NaNs64}},
{24, {NaNs64, NaNs64}},
{25, {0x0, 0x0}},
{26, {NaNs64, NaNs64}},
{27, {0x0, 0x0}},
{28, {0x0, 0x0}},
{29, {NaNs64, NaNs64}},
{30, {0x0, 0x0}},
{31, {NaNs64, NaNs64}},
}
},

{
{0.0, 1.0},
{0.0, 1.0},
{
{0, {NaNs64, NaNs64}},
{1, {0x0, 0x0}},
{2, {NaNs64, NaNs64}},
{3, {0x0, 0x0}},
{4, {0x0, 0x0}},
{5, {NaNs64, NaNs64}},
{6, {0x0, 0x0}},
{7, {NaNs64, NaNs64}},
{8, {NaNs64, NaNs64}},
{9, {0x0, 0x0}},
{10, {NaNs64, NaNs64}},
{11, {0x0, 0x0}},
{12, {0x0, 0x0}},
{13, {NaNs64, NaNs64}},
{14, {0x0, 0x0}},
{15, {NaNs64, NaNs64}},
{16, {NaNs64, NaNs64}},
{17, {0x0, 0x0}},
{18, {NaNs64, NaNs64}},
{19, {0x0, 0x0}},
{20, {0x0, 0x0}},
{21, {NaNs64, NaNs64}},
{22, {0x0, 0x0}},
{23, {NaNs64, NaNs64}},
{24, {NaNs64, NaNs64}},
{25, {0x0, 0x0}},
{26, {NaNs64, NaNs64}},
{27, {0x0, 0x0}},
{28, {0x0, 0x0}},
{29, {NaNs64, NaNs64}},
{30, {0x0, 0x0}},
{31, {NaNs64, NaNs64}}
}
},

{
{1.0, 1.0},
{0.0, 1.0},
{
{0, {0x0, NaNs64}},
{1, {0x0, 0x0}},
{2, {0x0, NaNs64}},
{3, {0x0, 0x0}},
{4, {NaNs64, 0x0}},
{5, {NaNs64, NaNs64}},
{6, {NaNs64, 0x0}},
{7, {NaNs64, NaNs64}},
{8, {0x0, NaNs64}},
{9, {0x0, 0x0}},
{10, {0x0, NaNs64}},
{11, {0x0, 0x0}},
{12, {NaNs64, 0x0}},
{13, {NaNs64, NaNs64}},
{14, {NaNs64, 0x0}},
{15, {NaNs64, NaNs64}},
{16, {0x0, NaNs64}},
{17, {0x0, 0x0}},
{18, {0x0, NaNs64}},
{19, {0x0, 0x0}},
{20, {NaNs64, 0x0}},
{21, {NaNs64, NaNs64}},
{22, {NaNs64, 0x0}},
{23, {NaNs64, NaNs64}},
{24, {0x0, NaNs64}},
{25, {0x0, 0x0}},
{26, {0x0, NaNs64}},
{27, {0x0, 0x0}},
{28, {NaNs64, 0x0}},
{29, {NaNs64, NaNs64}},
{30, {NaNs64, 0x0}},
{31, {NaNs64, NaNs64}},
}
},

{
{1.0, -1.0},
{0.0, 1.0},
{
{0, {0x0, 0x0}},
{1, {0x0, NaNs64}},
{2, {0x0, NaNs64}},
{3, {0x0, 0x0}},
{4, {NaNs64, NaNs64}},
{5, {NaNs64, 0x0}},
{6, {NaNs64, 0x0}},
{7, {NaNs64, NaNs64}},
{8, {0x0, 0x0}},
{9, {0x0, NaNs64}},
{10, {0x0, NaNs64}},
{11, {0x0, 0x0}},
{12, {NaNs64, NaNs64}},
{13, {NaNs64, 0x0}},
{14, {NaNs64, 0x0}},
{15, {NaNs64, NaNs64}},
{16, {0x0, 0x0}},
{17, {0x0, NaNs64}},
{18, {0x0, NaNs64}},
{19, {0x0, 0x0}},
{20, {NaNs64, NaNs64}},
{21, {NaNs64, 0x0}},
{22, {NaNs64, 0x0}},
{23, {NaNs64, NaNs64}},
{24, {0x0, 0x0}},
{25, {0x0, NaNs64}},
{26, {0x0, NaNs64}},
{27, {0x0, 0x0}},
{28, {NaNs64, NaNs64}},
{29, {NaNs64, 0x0}},
{30, {NaNs64, 0x0}},
{31, {NaNs64, NaNs64}}
}
},

{
{1.0, -1.0},
{0.0, -1.0},
{
{0, {0x0, NaNs64}},
{1, {0x0, 0x0}},
{2, {0x0, NaNs64}},
{3, {0x0, 0x0}},
{4, {NaNs64, 0x0}},
{5, {NaNs64, NaNs64}},
{6, {NaNs64, 0x0}},
{7, {NaNs64, NaNs64}},
{8, {0x0, NaNs64}},
{9, {0x0, 0x0}},
{10, {0x0, NaNs64}},
{11, {0x0, 0x0}},
{12, {NaNs64, 0x0}},
{13, {NaNs64, NaNs64}},
{14, {NaNs64, 0x0}},
{15, {NaNs64, NaNs64}},
{16, {0x0, NaNs64}},
{17, {0x0, 0x0}},
{18, {0x0, NaNs64}},
{19, {0x0, 0x0}},
{20, {NaNs64, 0x0}},
{21, {NaNs64, NaNs64}},
{22, {NaNs64, 0x0}},
{23, {NaNs64, NaNs64}},
{24, {0x0, NaNs64}},
{25, {0x0, 0x0}},
{26, {0x0, NaNs64}},
{27, {0x0, 0x0}},
{28, {NaNs64, 0x0}},
{29, {NaNs64, NaNs64}},
{30, {NaNs64, 0x0}},
{31, {NaNs64, NaNs64}},
}
},

};

static const struct
{
    double   a[4];
    double   b[4];

    const struct
    {
        int imm;
        uint64_t e[4];
    } expect[32];
}
g_test_mm256_cmp_pd_data[] =
{
{
{0.0/0.0, 0.0/0.0, 0.0/0.0, 0.0/0.0},
{1.1, 1.1, 1.1, 1.1},

{
{0, {0x0, 0x0, 0x0, 0x0}},
{1, {0x0, 0x0, 0x0, 0x0}},
{2, {0x0, 0x0, 0x0, 0x0}},
{3, {NaNs64, NaNs64, NaNs64, NaNs64}},
{4, {NaNs64, NaNs64, NaNs64, NaNs64}},
{5, {NaNs64, NaNs64, NaNs64, NaNs64}},
{6, {NaNs64, NaNs64, NaNs64, NaNs64}},
{7, {0x0, 0x0, 0x0, 0x0}},
{8, {NaNs64, NaNs64, NaNs64, NaNs64}},
{9, {NaNs64, NaNs64, NaNs64, NaNs64}},
{10, {NaNs64, NaNs64, NaNs64, NaNs64}},
{11, {0x0, 0x0, 0x0, 0x0}},
{12, {0x0, 0x0, 0x0, 0x0}},
{13, {0x0, 0x0, 0x0, 0x0}},
{14, {0x0, 0x0, 0x0, 0x0}},
{15, {NaNs64, NaNs64, NaNs64, NaNs64}},
{16, {0x0, 0x0, 0x0, 0x0}},
{17, {0x0, 0x0, 0x0, 0x0}},
{18, {0x0, 0x0, 0x0, 0x0}},
{19, {NaNs64, NaNs64, NaNs64, NaNs64}},
{20, {NaNs64, NaNs64, NaNs64, NaNs64}},
{21, {NaNs64, NaNs64, NaNs64, NaNs64}},
{22, {NaNs64, NaNs64, NaNs64, NaNs64}},
{23, {0x0, 0x0, 0x0, 0x0}},
{24, {NaNs64, NaNs64, NaNs64, NaNs64}},
{25, {NaNs64, NaNs64, NaNs64, NaNs64}},
{26, {NaNs64, NaNs64, NaNs64, NaNs64}},
{27, {0x0, 0x0, 0x0, 0x0}},
{28, {0x0, 0x0, 0x0, 0x0}},
{29, {0x0, 0x0, 0x0, 0x0}},
{30, {0x0, 0x0, 0x0, 0x0}},
{31, {NaNs64, NaNs64, NaNs64, NaNs64}}
}
},

{
{1.0, -1.0, 1.0, -1.0},
{0.0, 1.0, 0.0, 1.0},
{
{0, {0x0, 0x0, 0x0, 0x0}},
{1, {0x0, NaNs64, 0x0, NaNs64}},
{2, {0x0, NaNs64, 0x0, NaNs64}},
{3, {0x0, 0x0, 0x0, 0x0}},
{4, {NaNs64, NaNs64, NaNs64, NaNs64}},
{5, {NaNs64, 0x0, NaNs64, 0x0}},
{6, {NaNs64, 0x0, NaNs64, 0x0}},
{7, {NaNs64, NaNs64, NaNs64, NaNs64}},
{8, {0x0, 0x0, 0x0, 0x0}},
{9, {0x0, NaNs64, 0x0, NaNs64}},
{10, {0x0, NaNs64, 0x0, NaNs64}},
{11, {0x0, 0x0, 0x0, 0x0}},
{12, {NaNs64, NaNs64, NaNs64, NaNs64}},
{13, {NaNs64, 0x0, NaNs64, 0x0}},
{14, {NaNs64, 0x0, NaNs64, 0x0}},
{15, {NaNs64, NaNs64, NaNs64, NaNs64}},
{16, {0x0, 0x0, 0x0, 0x0}},
{17, {0x0, NaNs64, 0x0, NaNs64}},
{18, {0x0, NaNs64, 0x0, NaNs64}},
{19, {0x0, 0x0,0x0, 0x0}},
{20, {NaNs64, NaNs64,NaNs64, NaNs64}},
{21, {NaNs64, 0x0, NaNs64, 0x0}},
{22, {NaNs64, 0x0, NaNs64, 0x0}},
{23, {NaNs64, NaNs64, NaNs64, NaNs64}},
{24, {0x0, 0x0, 0x0, 0x0}},
{25, {0x0, NaNs64, 0x0, NaNs64}},
{26, {0x0, NaNs64, 0x0, NaNs64}},
{27, {0x0, 0x0, 0x0, 0x0}},
{28, {NaNs64, NaNs64, NaNs64, NaNs64}},
{29, {NaNs64, 0x0, NaNs64, 0x0}},
{30, {NaNs64, 0x0, NaNs64, 0x0}},
{31, {NaNs64, NaNs64, NaNs64, NaNs64}}
}
}
};

static const struct
{
    double   a[2];
    double   b[2];

    uint8_t expect[32];
}
g_test_mm_cmp_pd_mask_data[] =
{
{
{0.0/0.0, 0.0/0.0},
{1.1, 1.1},

{
    0x0,
    0x0,
    0x0,
    0x03,
    0x03,
    0x03,
    0x03,
    0x0,
    0x03,
    0x03,
    0x03,
    0x0,
    0x0,
    0x0,
    0x0,
    0x03,
    0x0,
    0x0,
    0x0,
    0x03,
    0x03,
    0x03,
    0x03,
    0x0,
    0x03,
    0x03,
    0x03,
    0x0,
    0x0,
    0x0,
    0x0,
    0x03
}
},

{
{1.0, -1.0},
{0.0, 1.0},

{
    0x0,
    0x02,
    0x02,
    0x0,
    0x03,
    0x01,
    0x01,
    0x03,
    0x0,
    0x02,
    0x02,
    0x0,
    0x03,
    0x01,
    0x01,
    0x03,
    0x0,
    0x02,
    0x02,
    0x0,
    0x03,
    0x01,
    0x01,
    0x03,
    0x0,
    0x02,
    0x02,
    0x0,
    0x03,
    0x01,
    0x01,
    0x03
}
}
};

static const struct
{
    double   a[4];
    double   b[4];

    uint8_t expect[32];
}
g_test_mm256_cmp_pd_mask_data[] =
{
{
{0.0/0.0, 0.0/0.0, 0.0/0.0, 0.0/0.0},
{1.1, 1.1, 1.1, 1.1},

{
    0x0,
    0x0,
    0x0,
    0x0f,
    0x0f,
    0x0f,
    0x0f,
    0x0,
    0x0f,
    0x0f,
    0x0f,
    0x0,
    0x0,
    0x0,
    0x0,
    0x0f,
    0x0,
    0x0,
    0x0,
    0x0f,
    0x0f,
    0x0f,
    0x0f,
    0x0,
    0x0f,
    0x0f,
    0x0f,
    0x0,
    0x0,
    0x0,
    0x0,
    0x0f
}
},

{
{1.0, -1.0, 1.0, -1.0},
{0.0, 1.0, 0.0, 1.0},
{
    0x0,
    0x0a,
    0x0a,
    0x0,
    0x0f,
    0x05,
    0x05,
    0x0f,
    0x0,
    0x0a,
    0x0a,
    0x0,
    0x0f,
    0x05,
    0x05,
    0x0f,
    0x0,
    0x0a,
    0x0a,
    0x0,
    0x0f,
    0x05,
    0x05,
    0x0f,
    0x0,
    0x0a,
    0x0a,
    0x0,
    0x0f,
    0x05,
    0x05,
    0x0f
}
}
};

static const struct
{
    double   a[2];
    double   b[2];
    uint8_t  m;

    uint8_t expect[32];
}
g_test_mm_mask_cmp_pd_mask_data[] =
{
{
{0.0/0.0, 0.0/0.0},
{1.1, 1.1},
0x03,
{
    0x0,
    0x0,
    0x0,
    0x03,
    0x03,
    0x03,
    0x03,
    0x0,
    0x03,
    0x03,
    0x03,
    0x0,
    0x0,
    0x0,
    0x0,
    0x03,
    0x0,
    0x0,
    0x0,
    0x03,
    0x03,
    0x03,
    0x03,
    0x0,
    0x03,
    0x03,
    0x03,
    0x0,
    0x0,
    0x0,
    0x0,
    0x03
}
},

{
{1.0, -1.0},
{0.0, 1.0},
0x02,
{
    0x0,
    0x02,
    0x02,
    0x0,
    0x02,
    0x00,
    0x00,
    0x02,
    0x0,
    0x02,
    0x02,
    0x0,
    0x02,
    0x00,
    0x00,
    0x02,
    0x0,
    0x02,
    0x02,
    0x0,
    0x02,
    0x00,
    0x00,
    0x02,
    0x0,
    0x02,
    0x02,
    0x0,
    0x02,
    0x00,
    0x00,
    0x02
}
}
};

static const struct
{
    double   a[4];
    double   b[4];
    uint8_t  m;
    uint8_t expect[32];
}
g_test_mm256_mask_cmp_pd_mask_data[] =
{
{
{0.0/0.0, 0.0/0.0, 0.0/0.0, 0.0/0.0},
{1.1, 1.1, 1.1, 1.1},
0x0f,
{
    0x0,
    0x0,
    0x0,
    0x0f,
    0x0f,
    0x0f,
    0x0f,
    0x0,
    0x0f,
    0x0f,
    0x0f,
    0x0,
    0x0,
    0x0,
    0x0,
    0x0f,
    0x0,
    0x0,
    0x0,
    0x0f,
    0x0f,
    0x0f,
    0x0f,
    0x0,
    0x0f,
    0x0f,
    0x0f,
    0x0,
    0x0,
    0x0,
    0x0,
    0x0f
}
},

{
{1.0, -1.0, 1.0, -1.0},
{0.0, 1.0, 0.0, 1.0},
0x0f,
{
    0x0,
    0x0a,
    0x0a,
    0x0,
    0x0f,
    0x05,
    0x05,
    0x0f,
    0x0,
    0x0a,
    0x0a,
    0x0,
    0x0f,
    0x05,
    0x05,
    0x0f,
    0x0,
    0x0a,
    0x0a,
    0x0,
    0x0f,
    0x05,
    0x05,
    0x0f,
    0x0,
    0x0a,
    0x0a,
    0x0,
    0x0f,
    0x05,
    0x05,
    0x0f
}
}
};

static const struct
{
    double   a[8];
    double   b[8];

    uint8_t expect[32];
}
g_test_mm512_cmp_pd_mask_data[] =
{
{
{0.0/0.0, 0.0/0.0, 0.0/0.0, 0.0/0.0,
    0.0/0.0, 0.0/0.0, 0.0/0.0, 0.0/0.0},
{1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1},

{
    0x0,
    0x0,
    0x0,
    0xff,
    0xff,
    0xff,
    0xff,
    0x0,
    0xff,
    0xff,
    0xff,
    0x0,
    0x0,
    0x0,
    0x0,
    0xff,
    0x0,
    0x0,
    0x0,
    0xff,
    0xff,
    0xff,
    0xff,
    0x0,
    0xff,
    0xff,
    0xff,
    0x0,
    0x0,
    0x0,
    0x0,
    0xff
}
},

{
{1.0, -1.0, 1.0, -1.0},
{0.0, 1.0, 0.0, 1.0},
{
    0xf0,
    0xa,
    0xfa,
    0x0,
    0xf,
    0xf5,
    0x5,
    0xff,
    0xf0,
    0xa,
    0xfa,
    0x0,
    0xf,
    0xf5,
    0x5,
    0xff,
    0xf0,
    0xa,
    0xfa,
    0x0,
    0xf,
    0xf5,
    0x5,
    0xff,
    0xf0,
    0xa,
    0xfa,
    0x0,
    0xf,
    0xf5,
    0x5,
    0xff
}
}
};

// 6-12
static const struct
{
    double   a[8];
    double   b[8];
    uint8_t  m;

    uint8_t expect[32];
}
g_test_mm512_mask_cmp_pd_mask_data[] =
{
{
{0.0/0.0, 0.0/0.0, 0.0/0.0, 0.0/0.0,
    0.0/0.0, 0.0/0.0, 0.0/0.0, 0.0/0.0},
{1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1},
0xff,
{
    0x0,
    0x0,
    0x0,
    0xff,
    0xff,
    0xff,
    0xff,
    0x0,
    0xff,
    0xff,
    0xff,
    0x0,
    0x0,
    0x0,
    0x0,
    0xff,
    0x0,
    0x0,
    0x0,
    0xff,
    0xff,
    0xff,
    0xff,
    0x0,
    0xff,
    0xff,
    0xff,
    0x0,
    0x0,
    0x0,
    0x0,
    0xff
}
},

{
{1.0, -1.0, 1.0, -1.0},
{0.0, 1.0, 0.0, 1.0},
0xff,
{
    0xf0,
    0xa,
    0xfa,
    0x0,
    0xf,
    0xf5,
    0x5,
    0xff,
    0xf0,
    0xa,
    0xfa,
    0x0,
    0xf,
    0xf5,
    0x5,
    0xff,
    0xf0,
    0xa,
    0xfa,
    0x0,
    0xf,
    0xf5,
    0x5,
    0xff,
    0xf0,
    0xa,
    0xfa,
    0x0,
    0xf,
    0xf5,
    0x5,
    0xff
}
}
};

#define dImmMacro(...) __VA_ARGS__
#define dImmMacro128(Imm, ...) {{dImmMacro(__VA_ARGS__)}}
static const struct
{
    float   a[4];
    float   b[4];
    const struct
    {
        uint32_t e[4];
    } expect[32];
}
g_test_mm_cmp_ps_data[] =
{

{
{0.0/0.0, 0.0/0.0, 0.0/0.0, 0.0/0.0},
{1.1, 1.1, 1.1, 1.1},

{
    dImmMacro128 (0, 0, 0, 0, 0),
    dImmMacro128 (1, 0, 0, 0, 0),
    dImmMacro128 (2, 0, 0, 0, 0),
    dImmMacro128 (3, -1, -1, -1, -1),
    dImmMacro128 (4, -1, -1, -1, -1),
    dImmMacro128 (5, -1, -1, -1, -1),
    dImmMacro128 (6, -1, -1, -1, -1),
    dImmMacro128 (7, 0, 0, 0, 0),
    dImmMacro128 (8, -1, -1, -1, -1),
    dImmMacro128 (9, -1, -1, -1, -1),
    dImmMacro128 (10, -1, -1, -1, -1),
    dImmMacro128 (11, 0, 0, 0, 0),
    dImmMacro128 (12, 0, 0, 0, 0),
    dImmMacro128 (13, 0, 0, 0, 0),
    dImmMacro128 (14, 0, 0, 0, 0),
    dImmMacro128 (15, -1, -1, -1, -1),
    dImmMacro128 (16, 0, 0, 0, 0),
    dImmMacro128 (17, 0, 0, 0, 0),
    dImmMacro128 (18, 0, 0, 0, 0),
    dImmMacro128 (19, -1, -1, -1, -1),
    dImmMacro128 (20, -1, -1, -1, -1),
    dImmMacro128 (21, -1, -1, -1, -1),
    dImmMacro128 (22, -1, -1, -1, -1),
    dImmMacro128 (23, 0, 0, 0, 0),
    dImmMacro128 (24, -1, -1, -1, -1),
    dImmMacro128 (25, -1, -1, -1, -1),
    dImmMacro128 (26, -1, -1, -1, -1),
    dImmMacro128 (27, 0, 0, 0, 0),
    dImmMacro128 (28, 0, 0, 0, 0),
    dImmMacro128 (29, 0, 0, 0, 0),
    dImmMacro128 (30, 0, 0, 0, 0),
    dImmMacro128 (31, -1, -1, -1, -1)
}
},

{
{1.0, 1.1, 1.0, 1.1},
{1.0, 1.1, 1.0, 1.1},

{
    dImmMacro128 (0, -1, -1, -1, -1),
    dImmMacro128 (1, 0, 0, 0, 0),
    dImmMacro128 (2, -1, -1, -1, -1),
    dImmMacro128 (3, 0, 0, 0, 0),
    dImmMacro128 (4, 0, 0, 0, 0),
    dImmMacro128 (5, -1, -1, -1, -1),
    dImmMacro128 (6, 0, 0, 0, 0),
    dImmMacro128 (7, -1, -1, -1, -1),
    dImmMacro128 (8, -1, -1, -1, -1),
    dImmMacro128 (9, 0, 0, 0, 0),
    dImmMacro128 (10, -1, -1, -1, -1),
    dImmMacro128 (11, 0, 0, 0, 0),
    dImmMacro128 (12, 0, 0, 0, 0),
    dImmMacro128 (13, -1, -1, -1, -1),
    dImmMacro128 (14, 0, 0, 0, 0),
    dImmMacro128 (15, -1, -1, -1, -1),
    dImmMacro128 (16, -1, -1, -1, -1),
    dImmMacro128 (17, 0, 0, 0, 0),
    dImmMacro128 (18, -1, -1, -1, -1),
    dImmMacro128 (19, 0, 0, 0, 0),
    dImmMacro128 (20, 0, 0, 0, 0),
    dImmMacro128 (21, -1, -1, -1, -1),
    dImmMacro128 (22, 0, 0, 0, 0),
    dImmMacro128 (23, -1, -1, -1, -1),
    dImmMacro128 (24, -1, -1, -1, -1),
    dImmMacro128 (25, 0, 0, 0, 0),
    dImmMacro128 (26, -1, -1, -1, -1),
    dImmMacro128 (27, 0, 0, 0, 0),
    dImmMacro128 (28, 0, 0, 0, 0),
    dImmMacro128 (29, -1, -1, -1, -1),
    dImmMacro128 (30, 0, 0, 0, 0),
    dImmMacro128 (31, -1, -1, -1, -1)
}
},

{
{0.0/0.0, 0.0/0.0, 0.0/0.0, 0.0/0.0},
{0.0/0.0, 0.0/0.0, 0.0/0.0, 0.0/0.0},
{
    dImmMacro128 (0, 0, 0, 0, 0),
    dImmMacro128 (1, 0, 0, 0, 0),
    dImmMacro128 (2, 0, 0, 0, 0),
    dImmMacro128 (3, -1, -1, -1, -1),
    dImmMacro128 (4, -1, -1, -1, -1),
    dImmMacro128 (5, -1, -1, -1, -1),
    dImmMacro128 (6, -1, -1, -1, -1),
    dImmMacro128 (7, 0, 0, 0, 0),
    dImmMacro128 (8, -1, -1, -1, -1),
    dImmMacro128 (9, -1, -1, -1, -1),
    dImmMacro128 (10, -1, -1, -1, -1),
    dImmMacro128 (11, 0, 0, 0, 0),
    dImmMacro128 (12, 0, 0, 0, 0),
    dImmMacro128 (13, 0, 0, 0, 0),
    dImmMacro128 (14, 0, 0, 0, 0),
    dImmMacro128 (15, -1, -1, -1, -1),
    dImmMacro128 (16, 0, 0, 0, 0),
    dImmMacro128 (17, 0, 0, 0, 0),
    dImmMacro128 (18, 0, 0, 0, 0),
    dImmMacro128 (19, -1, -1, -1, -1),
    dImmMacro128 (20, -1, -1, -1, -1),
    dImmMacro128 (21, -1, -1, -1, -1),
    dImmMacro128 (22, -1, -1, -1, -1),
    dImmMacro128 (23, 0, 0, 0, 0),
    dImmMacro128 (24, -1, -1, -1, -1),
    dImmMacro128 (25, -1, -1, -1, -1),
    dImmMacro128 (26, -1, -1, -1, -1),
    dImmMacro128 (27, 0, 0, 0, 0),
    dImmMacro128 (28, 0, 0, 0, 0),
    dImmMacro128 (29, 0, 0, 0, 0),
    dImmMacro128 (30, 0, 0, 0, 0),
    dImmMacro128 (31, -1, -1, -1, -1)
}
},

{
{0.0, 0.0, 0.0, 0.0},
{1.0, 1.0, 1.0, 1.0},
{
    dImmMacro128 (0, 0, 0, 0, 0),
    dImmMacro128 (1, -1, -1, -1, -1),
    dImmMacro128 (2, -1, -1, -1, -1),
    dImmMacro128 (3, 0, 0, 0, 0),
    dImmMacro128 (4, -1, -1, -1, -1),
    dImmMacro128 (5, 0, 0, 0, 0),
    dImmMacro128 (6, 0, 0, 0, 0),
    dImmMacro128 (7, -1, -1, -1, -1),
    dImmMacro128 (8, 0, 0, 0, 0),
    dImmMacro128 (9, -1, -1, -1, -1),
    dImmMacro128 (10, -1, -1, -1, -1),
    dImmMacro128 (11, 0, 0, 0, 0),
    dImmMacro128 (12, -1, -1, -1, -1),
    dImmMacro128 (13, 0, 0, 0, 0),
    dImmMacro128 (14, 0, 0, 0, 0),
    dImmMacro128 (15, -1, -1, -1, -1),
    dImmMacro128 (16, 0, 0, 0, 0),
    dImmMacro128 (17, -1, -1, -1, -1),
    dImmMacro128 (18, -1, -1, -1, -1),
    dImmMacro128 (19, 0, 0, 0, 0),
    dImmMacro128 (20, -1, -1, -1, -1),
    dImmMacro128 (21, 0, 0, 0, 0),
    dImmMacro128 (22, 0, 0, 0, 0),
    dImmMacro128 (23, -1, -1, -1, -1),
    dImmMacro128 (24, 0, 0, 0, 0),
    dImmMacro128 (25, -1, -1, -1, -1),
    dImmMacro128 (26, -1, -1, -1, -1),
    dImmMacro128 (27, 0, 0, 0, 0),
    dImmMacro128 (28, -1, -1, -1, -1),
    dImmMacro128 (29, 0, 0, 0, 0),
    dImmMacro128 (30, 0, 0, 0, 0),
    dImmMacro128 (31, -1, -1, -1, -1)
}
},

{
{1.0, 1.0, 1.0, 1.0},
{0.0, 0.0, 0.0, 0.0},
{
    dImmMacro128 (0, 0, 0, 0, 0),
    dImmMacro128 (1, 0, 0, 0, 0),
    dImmMacro128 (2, 0, 0, 0, 0),
    dImmMacro128 (3, 0, 0, 0, 0),
    dImmMacro128 (4, -1, -1, -1, -1),
    dImmMacro128 (5, -1, -1, -1, -1),
    dImmMacro128 (6, -1, -1, -1, -1),
    dImmMacro128 (7, -1, -1, -1, -1),
    dImmMacro128 (8, 0, 0, 0, 0),
    dImmMacro128 (9, 0, 0, 0, 0),
    dImmMacro128 (10, 0, 0, 0, 0),
    dImmMacro128 (11, 0, 0, 0, 0),
    dImmMacro128 (12, -1, -1, -1, -1),
    dImmMacro128 (13, -1, -1, -1, -1),
    dImmMacro128 (14, -1, -1, -1, -1),
    dImmMacro128 (15, -1, -1, -1, -1),
    dImmMacro128 (16, 0, 0, 0, 0),
    dImmMacro128 (17, 0, 0, 0, 0),
    dImmMacro128 (18, 0, 0, 0, 0),
    dImmMacro128 (19, 0, 0, 0, 0),
    dImmMacro128 (20, -1, -1, -1, -1),
    dImmMacro128 (21, -1, -1, -1, -1),
    dImmMacro128 (22, -1, -1, -1, -1),
    dImmMacro128 (23, -1, -1, -1, -1),
    dImmMacro128 (24, 0, 0, 0, 0),
    dImmMacro128 (25, 0, 0, 0, 0),
    dImmMacro128 (26, 0, 0, 0, 0),
    dImmMacro128 (27, 0, 0, 0, 0),
    dImmMacro128 (28, -1, -1, -1, -1),
    dImmMacro128 (29, -1, -1, -1, -1),
    dImmMacro128 (30, -1, -1, -1, -1),
    dImmMacro128 (31, -1, -1, -1, -1)
}
},

{
{1.0, 0.0, 1.0, 0.0},
{0.0, 1.0, 0.0, 1.0},
{
    dImmMacro128 (0, 0, 0, 0, 0),
    dImmMacro128 (1, 0, -1, 0, -1),
    dImmMacro128 (2, 0, -1, 0, -1),
    dImmMacro128 (3, 0, 0, 0, 0),
    dImmMacro128 (4, -1, -1, -1, -1),
    dImmMacro128 (5, -1, 0, -1, 0),
    dImmMacro128 (6, -1, 0, -1, 0),
    dImmMacro128 (7, -1, -1, -1, -1),
    dImmMacro128 (8, 0, 0, 0, 0),
    dImmMacro128 (9, 0, -1, 0, -1),
    dImmMacro128 (10, 0, -1, 0, -1),
    dImmMacro128 (11, 0, 0, 0, 0),
    dImmMacro128 (12, -1, -1, -1, -1),
    dImmMacro128 (13, -1, 0, -1, 0),
    dImmMacro128 (14, -1, 0, -1, 0),
    dImmMacro128 (15, -1, -1, -1, -1),
    dImmMacro128 (16, 0, 0, 0, 0),
    dImmMacro128 (17, 0, -1, 0, -1),
    dImmMacro128 (18, 0, -1, 0, -1),
    dImmMacro128 (19, 0, 0, 0, 0),
    dImmMacro128 (20, -1, -1, -1, -1),
    dImmMacro128 (21, -1, 0, -1, 0),
    dImmMacro128 (22, -1, 0, -1, 0),
    dImmMacro128 (23, -1, -1, -1, -1),
    dImmMacro128 (24, 0, 0, 0, 0),
    dImmMacro128 (25, 0, -1, 0, -1),
    dImmMacro128 (26, 0, -1, 0, -1),
    dImmMacro128 (27, 0, 0, 0, 0),
    dImmMacro128 (28, -1, -1, -1, -1),
    dImmMacro128 (29, -1, 0, -1, 0),
    dImmMacro128 (30, -1, 0, -1, 0),
    dImmMacro128 (31, -1, -1, -1, -1)
}
},

{
{0.0, 1.0, 0.0, 1.0},
{1.0, 0.0, 1.0, 0.0},
{
    dImmMacro128 (0, 0, 0, 0, 0),
    dImmMacro128 (1, -1, 0, -1, 0),
    dImmMacro128 (2, -1, 0, -1, 0),
    dImmMacro128 (3, 0, 0, 0, 0),
    dImmMacro128 (4, -1, -1, -1, -1),
    dImmMacro128 (5, 0, -1, 0, -1),
    dImmMacro128 (6, 0, -1, 0, -1),
    dImmMacro128 (7, -1, -1, -1, -1),
    dImmMacro128 (8, 0, 0, 0, 0),
    dImmMacro128 (9, -1, 0, -1, 0),
    dImmMacro128 (10, -1, 0, -1, 0),
    dImmMacro128 (11, 0, 0, 0, 0),
    dImmMacro128 (12, -1, -1, -1, -1),
    dImmMacro128 (13, 0, -1, 0, -1),
    dImmMacro128 (14, 0, -1, 0, -1),
    dImmMacro128 (15, -1, -1, -1, -1),
    dImmMacro128 (16, 0, 0, 0, 0),
    dImmMacro128 (17, -1, 0, -1, 0),
    dImmMacro128 (18, -1, 0, -1, 0),
    dImmMacro128 (19, 0, 0, 0, 0),
    dImmMacro128 (20, -1, -1, -1, -1),
    dImmMacro128 (21, 0, -1, 0, -1),
    dImmMacro128 (22, 0, -1, 0, -1),
    dImmMacro128 (23, -1, -1, -1, -1),
    dImmMacro128 (24, 0, 0, 0, 0),
    dImmMacro128 (25, -1, 0, -1, 0),
    dImmMacro128 (26, -1, 0, -1, 0),
    dImmMacro128 (27, 0, 0, 0, 0),
    dImmMacro128 (28, -1, -1, -1, -1),
    dImmMacro128 (29, 0, -1, 0, -1),
    dImmMacro128 (30, 0, -1, 0, -1),
    dImmMacro128 (31, -1, -1, -1, -1)
}
},

{
{1.0, 0.0, 1.0, 0.0},
{1.0, 0.0, 1.0, 0.0},
{
    dImmMacro128 (0, -1, -1, -1, -1),
    dImmMacro128 (1, 0, 0, 0, 0),
    dImmMacro128 (2, -1, -1, -1, -1),
    dImmMacro128 (3, 0, 0, 0, 0),
    dImmMacro128 (4, 0, 0, 0, 0),
    dImmMacro128 (5, -1, -1, -1, -1),
    dImmMacro128 (6, 0, 0, 0, 0),
    dImmMacro128 (7, -1, -1, -1, -1),
    dImmMacro128 (8, -1, -1, -1, -1),
    dImmMacro128 (9, 0, 0, 0, 0),
    dImmMacro128 (10, -1, -1, -1, -1),
    dImmMacro128 (11, 0, 0, 0, 0),
    dImmMacro128 (12, 0, 0, 0, 0),
    dImmMacro128 (13, -1, -1, -1, -1),
    dImmMacro128 (14, 0, 0, 0, 0),
    dImmMacro128 (15, -1, -1, -1, -1),
    dImmMacro128 (16, -1, -1, -1, -1),
    dImmMacro128 (17, 0, 0, 0, 0),
    dImmMacro128 (18, -1, -1, -1, -1),
    dImmMacro128 (19, 0, 0, 0, 0),
    dImmMacro128 (20, 0, 0, 0, 0),
    dImmMacro128 (21, -1, -1, -1, -1),
    dImmMacro128 (22, 0, 0, 0, 0),
    dImmMacro128 (23, -1, -1, -1, -1),
    dImmMacro128 (24, -1, -1, -1, -1),
    dImmMacro128 (25, 0, 0, 0, 0),
    dImmMacro128 (26, -1, -1, -1, -1),
    dImmMacro128 (27, 0, 0, 0, 0),
    dImmMacro128 (28, 0, 0, 0, 0),
    dImmMacro128 (29, -1, -1, -1, -1),
    dImmMacro128 (30, 0, 0, 0, 0),
    dImmMacro128 (31, -1, -1, -1, -1),
}
},

{
{0.0, 1.0, 0.0, 1.0},
{0.0, 1.0, 0.0, 1.0},
{
    dImmMacro128 (0, -1, -1, -1, -1),
    dImmMacro128 (1, 0, 0, 0, 0),
    dImmMacro128 (2, -1, -1, -1, -1),
    dImmMacro128 (3, 0, 0, 0, 0),
    dImmMacro128 (4, 0, 0, 0, 0),
    dImmMacro128 (5, -1, -1, -1, -1),
    dImmMacro128 (6, 0, 0, 0, 0),
    dImmMacro128 (7, -1, -1, -1, -1),
    dImmMacro128 (8, -1, -1, -1, -1),
    dImmMacro128 (9, 0, 0, 0, 0),
    dImmMacro128 (10, -1, -1, -1, -1),
    dImmMacro128 (11, 0, 0, 0, 0),
    dImmMacro128 (12, 0, 0, 0, 0),
    dImmMacro128 (13, -1, -1, -1, -1),
    dImmMacro128 (14, 0, 0, 0, 0),
    dImmMacro128 (15, -1, -1, -1, -1),
    dImmMacro128 (16, -1, -1, -1, -1),
    dImmMacro128 (17, 0, 0, 0, 0),
    dImmMacro128 (18, -1, -1, -1, -1),
    dImmMacro128 (19, 0, 0, 0, 0),
    dImmMacro128 (20, 0, 0, 0, 0),
    dImmMacro128 (21, -1, -1, -1, -1),
    dImmMacro128 (22, 0, 0, 0, 0),
    dImmMacro128 (23, -1, -1, -1, -1),
    dImmMacro128 (24, -1, -1, -1, -1),
    dImmMacro128 (25, 0, 0, 0, 0),
    dImmMacro128 (26, -1, -1, -1, -1),
    dImmMacro128 (27, 0, 0, 0, 0),
    dImmMacro128 (28, 0, 0, 0, 0),
    dImmMacro128 (29, -1, -1, -1, -1),
    dImmMacro128 (30, 0, 0, 0, 0),
    dImmMacro128 (31, -1, -1, -1, -1)
}
},

{
{1.0, 1.0, 1.0, 1.0},
{0.0, 1.0, 0.0, 1.0},
{
    dImmMacro128 (0, 0, -1, 0, -1),
    dImmMacro128 (1, 0, 0, 0, 0),
    dImmMacro128 (2, 0, -1, 0, -1),
    dImmMacro128 (3, 0, 0, 0, 0),
    dImmMacro128 (4, -1, 0, -1, 0),
    dImmMacro128 (5, -1, -1, -1, -1),
    dImmMacro128 (6, -1, 0, -1, 0),
    dImmMacro128 (7, -1, -1, -1, -1),
    dImmMacro128 (8, 0, -1, 0, -1),
    dImmMacro128 (9, 0, 0, 0, 0),
    dImmMacro128 (10, 0, -1, 0, -1),
    dImmMacro128 (11, 0, 0, 0, 0),
    dImmMacro128 (12, -1, 0, -1, 0),
    dImmMacro128 (13, -1, -1, -1, -1),
    dImmMacro128 (14, -1, 0, -1, 0),
    dImmMacro128 (15, -1, -1, -1, -1),
    dImmMacro128 (16, 0, -1, 0, -1),
    dImmMacro128 (17, 0, 0, 0, 0),
    dImmMacro128 (18, 0, -1, 0, -1),
    dImmMacro128 (19, 0, 0, 0, 0),
    dImmMacro128 (20, -1, 0, -1, 0),
    dImmMacro128 (21, -1, -1, -1, -1),
    dImmMacro128 (22, -1, 0, -1, 0),
    dImmMacro128 (23, -1, -1, -1, -1),
    dImmMacro128 (24, 0, -1, 0, -1),
    dImmMacro128 (25, 0, 0, 0, 0),
    dImmMacro128 (26, 0, -1, 0, -1),
    dImmMacro128 (27, 0, 0, 0, 0),
    dImmMacro128 (28, -1, 0, -1, 0),
    dImmMacro128 (29, -1, -1, -1, -1),
    dImmMacro128 (30, -1, 0, -1, 0),
    dImmMacro128 (31, -1, -1, -1, -1),
}
},

{
{1.0, -1.0, 1.0, -1.0},
{0.0, 1.0, 0.0, 1.0},
{
    dImmMacro128 (0, 0, 0, 0, 0),
    dImmMacro128 (1, 0, -1, 0, -1),
    dImmMacro128 (2, 0, -1, 0, -1),
    dImmMacro128 (3, 0, 0, 0, 0),
    dImmMacro128 (4, -1, -1, -1, -1),
    dImmMacro128 (5, -1, 0, -1, 0),
    dImmMacro128 (6, -1, 0, -1, 0),
    dImmMacro128 (7, -1, -1, -1, -1),
    dImmMacro128 (8, 0, 0, 0, 0),
    dImmMacro128 (9, 0, -1, 0, -1),
    dImmMacro128 (10, 0, -1, 0, -1),
    dImmMacro128 (11, 0, 0, 0, 0),
    dImmMacro128 (12, -1, -1, -1, -1),
    dImmMacro128 (13, -1, 0, -1, 0),
    dImmMacro128 (14, -1, 0, -1, 0),
    dImmMacro128 (15, -1, -1, -1, -1),
    dImmMacro128 (16, 0, 0, 0, 0),
    dImmMacro128 (17, 0, -1, 0, -1),
    dImmMacro128 (18, 0, -1, 0, -1),
    dImmMacro128 (19, 0, 0, 0, 0),
    dImmMacro128 (20, -1, -1, -1, -1),
    dImmMacro128 (21, -1, 0, -1, 0),
    dImmMacro128 (22, -1, 0, -1, 0),
    dImmMacro128 (23, -1, -1, -1, -1),
    dImmMacro128 (24, 0, 0, 0, 0),
    dImmMacro128 (25, 0, -1, 0, -1),
    dImmMacro128 (26, 0, -1, 0, -1),
    dImmMacro128 (27, 0, 0, 0, 0),
    dImmMacro128 (28, -1, -1, -1, -1),
    dImmMacro128 (29, -1, 0, -1, 0),
    dImmMacro128 (30, -1, 0, -1, 0),
    dImmMacro128 (31, -1, -1, -1, -1)
}
},

{
{1.0, -1.0, 1.0, -1.0},
{0.0, -1.0, 0.0, -1.0},
{
    dImmMacro128 (0, 0, -1, 0, -1),
    dImmMacro128 (1, 0, 0, 0, 0),
    dImmMacro128 (2, 0, -1, 0, -1),
    dImmMacro128 (3, 0, 0, 0, 0),
    dImmMacro128 (4, -1, 0, -1, 0),
    dImmMacro128 (5, -1, -1, -1, -1),
    dImmMacro128 (6, -1, 0, -1, 0),
    dImmMacro128 (7, -1, -1, -1, -1),
    dImmMacro128 (8, 0, -1, 0, -1),
    dImmMacro128 (9, 0, 0, 0, 0),
    dImmMacro128 (10, 0, -1, 0, -1),
    dImmMacro128 (11, 0, 0, 0, 0),
    dImmMacro128 (12, -1, 0, -1, 0),
    dImmMacro128 (13, -1, -1, -1, -1),
    dImmMacro128 (14, -1, 0, -1, 0),
    dImmMacro128 (15, -1, -1, -1, -1),
    dImmMacro128 (16, 0, -1, 0, -1),
    dImmMacro128 (17, 0, 0, 0, 0),
    dImmMacro128 (18, 0, -1, 0, -1),
    dImmMacro128 (19, 0, 0, 0, 0),
    dImmMacro128 (20, -1, 0, -1, 0),
    dImmMacro128 (21, -1, -1, -1, -1),
    dImmMacro128 (22, -1, 0, -1, 0),
    dImmMacro128 (23, -1, -1, -1, -1),
    dImmMacro128 (24, 0, -1, 0, -1),
    dImmMacro128 (25, 0, 0, 0, 0),
    dImmMacro128 (26, 0, -1, 0, -1),
    dImmMacro128 (27, 0, 0, 0, 0),
    dImmMacro128 (28, -1, 0, -1, 0),
    dImmMacro128 (29, -1, -1, -1, -1),
    dImmMacro128 (30, -1, 0, -1, 0),
    dImmMacro128 (31, -1, -1, -1, -1),
}
}
};

#define dImmMacro256(Imm, ...) {{dImmMacro(__VA_ARGS__, __VA_ARGS__)}}
static const struct
{
    float   a[8];
    float   b[8];

    const struct
    {
        uint32_t e[8];
    } expect[32];
}
g_test_mm256_cmp_ps_data[] =
{
{
{0.0/0.0, 0.0/0.0, 0.0/0.0, 0.0/0.0, 0.0/0.0, 0.0/0.0, 0.0/0.0, 0.0/0.0},
{1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1},

{
    dImmMacro256 (0, 0, 0, 0, 0),
    dImmMacro256 (1, 0, 0, 0, 0),
    dImmMacro256 (2, 0, 0, 0, 0),
    dImmMacro256 (3, -1, -1, -1, -1),
    dImmMacro256 (4, -1, -1, -1, -1),
    dImmMacro256 (5, -1, -1, -1, -1),
    dImmMacro256 (6, -1, -1, -1, -1),
    dImmMacro256 (7, 0, 0, 0, 0),
    dImmMacro256 (8, -1, -1, -1, -1),
    dImmMacro256 (9, -1, -1, -1, -1),
    dImmMacro256 (10, -1, -1, -1, -1),
    dImmMacro256 (11, 0, 0, 0, 0),
    dImmMacro256 (12, 0, 0, 0, 0),
    dImmMacro256 (13, 0, 0, 0, 0),
    dImmMacro256 (14, 0, 0, 0, 0),
    dImmMacro256 (15, -1, -1, -1, -1),
    dImmMacro256 (16, 0, 0, 0, 0),
    dImmMacro256 (17, 0, 0, 0, 0),
    dImmMacro256 (18, 0, 0, 0, 0),
    dImmMacro256 (19, -1, -1, -1, -1),
    dImmMacro256 (20, -1, -1, -1, -1),
    dImmMacro256 (21, -1, -1, -1, -1),
    dImmMacro256 (22, -1, -1, -1, -1),
    dImmMacro256 (23, 0, 0, 0, 0),
    dImmMacro256 (24, -1, -1, -1, -1),
    dImmMacro256 (25, -1, -1, -1, -1),
    dImmMacro256 (26, -1, -1, -1, -1),
    dImmMacro256 (27, 0, 0, 0, 0),
    dImmMacro256 (28, 0, 0, 0, 0),
    dImmMacro256 (29, 0, 0, 0, 0),
    dImmMacro256 (30, 0, 0, 0, 0),
    dImmMacro256 (31, -1, -1, -1, -1)
}
},

{
{1.0, -1.0, 1.0, -1.0, 1.0, -1.0, 1.0, -1.0},
{0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0},
{
    dImmMacro256 (0, 0, 0, 0, 0),
    dImmMacro256 (1, 0, -1, 0, -1),
    dImmMacro256 (2, 0, -1, 0, -1),
    dImmMacro256 (3, 0, 0, 0, 0),
    dImmMacro256 (4, -1, -1, -1, -1),
    dImmMacro256 (5, -1, 0, -1, 0),
    dImmMacro256 (6, -1, 0, -1, 0),
    dImmMacro256 (7, -1, -1, -1, -1),
    dImmMacro256 (8, 0, 0, 0, 0),
    dImmMacro256 (9, 0, -1, 0, -1),
    dImmMacro256 (10, 0, -1, 0, -1),
    dImmMacro256 (11, 0, 0, 0, 0),
    dImmMacro256 (12, -1, -1, -1, -1),
    dImmMacro256 (13, -1, 0, -1, 0),
    dImmMacro256 (14, -1, 0, -1, 0),
    dImmMacro256 (15, -1, -1, -1, -1),
    dImmMacro256 (16, 0, 0, 0, 0),
    dImmMacro256 (17, 0, -1, 0, -1),
    dImmMacro256 (18, 0, -1, 0, -1),
    dImmMacro256 (19, 0, 0, 0, 0),
    dImmMacro256 (20, -1, -1, -1, -1),
    dImmMacro256 (21, -1, 0, -1, 0),
    dImmMacro256 (22, -1, 0, -1, 0),
    dImmMacro256 (23, -1, -1, -1, -1),
    dImmMacro256 (24, 0, 0, 0, 0),
    dImmMacro256 (25, 0, -1, 0, -1),
    dImmMacro256 (26, 0, -1, 0, -1),
    dImmMacro256 (27, 0, 0, 0, 0),
    dImmMacro256 (28, -1, -1, -1, -1),
    dImmMacro256 (29, -1, 0, -1, 0),
    dImmMacro256 (30, -1, 0, -1, 0),
    dImmMacro256 (31, -1, -1, -1, -1)
}
}
};

static const struct
{
    float   a[4];
    float   b[4];

    uint8_t expect[32];
}
g_test_mm_cmp_ps_mask_data[] =
{
{
{0.0/0.0, 0.0/0.0, 0.0/0.0, 0.0/0.0},
{1.1, 1.1, 1.1, 1.1},

{
    0x0,
    0x0,
    0x0,
    0x0f,
    0x0f,
    0x0f,
    0x0f,
    0x0,
    0x0f,
    0x0f,
    0x0f,
    0x0,
    0x0,
    0x0,
    0x0,
    0x0f,
    0x0,
    0x0,
    0x0,
    0x0f,
    0x0f,
    0x0f,
    0x0f,
    0x0,
    0x0f,
    0x0f,
    0x0f,
    0x0,
    0x0,
    0x0,
    0x0,
    0x0f
}
},

{
{1.0, -1.0, 1.0, -1.0},
{0.0, 1.0, 0.0, 1.0},

{
    0x0,
    0x0a,
    0x0a,
    0x0,
    0x0f,
    0x05,
    0x05,
    0x0f,
    0x0,
    0x0a,
    0x0a,
    0x0,
    0x0f,
    0x05,
    0x05,
    0x0f,
    0x0,
    0x0a,
    0x0a,
    0x0,
    0x0f,
    0x05,
    0x05,
    0x0f,
    0x0,
    0x0a,
    0x0a,
    0x0,
    0x0f,
    0x05,
    0x05,
    0x0f
}
}
};

static const struct
{
    float   a[4];
    float   b[4];
    uint8_t  m;

    uint8_t expect[32];
}
g_test_mm_mask_cmp_ps_mask_data[] =
{
{
{0.0/0.0, 0.0/0.0, 0.0/0.0, 0.0/0.0},
{1.1, 1.1, 1.1, 1.1},
0x03,
{
    0x0,
    0x0,
    0x0,
    0x03,
    0x03,
    0x03,
    0x03,
    0x0,
    0x03,
    0x03,
    0x03,
    0x0,
    0x0,
    0x0,
    0x0,
    0x03,
    0x0,
    0x0,
    0x0,
    0x03,
    0x03,
    0x03,
    0x03,
    0x0,
    0x03,
    0x03,
    0x03,
    0x0,
    0x0,
    0x0,
    0x0,
    0x03
}
},

{
{1.0, -1.0, 1.0, -1.0},
{0.0, 1.0, 0.0, 1.0},
0x02,
{
    0x0,
    0x02,
    0x02,
    0x0,
    0x02,
    0x00,
    0x00,
    0x02,
    0x0,
    0x02,
    0x02,
    0x0,
    0x02,
    0x00,
    0x00,
    0x02,
    0x0,
    0x02,
    0x02,
    0x0,
    0x02,
    0x00,
    0x00,
    0x02,
    0x0,
    0x02,
    0x02,
    0x0,
    0x02,
    0x00,
    0x00,
    0x02
}
}
};

static const struct
{
    float   a[8];
    float   b[8];

    uint8_t expect[32];
}
g_test_mm256_cmp_ps_mask_data[] =
{
{
{0.0/0.0, 0.0/0.0, 0.0/0.0, 0.0/0.0,0.0/0.0, 0.0/0.0, 0.0/0.0, 0.0/0.0},
{1.1, 1.1, 1.1, 1.1,1.1, 1.1, 1.1, 1.1},

{
    0x0,
    0x0,
    0x0,
    0xff,
    0xff,
    0xff,
    0xff,
    0x0,
    0xff,
    0xff,
    0xff,
    0x0,
    0x0,
    0x0,
    0x0,
    0xff,
    0x0,
    0x0,
    0x0,
    0xff,
    0xff,
    0xff,
    0xff,
    0x0,
    0xff,
    0xff,
    0xff,
    0x0,
    0x0,
    0x0,
    0x0,
    0xff
}
},

{
{1.0, -1.0, 1.0, -1.0, 1.0, -1.0, 1.0, -1.0},
{0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0},
{
    0x0,
    0xaa,
    0xaa,
    0x0,
    0xff,
    0x55,
    0x55,
    0xff,
    0x0,
    0xaa,
    0xaa,
    0x0,
    0xff,
    0x55,
    0x55,
    0xff,
    0x0,
    0xaa,
    0xaa,
    0x0,
    0xff,
    0x55,
    0x55,
    0xff,
    0x0,
    0xaa,
    0xaa,
    0x0,
    0xff,
    0x55,
    0x55,
    0xff
}
}
};

static const struct
{
    float   a[8];
    float   b[8];
    uint8_t  m;
    uint8_t expect[32];
}
g_test_mm256_mask_cmp_ps_mask_data[] =
{
{
{0.0/0.0, 0.0/0.0, 0.0/0.0, 0.0/0.0, 0.0/0.0, 0.0/0.0, 0.0/0.0, 0.0/0.0},
{1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1},
0x0f,
{
    0x0,
    0x0,
    0x0,
    0x0f,
    0x0f,
    0x0f,
    0x0f,
    0x0,
    0x0f,
    0x0f,
    0x0f,
    0x0,
    0x0,
    0x0,
    0x0,
    0x0f,
    0x0,
    0x0,
    0x0,
    0x0f,
    0x0f,
    0x0f,
    0x0f,
    0x0,
    0x0f,
    0x0f,
    0x0f,
    0x0,
    0x0,
    0x0,
    0x0,
    0x0f
}
},

{
{1.0, -1.0, 1.0, -1.0, 1.0, -1.0, 1.0, -1.0},
{0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0},
0x0f,
{
    0x0,
    0x0a,
    0x0a,
    0x0,
    0x0f,
    0x05,
    0x05,
    0x0f,
    0x0,
    0x0a,
    0x0a,
    0x0,
    0x0f,
    0x05,
    0x05,
    0x0f,
    0x0,
    0x0a,
    0x0a,
    0x0,
    0x0f,
    0x05,
    0x05,
    0x0f,
    0x0,
    0x0a,
    0x0a,
    0x0,
    0x0f,
    0x05,
    0x05,
    0x0f
}
}
};

static const struct
{
    float   a[16];
    float   b[16];

    uint16_t expect[32];
}
g_test_mm512_cmp_ps_mask_data[] =
{
{
{0.0/0.0, 0.0/0.0, 0.0/0.0, 0.0/0.0,
    0.0/0.0, 0.0/0.0, 0.0/0.0, 0.0/0.0,
    0.0/0.0, 0.0/0.0, 0.0/0.0, 0.0/0.0,
    0.0/0.0, 0.0/0.0, 0.0/0.0, 0.0/0.0},
{1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1,
    1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1},

{
    0x0,
    0x0,
    0x0,
    0xffff,
    0xffff,
    0xffff,
    0xffff,
    0x0,
    0xffff,
    0xffff,
    0xffff,
    0x0,
    0x0,
    0x0,
    0x0,
    0xffff,
    0x0,
    0x0,
    0x0,
    0xffff,
    0xffff,
    0xffff,
    0xffff,
    0x0,
    0xffff,
    0xffff,
    0xffff,
    0x0,
    0x0,
    0x0,
    0x0,
    0xffff
}
},

{
{1.0, -1.0, 1.0, -1.0, 1.0, -1.0, 1.0, -1.0,
    1.0, -1.0, 1.0, -1.0, 1.0, -1.0, 1.0, -1.0},
{0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0,
    0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0},
{
    0x0000,
    0xaaaa,
    0xaaaa,
    0x0,
    0xffff,
    0x5555,
    0x5555,
    0xffff,
    0x0000,
    0xaaaa,
    0xaaaa,
    0x0,
    0xffff,
    0x5555,
    0x5555,
    0xffff,

    0x0000,
    0xaaaa,
    0xaaaa,
    0x0,
    0xffff,
    0x5555,
    0x5555,
    0xffff,
    0x0000,
    0xaaaa,
    0xaaaa,
    0x0,
    0xffff,
    0x5555,
    0x5555,
    0xffff
}
}
};

static const struct
{
    float    a[16];
    float    b[16];
    uint16_t  m;

    uint16_t expect[32];
}
g_test_mm512_mask_cmp_ps_mask_data[] =
{
{
{0.0/0.0, 0.0/0.0, 0.0/0.0, 0.0/0.0,
    0.0/0.0, 0.0/0.0, 0.0/0.0, 0.0/0.0,
    0.0/0.0, 0.0/0.0, 0.0/0.0, 0.0/0.0,
    0.0/0.0, 0.0/0.0, 0.0/0.0, 0.0/0.0},
{1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1,
    1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1},
0xff,
{
    0x0,
    0x0,
    0x0,
    0xff,
    0xff,
    0xff,
    0xff,
    0x0,
    0xff,
    0xff,
    0xff,
    0x0,
    0x0,
    0x0,
    0x0,
    0xff,
    0x0,
    0x0,
    0x0,
    0xff,
    0xff,
    0xff,
    0xff,
    0x0,
    0xff,
    0xff,
    0xff,
    0x0,
    0x0,
    0x0,
    0x0,
    0xff
}
},

{
{1.0, -1.0, 1.0, -1.0, 1.0, -1.0, 1.0, -1.0, 1.0, -1.0, 1.0, -1.0, 1.0, -1.0, 1.0, -1.0},
{0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0},
0xff,
{
    0x00,
    0xaa,
    0xaa,
    0x0,
    0xff,
    0x55,
    0x55,
    0xff,
    0x00,
    0xaa,
    0xaa,
    0x0,
    0xff,
    0x55,
    0x55,
    0xff,
    0x00,
    0xaa,
    0xaa,
    0x0,
    0xff,
    0x55,
    0x55,
    0xff,
    0x00,
    0xaa,
    0xaa,
    0x0,
    0xff,
    0x55,
    0x55,
    0xff
}
}
};


static const struct
{
    double   a[2];
    double   b[2];
    const struct
    {
        int imm;
        uint64_t e;
        double   d;
    } expect[32];
}
g_test_mm_cmp_sd_data[] =
{

{
{NaNq64, NaNq64},
{1.1, 1.1},

{
{0, False64, NaNq64},
{1, False64, NaNq64},
{2, False64, NaNq64},
{3, True64, NaNq64},
{4, True64, NaNq64},
{5, True64, NaNq64},
{6, True64, NaNq64},
{7, False64, NaNq64},
{8, True64, NaNq64},
{9, True64, NaNq64},
{10, True64, NaNq64},
{11, False64, NaNq64},
{12, False64, NaNq64},
{13, False64, NaNq64},
{14, False64, NaNq64},
{15, True64, NaNq64},
{16, False64, NaNq64},
{17, False64, NaNq64},
{18, False64, NaNq64},
{19, True64, NaNq64},
{20, True64, NaNq64},
{21, True64, NaNq64},
{22, True64, NaNq64},
{23, False64, NaNq64},
{24, True64, NaNq64},
{25, True64, NaNq64},
{26, True64, NaNq64},
{27, False64, NaNq64},
{28, False64, NaNq64},
{29, False64, NaNq64},
{30, False64, NaNq64},
{31, True64, NaNq64}
}
},

{
{1.0, 1.1},
{1.0, 1.1},

{
{0, True64, 1.1},
{1, False64, 1.1},
{2, True64, 1.1},
{3, False64, 1.1},
{4, False64, 1.1},
{5, True64, 1.1},
{6, False64, 1.1},
{7, True64, 1.1},
{8, True64, 1.1},
{9, False64, 1.1},
{10, True64, 1.1},
{11, False64, 1.1},
{12, False64, 1.1},
{13, True64, 1.1},
{14, False64, 1.1},
{15, True64, 1.1},
{16, True64, 1.1},
{17, False64, 1.1},
{18, True64, 1.1},
{19, False64, 1.1},
{20, False64, 1.1},
{21, True64, 1.1},
{22, False64, 1.1},
{23, True64, 1.1},
{24, True64, 1.1},
{25, False64, 1.1},
{26, True64, 1.1},
{27, False64, 1.1},
{28, False64, 1.1},
{29, True64, 1.1},
{30, False64, 1.1},
{31, True64, 1.1}
}
},

{
{NaNq64, NaNq64},
{NaNq64, NaNq64},
{
{0, False64, NaNq64},
{1, False64, NaNq64},
{2, False64, NaNq64},
{3, True64, NaNq64},
{4, True64, NaNq64},
{5, True64, NaNq64},
{6, True64, NaNq64},
{7, False64, NaNq64},
{8, True64, NaNq64},
{9, True64, NaNq64},
{10, True64, NaNq64},
{11, False64, NaNq64},
{12, False64, NaNq64},
{13, False64, NaNq64},
{14, False64, NaNq64},
{15, True64, NaNq64},
{16, False64, NaNq64},
{17, False64, NaNq64},
{18, False64, NaNq64},
{19, True64, NaNq64},
{20, True64, NaNq64},
{21, True64, NaNq64},
{22, True64, NaNq64},
{23, False64, NaNq64},
{24, True64, NaNq64},
{25, True64, NaNq64},
{26, True64, NaNq64},
{27, False64, NaNq64},
{28, False64, NaNq64},
{29, False64, NaNq64},
{30, False64, NaNq64},
{31, True64, NaNq64}
}
},

{
{0.0, 0.0},
{1.0, 1.0},
{
{0, False64, 0.0},
{1, True64, 0.0},
{2, True64, 0.0},
{3, False64, 0.0},
{4, True64, 0.0},
{5, False64, 0.0},
{6, False64, 0.0},
{7, True64, 0.0},
{8, False64, 0.0},
{9, True64, 0.0},
{10, True64, 0.0},
{11, False64, 0.0},
{12, True64, 0.0},
{13, False64, 0.0},
{14, False64, 0.0},
{15, True64, 0.0},
{16, False64, 0.0},
{17, True64, 0.0},
{18, True64, 0.0},
{19, False64, 0.0},
{20, True64, 0.0},
{21, False64, 0.0},
{22, False64, 0.0},
{23, True64, 0.0},
{24, False64, 0.0},
{25, True64, 0.0},
{26, True64, 0.0},
{27, False64, 0.0},
{28, True64, 0.0},
{29, False64, 0.0},
{30, False64, 0.0},
{31, True64, 0.0}
}
},

{
{1.0, 1.0},
{0.0, 0.0},
{
{0, False64, 1.0},
{1, False64, 1.0},
{2, False64, 1.0},
{3, False64, 1.0},
{4, True64, 1.0},
{5, True64, 1.0},
{6, True64, 1.0},
{7, True64, 1.0},
{8, False64, 1.0},
{9, False64, 1.0},
{10, False64, 1.0},
{11, False64, 1.0},
{12, True64, 1.0},
{13, True64, 1.0},
{14, True64, 1.0},
{15, True64, 1.0},
{16, False64, 1.0},
{17, False64, 1.0},
{18, False64, 1.0},
{19, False64, 1.0},
{20, True64, 1.0},
{21, True64, 1.0},
{22, True64, 1.0},
{23, True64, 1.0},
{24, False64, 1.0},
{25, False64, 1.0},
{26, False64, 1.0},
{27, False64, 1.0},
{28, True64, 1.0},
{29, True64, 1.0},
{30, True64, 1.0},
{31, True64, 1.0}
}
}
};

static const struct
{
    double   a[2];
    double   b[2];

    uint8_t expect[32];
}
g_test_mm_cmp_sd_mask_data[] =
{
{
{NaNq64, NaNq64},
{1.1, 1.1},

{
    0x0,
    0x0,
    0x0,
    0x01,
    0x01,
    0x01,
    0x01,
    0x0,
    0x01,
    0x01,
    0x01,
    0x0,
    0x0,
    0x0,
    0x0,
    0x01,
    0x0,
    0x0,
    0x0,
    0x01,
    0x01,
    0x01,
    0x01,
    0x0,
    0x01,
    0x01,
    0x01,
    0x0,
    0x0,
    0x0,
    0x0,
    0x01
}
},

{
{1.0, -1.0},
{0.0, 1.0},

{
    0x0,
    0x00,
    0x00,
    0x0,
    0x01,
    0x01,
    0x01,
    0x01,
    0x0,
    0x00,
    0x00,
    0x0,
    0x01,
    0x01,
    0x01,
    0x01,
    0x0,
    0x00,
    0x00,
    0x0,
    0x01,
    0x01,
    0x01,
    0x01,
    0x0,
    0x00,
    0x00,
    0x0,
    0x01,
    0x01,
    0x01,
    0x01
}
}
};

static const struct
{
    double   a[2];
    double   b[2];
    uint8_t  m;
    uint8_t expect[32];
}
g_test_mm_mask_cmp_sd_mask_data[] =
{
{
{NaNq64, NaNq64},
{1.1, 1.1},
0x01,
{
    0x0,
    0x0,
    0x0,
    0x01,
    0x01,
    0x01,
    0x01,
    0x0,
    0x01,
    0x01,
    0x01,
    0x0,
    0x0,
    0x0,
    0x0,
    0x01,
    0x0,
    0x0,
    0x0,
    0x01,
    0x01,
    0x01,
    0x01,
    0x0,
    0x01,
    0x01,
    0x01,
    0x0,
    0x0,
    0x0,
    0x0,
    0x01
}
},

{
{1.0, -1.0},
{0.0, 1.0},
0x0,
{
    0x0,
    0x00,
    0x00,
    0x0,
    0x00,
    0x00,
    0x00,
    0x00,
    0x0,
    0x00,
    0x00,
    0x0,
    0x00,
    0x00,
    0x00,
    0x00,
    0x0,
    0x00,
    0x00,
    0x0,
    0x00,
    0x00,
    0x00,
    0x00,
    0x0,
    0x00,
    0x00,
    0x0,
    0x00,
    0x00,
    0x00,
    0x00
}
}
};

static const struct
{
    float   a[4];
    float   b[4];
    const struct
    {
        uint32_t e;
        float    d[3];
    } expect[32];
}
g_test_mm_cmp_ss_data[] =
{

{
{NaNq32, NaNq32, NaNq32, NaNq32},
{1.1, 1.1, 1.1, 1.1},

#undef dImmMacro128
#define dImmMacro128(Imm, A, B, C, D) {A, {NaNq32, NaNq32, NaNq32}}
{
    dImmMacro128 (0, 0, 0, 0, 0),
    dImmMacro128 (1, 0, 0, 0, 0),
    dImmMacro128 (2, 0, 0, 0, 0),
    dImmMacro128 (3, -1, -1, -1, -1),
    dImmMacro128 (4, -1, -1, -1, -1),
    dImmMacro128 (5, -1, -1, -1, -1),
    dImmMacro128 (6, -1, -1, -1, -1),
    dImmMacro128 (7, 0, 0, 0, 0),
    dImmMacro128 (8, -1, -1, -1, -1),
    dImmMacro128 (9, -1, -1, -1, -1),
    dImmMacro128 (10, -1, -1, -1, -1),
    dImmMacro128 (11, 0, 0, 0, 0),
    dImmMacro128 (12, 0, 0, 0, 0),
    dImmMacro128 (13, 0, 0, 0, 0),
    dImmMacro128 (14, 0, 0, 0, 0),
    dImmMacro128 (15, -1, -1, -1, -1),
    dImmMacro128 (16, 0, 0, 0, 0),
    dImmMacro128 (17, 0, 0, 0, 0),
    dImmMacro128 (18, 0, 0, 0, 0),
    dImmMacro128 (19, -1, -1, -1, -1),
    dImmMacro128 (20, -1, -1, -1, -1),
    dImmMacro128 (21, -1, -1, -1, -1),
    dImmMacro128 (22, -1, -1, -1, -1),
    dImmMacro128 (23, 0, 0, 0, 0),
    dImmMacro128 (24, -1, -1, -1, -1),
    dImmMacro128 (25, -1, -1, -1, -1),
    dImmMacro128 (26, -1, -1, -1, -1),
    dImmMacro128 (27, 0, 0, 0, 0),
    dImmMacro128 (28, 0, 0, 0, 0),
    dImmMacro128 (29, 0, 0, 0, 0),
    dImmMacro128 (30, 0, 0, 0, 0),
    dImmMacro128 (31, -1, -1, -1, -1)
}
},

{
{1.0, 1.1, 1.0, 1.1},
{1.0, 1.1, 1.0, 1.1},

#undef dImmMacro128
#define dImmMacro128(Imm, A, B, C, D) {A, {1.1, 1.0, 1.1}}
{
    dImmMacro128 (0, -1, -1, -1, -1),
    dImmMacro128 (1, 0, 0, 0, 0),
    dImmMacro128 (2, -1, -1, -1, -1),
    dImmMacro128 (3, 0, 0, 0, 0),
    dImmMacro128 (4, 0, 0, 0, 0),
    dImmMacro128 (5, -1, -1, -1, -1),
    dImmMacro128 (6, 0, 0, 0, 0),
    dImmMacro128 (7, -1, -1, -1, -1),
    dImmMacro128 (8, -1, -1, -1, -1),
    dImmMacro128 (9, 0, 0, 0, 0),
    dImmMacro128 (10, -1, -1, -1, -1),
    dImmMacro128 (11, 0, 0, 0, 0),
    dImmMacro128 (12, 0, 0, 0, 0),
    dImmMacro128 (13, -1, -1, -1, -1),
    dImmMacro128 (14, 0, 0, 0, 0),
    dImmMacro128 (15, -1, -1, -1, -1),
    dImmMacro128 (16, -1, -1, -1, -1),
    dImmMacro128 (17, 0, 0, 0, 0),
    dImmMacro128 (18, -1, -1, -1, -1),
    dImmMacro128 (19, 0, 0, 0, 0),
    dImmMacro128 (20, 0, 0, 0, 0),
    dImmMacro128 (21, -1, -1, -1, -1),
    dImmMacro128 (22, 0, 0, 0, 0),
    dImmMacro128 (23, -1, -1, -1, -1),
    dImmMacro128 (24, -1, -1, -1, -1),
    dImmMacro128 (25, 0, 0, 0, 0),
    dImmMacro128 (26, -1, -1, -1, -1),
    dImmMacro128 (27, 0, 0, 0, 0),
    dImmMacro128 (28, 0, 0, 0, 0),
    dImmMacro128 (29, -1, -1, -1, -1),
    dImmMacro128 (30, 0, 0, 0, 0),
    dImmMacro128 (31, -1, -1, -1, -1)
}
},

{
{NaNq32, NaNq32, NaNq32, NaNq32},
{NaNq32, NaNq32, NaNq32, NaNq32},

#undef dImmMacro128
#define dImmMacro128(Imm, A, B, C, D) {A, {NaNq32, NaNq32, NaNq32}}
{
    dImmMacro128 (0, 0, 0, 0, 0),
    dImmMacro128 (1, 0, 0, 0, 0),
    dImmMacro128 (2, 0, 0, 0, 0),
    dImmMacro128 (3, -1, -1, -1, -1),
    dImmMacro128 (4, -1, -1, -1, -1),
    dImmMacro128 (5, -1, -1, -1, -1),
    dImmMacro128 (6, -1, -1, -1, -1),
    dImmMacro128 (7, 0, 0, 0, 0),
    dImmMacro128 (8, -1, -1, -1, -1),
    dImmMacro128 (9, -1, -1, -1, -1),
    dImmMacro128 (10, -1, -1, -1, -1),
    dImmMacro128 (11, 0, 0, 0, 0),
    dImmMacro128 (12, 0, 0, 0, 0),
    dImmMacro128 (13, 0, 0, 0, 0),
    dImmMacro128 (14, 0, 0, 0, 0),
    dImmMacro128 (15, -1, -1, -1, -1),
    dImmMacro128 (16, 0, 0, 0, 0),
    dImmMacro128 (17, 0, 0, 0, 0),
    dImmMacro128 (18, 0, 0, 0, 0),
    dImmMacro128 (19, -1, -1, -1, -1),
    dImmMacro128 (20, -1, -1, -1, -1),
    dImmMacro128 (21, -1, -1, -1, -1),
    dImmMacro128 (22, -1, -1, -1, -1),
    dImmMacro128 (23, 0, 0, 0, 0),
    dImmMacro128 (24, -1, -1, -1, -1),
    dImmMacro128 (25, -1, -1, -1, -1),
    dImmMacro128 (26, -1, -1, -1, -1),
    dImmMacro128 (27, 0, 0, 0, 0),
    dImmMacro128 (28, 0, 0, 0, 0),
    dImmMacro128 (29, 0, 0, 0, 0),
    dImmMacro128 (30, 0, 0, 0, 0),
    dImmMacro128 (31, -1, -1, -1, -1)
}
},

{
{0.0, 0.0, 0.0, 0.0},
{1.0, 1.0, 1.0, 1.0},
#undef dImmMacro128
#define dImmMacro128(Imm, A, B, C, D) {A, {0.0, 0.0, 0.0}}
{
    dImmMacro128 (0, 0, 0, 0, 0),
    dImmMacro128 (1, -1, -1, -1, -1),
    dImmMacro128 (2, -1, -1, -1, -1),
    dImmMacro128 (3, 0, 0, 0, 0),
    dImmMacro128 (4, -1, -1, -1, -1),
    dImmMacro128 (5, 0, 0, 0, 0),
    dImmMacro128 (6, 0, 0, 0, 0),
    dImmMacro128 (7, -1, -1, -1, -1),
    dImmMacro128 (8, 0, 0, 0, 0),
    dImmMacro128 (9, -1, -1, -1, -1),
    dImmMacro128 (10, -1, -1, -1, -1),
    dImmMacro128 (11, 0, 0, 0, 0),
    dImmMacro128 (12, -1, -1, -1, -1),
    dImmMacro128 (13, 0, 0, 0, 0),
    dImmMacro128 (14, 0, 0, 0, 0),
    dImmMacro128 (15, -1, -1, -1, -1),
    dImmMacro128 (16, 0, 0, 0, 0),
    dImmMacro128 (17, -1, -1, -1, -1),
    dImmMacro128 (18, -1, -1, -1, -1),
    dImmMacro128 (19, 0, 0, 0, 0),
    dImmMacro128 (20, -1, -1, -1, -1),
    dImmMacro128 (21, 0, 0, 0, 0),
    dImmMacro128 (22, 0, 0, 0, 0),
    dImmMacro128 (23, -1, -1, -1, -1),
    dImmMacro128 (24, 0, 0, 0, 0),
    dImmMacro128 (25, -1, -1, -1, -1),
    dImmMacro128 (26, -1, -1, -1, -1),
    dImmMacro128 (27, 0, 0, 0, 0),
    dImmMacro128 (28, -1, -1, -1, -1),
    dImmMacro128 (29, 0, 0, 0, 0),
    dImmMacro128 (30, 0, 0, 0, 0),
    dImmMacro128 (31, -1, -1, -1, -1)
}
},

{
{1.0, 1.0, 1.0, 1.0},
{0.0, 0.0, 0.0, 0.0},
#undef dImmMacro128
#define dImmMacro128(Imm, A, B, C, D) {A, {1.0, 1.0, 1.0}}
{
    dImmMacro128 (0, 0, 0, 0, 0),
    dImmMacro128 (1, 0, 0, 0, 0),
    dImmMacro128 (2, 0, 0, 0, 0),
    dImmMacro128 (3, 0, 0, 0, 0),
    dImmMacro128 (4, -1, -1, -1, -1),
    dImmMacro128 (5, -1, -1, -1, -1),
    dImmMacro128 (6, -1, -1, -1, -1),
    dImmMacro128 (7, -1, -1, -1, -1),
    dImmMacro128 (8, 0, 0, 0, 0),
    dImmMacro128 (9, 0, 0, 0, 0),
    dImmMacro128 (10, 0, 0, 0, 0),
    dImmMacro128 (11, 0, 0, 0, 0),
    dImmMacro128 (12, -1, -1, -1, -1),
    dImmMacro128 (13, -1, -1, -1, -1),
    dImmMacro128 (14, -1, -1, -1, -1),
    dImmMacro128 (15, -1, -1, -1, -1),
    dImmMacro128 (16, 0, 0, 0, 0),
    dImmMacro128 (17, 0, 0, 0, 0),
    dImmMacro128 (18, 0, 0, 0, 0),
    dImmMacro128 (19, 0, 0, 0, 0),
    dImmMacro128 (20, -1, -1, -1, -1),
    dImmMacro128 (21, -1, -1, -1, -1),
    dImmMacro128 (22, -1, -1, -1, -1),
    dImmMacro128 (23, -1, -1, -1, -1),
    dImmMacro128 (24, 0, 0, 0, 0),
    dImmMacro128 (25, 0, 0, 0, 0),
    dImmMacro128 (26, 0, 0, 0, 0),
    dImmMacro128 (27, 0, 0, 0, 0),
    dImmMacro128 (28, -1, -1, -1, -1),
    dImmMacro128 (29, -1, -1, -1, -1),
    dImmMacro128 (30, -1, -1, -1, -1),
    dImmMacro128 (31, -1, -1, -1, -1)
}
},

{
{1.0, 0.0, 1.0, 0.0},
{0.0, 1.0, 0.0, 1.0},
#undef dImmMacro128
#define dImmMacro128(Imm, A, B, C, D) {A, {0.0, 1.0, 0.0}}
{
    dImmMacro128 (0, 0, 0, 0, 0),
    dImmMacro128 (1, 0, -1, 0, -1),
    dImmMacro128 (2, 0, -1, 0, -1),
    dImmMacro128 (3, 0, 0, 0, 0),
    dImmMacro128 (4, -1, -1, -1, -1),
    dImmMacro128 (5, -1, 0, -1, 0),
    dImmMacro128 (6, -1, 0, -1, 0),
    dImmMacro128 (7, -1, -1, -1, -1),
    dImmMacro128 (8, 0, 0, 0, 0),
    dImmMacro128 (9, 0, -1, 0, -1),
    dImmMacro128 (10, 0, -1, 0, -1),
    dImmMacro128 (11, 0, 0, 0, 0),
    dImmMacro128 (12, -1, -1, -1, -1),
    dImmMacro128 (13, -1, 0, -1, 0),
    dImmMacro128 (14, -1, 0, -1, 0),
    dImmMacro128 (15, -1, -1, -1, -1),
    dImmMacro128 (16, 0, 0, 0, 0),
    dImmMacro128 (17, 0, -1, 0, -1),
    dImmMacro128 (18, 0, -1, 0, -1),
    dImmMacro128 (19, 0, 0, 0, 0),
    dImmMacro128 (20, -1, -1, -1, -1),
    dImmMacro128 (21, -1, 0, -1, 0),
    dImmMacro128 (22, -1, 0, -1, 0),
    dImmMacro128 (23, -1, -1, -1, -1),
    dImmMacro128 (24, 0, 0, 0, 0),
    dImmMacro128 (25, 0, -1, 0, -1),
    dImmMacro128 (26, 0, -1, 0, -1),
    dImmMacro128 (27, 0, 0, 0, 0),
    dImmMacro128 (28, -1, -1, -1, -1),
    dImmMacro128 (29, -1, 0, -1, 0),
    dImmMacro128 (30, -1, 0, -1, 0),
    dImmMacro128 (31, -1, -1, -1, -1)
}
},

{
{0.0, 1.0, 0.0, 1.0},
{1.0, 0.0, 1.0, 0.0},
#undef dImmMacro128
#define dImmMacro128(Imm, A, B, C, D) {A, {1.0, 0.0, 1.0}}
{
    dImmMacro128 (0, 0, 0, 0, 0),
    dImmMacro128 (1, -1, 0, -1, 0),
    dImmMacro128 (2, -1, 0, -1, 0),
    dImmMacro128 (3, 0, 0, 0, 0),
    dImmMacro128 (4, -1, -1, -1, -1),
    dImmMacro128 (5, 0, -1, 0, -1),
    dImmMacro128 (6, 0, -1, 0, -1),
    dImmMacro128 (7, -1, -1, -1, -1),
    dImmMacro128 (8, 0, 0, 0, 0),
    dImmMacro128 (9, -1, 0, -1, 0),
    dImmMacro128 (10, -1, 0, -1, 0),
    dImmMacro128 (11, 0, 0, 0, 0),
    dImmMacro128 (12, -1, -1, -1, -1),
    dImmMacro128 (13, 0, -1, 0, -1),
    dImmMacro128 (14, 0, -1, 0, -1),
    dImmMacro128 (15, -1, -1, -1, -1),
    dImmMacro128 (16, 0, 0, 0, 0),
    dImmMacro128 (17, -1, 0, -1, 0),
    dImmMacro128 (18, -1, 0, -1, 0),
    dImmMacro128 (19, 0, 0, 0, 0),
    dImmMacro128 (20, -1, -1, -1, -1),
    dImmMacro128 (21, 0, -1, 0, -1),
    dImmMacro128 (22, 0, -1, 0, -1),
    dImmMacro128 (23, -1, -1, -1, -1),
    dImmMacro128 (24, 0, 0, 0, 0),
    dImmMacro128 (25, -1, 0, -1, 0),
    dImmMacro128 (26, -1, 0, -1, 0),
    dImmMacro128 (27, 0, 0, 0, 0),
    dImmMacro128 (28, -1, -1, -1, -1),
    dImmMacro128 (29, 0, -1, 0, -1),
    dImmMacro128 (30, 0, -1, 0, -1),
    dImmMacro128 (31, -1, -1, -1, -1)
}
},

{
{1.0, 0.0, 1.0, 0.0},
{1.0, 0.0, 1.0, 0.0},
#undef dImmMacro128
#define dImmMacro128(Imm, A, B, C, D) {A, {0.0, 1.0, 0.0}}
{
    dImmMacro128 (0, -1, -1, -1, -1),
    dImmMacro128 (1, 0, 0, 0, 0),
    dImmMacro128 (2, -1, -1, -1, -1),
    dImmMacro128 (3, 0, 0, 0, 0),
    dImmMacro128 (4, 0, 0, 0, 0),
    dImmMacro128 (5, -1, -1, -1, -1),
    dImmMacro128 (6, 0, 0, 0, 0),
    dImmMacro128 (7, -1, -1, -1, -1),
    dImmMacro128 (8, -1, -1, -1, -1),
    dImmMacro128 (9, 0, 0, 0, 0),
    dImmMacro128 (10, -1, -1, -1, -1),
    dImmMacro128 (11, 0, 0, 0, 0),
    dImmMacro128 (12, 0, 0, 0, 0),
    dImmMacro128 (13, -1, -1, -1, -1),
    dImmMacro128 (14, 0, 0, 0, 0),
    dImmMacro128 (15, -1, -1, -1, -1),
    dImmMacro128 (16, -1, -1, -1, -1),
    dImmMacro128 (17, 0, 0, 0, 0),
    dImmMacro128 (18, -1, -1, -1, -1),
    dImmMacro128 (19, 0, 0, 0, 0),
    dImmMacro128 (20, 0, 0, 0, 0),
    dImmMacro128 (21, -1, -1, -1, -1),
    dImmMacro128 (22, 0, 0, 0, 0),
    dImmMacro128 (23, -1, -1, -1, -1),
    dImmMacro128 (24, -1, -1, -1, -1),
    dImmMacro128 (25, 0, 0, 0, 0),
    dImmMacro128 (26, -1, -1, -1, -1),
    dImmMacro128 (27, 0, 0, 0, 0),
    dImmMacro128 (28, 0, 0, 0, 0),
    dImmMacro128 (29, -1, -1, -1, -1),
    dImmMacro128 (30, 0, 0, 0, 0),
    dImmMacro128 (31, -1, -1, -1, -1),
}
},

{
{0.0, 1.0, 0.0, 1.0},
{0.0, 1.0, 0.0, 1.0},
#undef dImmMacro128
#define dImmMacro128(Imm, A, B, C, D) {A, {1.0, 0.0, 1.0}}
{
    dImmMacro128 (0, -1, -1, -1, -1),
    dImmMacro128 (1, 0, 0, 0, 0),
    dImmMacro128 (2, -1, -1, -1, -1),
    dImmMacro128 (3, 0, 0, 0, 0),
    dImmMacro128 (4, 0, 0, 0, 0),
    dImmMacro128 (5, -1, -1, -1, -1),
    dImmMacro128 (6, 0, 0, 0, 0),
    dImmMacro128 (7, -1, -1, -1, -1),
    dImmMacro128 (8, -1, -1, -1, -1),
    dImmMacro128 (9, 0, 0, 0, 0),
    dImmMacro128 (10, -1, -1, -1, -1),
    dImmMacro128 (11, 0, 0, 0, 0),
    dImmMacro128 (12, 0, 0, 0, 0),
    dImmMacro128 (13, -1, -1, -1, -1),
    dImmMacro128 (14, 0, 0, 0, 0),
    dImmMacro128 (15, -1, -1, -1, -1),
    dImmMacro128 (16, -1, -1, -1, -1),
    dImmMacro128 (17, 0, 0, 0, 0),
    dImmMacro128 (18, -1, -1, -1, -1),
    dImmMacro128 (19, 0, 0, 0, 0),
    dImmMacro128 (20, 0, 0, 0, 0),
    dImmMacro128 (21, -1, -1, -1, -1),
    dImmMacro128 (22, 0, 0, 0, 0),
    dImmMacro128 (23, -1, -1, -1, -1),
    dImmMacro128 (24, -1, -1, -1, -1),
    dImmMacro128 (25, 0, 0, 0, 0),
    dImmMacro128 (26, -1, -1, -1, -1),
    dImmMacro128 (27, 0, 0, 0, 0),
    dImmMacro128 (28, 0, 0, 0, 0),
    dImmMacro128 (29, -1, -1, -1, -1),
    dImmMacro128 (30, 0, 0, 0, 0),
    dImmMacro128 (31, -1, -1, -1, -1)
}
},

{
{1.0, 1.0, 1.0, 1.0},
{0.0, 1.0, 0.0, 1.0},
#undef dImmMacro128
#define dImmMacro128(Imm, A, B, C, D) {A, {1.0, 1.0, 1.0}}
{
    dImmMacro128 (0, 0, -1, 0, -1),
    dImmMacro128 (1, 0, 0, 0, 0),
    dImmMacro128 (2, 0, -1, 0, -1),
    dImmMacro128 (3, 0, 0, 0, 0),
    dImmMacro128 (4, -1, 0, -1, 0),
    dImmMacro128 (5, -1, -1, -1, -1),
    dImmMacro128 (6, -1, 0, -1, 0),
    dImmMacro128 (7, -1, -1, -1, -1),
    dImmMacro128 (8, 0, -1, 0, -1),
    dImmMacro128 (9, 0, 0, 0, 0),
    dImmMacro128 (10, 0, -1, 0, -1),
    dImmMacro128 (11, 0, 0, 0, 0),
    dImmMacro128 (12, -1, 0, -1, 0),
    dImmMacro128 (13, -1, -1, -1, -1),
    dImmMacro128 (14, -1, 0, -1, 0),
    dImmMacro128 (15, -1, -1, -1, -1),
    dImmMacro128 (16, 0, -1, 0, -1),
    dImmMacro128 (17, 0, 0, 0, 0),
    dImmMacro128 (18, 0, -1, 0, -1),
    dImmMacro128 (19, 0, 0, 0, 0),
    dImmMacro128 (20, -1, 0, -1, 0),
    dImmMacro128 (21, -1, -1, -1, -1),
    dImmMacro128 (22, -1, 0, -1, 0),
    dImmMacro128 (23, -1, -1, -1, -1),
    dImmMacro128 (24, 0, -1, 0, -1),
    dImmMacro128 (25, 0, 0, 0, 0),
    dImmMacro128 (26, 0, -1, 0, -1),
    dImmMacro128 (27, 0, 0, 0, 0),
    dImmMacro128 (28, -1, 0, -1, 0),
    dImmMacro128 (29, -1, -1, -1, -1),
    dImmMacro128 (30, -1, 0, -1, 0),
    dImmMacro128 (31, -1, -1, -1, -1),
}
},

{
{1.0, -1.0, 1.0, -1.0},
{0.0, 1.0, 0.0, 1.0},
#undef dImmMacro128
#define dImmMacro128(Imm, A, B, C, D) {A, {-1.0, 1.0, -1.0}}
{
    dImmMacro128 (0, 0, 0, 0, 0),
    dImmMacro128 (1, 0, -1, 0, -1),
    dImmMacro128 (2, 0, -1, 0, -1),
    dImmMacro128 (3, 0, 0, 0, 0),
    dImmMacro128 (4, -1, -1, -1, -1),
    dImmMacro128 (5, -1, 0, -1, 0),
    dImmMacro128 (6, -1, 0, -1, 0),
    dImmMacro128 (7, -1, -1, -1, -1),
    dImmMacro128 (8, 0, 0, 0, 0),
    dImmMacro128 (9, 0, -1, 0, -1),
    dImmMacro128 (10, 0, -1, 0, -1),
    dImmMacro128 (11, 0, 0, 0, 0),
    dImmMacro128 (12, -1, -1, -1, -1),
    dImmMacro128 (13, -1, 0, -1, 0),
    dImmMacro128 (14, -1, 0, -1, 0),
    dImmMacro128 (15, -1, -1, -1, -1),
    dImmMacro128 (16, 0, 0, 0, 0),
    dImmMacro128 (17, 0, -1, 0, -1),
    dImmMacro128 (18, 0, -1, 0, -1),
    dImmMacro128 (19, 0, 0, 0, 0),
    dImmMacro128 (20, -1, -1, -1, -1),
    dImmMacro128 (21, -1, 0, -1, 0),
    dImmMacro128 (22, -1, 0, -1, 0),
    dImmMacro128 (23, -1, -1, -1, -1),
    dImmMacro128 (24, 0, 0, 0, 0),
    dImmMacro128 (25, 0, -1, 0, -1),
    dImmMacro128 (26, 0, -1, 0, -1),
    dImmMacro128 (27, 0, 0, 0, 0),
    dImmMacro128 (28, -1, -1, -1, -1),
    dImmMacro128 (29, -1, 0, -1, 0),
    dImmMacro128 (30, -1, 0, -1, 0),
    dImmMacro128 (31, -1, -1, -1, -1)
}
},

{
{1.0, -1.0, 1.0, -1.0},
{0.0, -1.0, 0.0, -1.0},
#undef dImmMacro128
#define dImmMacro128(Imm, A, B, C, D) {A, {-1.0, 1.0, -1.0}}
{
    dImmMacro128 (0, 0, -1, 0, -1),
    dImmMacro128 (1, 0, 0, 0, 0),
    dImmMacro128 (2, 0, -1, 0, -1),
    dImmMacro128 (3, 0, 0, 0, 0),
    dImmMacro128 (4, -1, 0, -1, 0),
    dImmMacro128 (5, -1, -1, -1, -1),
    dImmMacro128 (6, -1, 0, -1, 0),
    dImmMacro128 (7, -1, -1, -1, -1),
    dImmMacro128 (8, 0, -1, 0, -1),
    dImmMacro128 (9, 0, 0, 0, 0),
    dImmMacro128 (10, 0, -1, 0, -1),
    dImmMacro128 (11, 0, 0, 0, 0),
    dImmMacro128 (12, -1, 0, -1, 0),
    dImmMacro128 (13, -1, -1, -1, -1),
    dImmMacro128 (14, -1, 0, -1, 0),
    dImmMacro128 (15, -1, -1, -1, -1),
    dImmMacro128 (16, 0, -1, 0, -1),
    dImmMacro128 (17, 0, 0, 0, 0),
    dImmMacro128 (18, 0, -1, 0, -1),
    dImmMacro128 (19, 0, 0, 0, 0),
    dImmMacro128 (20, -1, 0, -1, 0),
    dImmMacro128 (21, -1, -1, -1, -1),
    dImmMacro128 (22, -1, 0, -1, 0),
    dImmMacro128 (23, -1, -1, -1, -1),
    dImmMacro128 (24, 0, -1, 0, -1),
    dImmMacro128 (25, 0, 0, 0, 0),
    dImmMacro128 (26, 0, -1, 0, -1),
    dImmMacro128 (27, 0, 0, 0, 0),
    dImmMacro128 (28, -1, 0, -1, 0),
    dImmMacro128 (29, -1, -1, -1, -1),
    dImmMacro128 (30, -1, 0, -1, 0),
    dImmMacro128 (31, -1, -1, -1, -1),
}
}
};

static const struct
{
    float   a[4];
    float   b[4];

    uint8_t expect[32];
}
g_test_mm_cmp_ss_mask_data[] =
{
{
{NaNq32, NaNq32, NaNq32, NaNq32},
{1.1, 1.1, 1.1, 1.1},

{
    0x0,
    0x0,
    0x0,
    0x01,
    0x01,
    0x01,
    0x01,
    0x0,
    0x01,
    0x01,
    0x01,
    0x0,
    0x0,
    0x0,
    0x0,
    0x01,
    0x0,
    0x0,
    0x0,
    0x01,
    0x01,
    0x01,
    0x01,
    0x0,
    0x01,
    0x01,
    0x01,
    0x0,
    0x0,
    0x0,
    0x0,
    0x01
}
},

{
{1.0, -1.0, 1.0, -1.0},
{0.0, 1.0, 0.0, 1.0},

{
    0x0,
    0x00,
    0x00,
    0x0,
    0x01,
    0x01,
    0x01,
    0x01,
    0x0,
    0x00,
    0x00,
    0x0,
    0x01,
    0x01,
    0x01,
    0x01,
    0x0,
    0x00,
    0x00,
    0x0,
    0x01,
    0x01,
    0x01,
    0x01,
    0x0,
    0x00,
    0x00,
    0x0,
    0x01,
    0x01,
    0x01,
    0x01
}
}
};
static const struct
{
    float   a[4];
    float   b[4];
    uint8_t m;

    uint8_t expect[32];
}
g_test_mm_mask_cmp_ss_mask_data[] =
{
{
{NaNq32, NaNq32, NaNq32, NaNq32},
{1.1, 1.1, 1.1, 1.1},
0x01,
{
    0x0,
    0x0,
    0x0,
    0x01,
    0x01,
    0x01,
    0x01,
    0x0,
    0x01,
    0x01,
    0x01,
    0x0,
    0x0,
    0x0,
    0x0,
    0x01,
    0x0,
    0x0,
    0x0,
    0x01,
    0x01,
    0x01,
    0x01,
    0x0,
    0x01,
    0x01,
    0x01,
    0x0,
    0x0,
    0x0,
    0x0,
    0x01
}
},

{
{1.0, -1.0, 1.0, -1.0},
{0.0, 1.0, 0.0, 1.0},
0x0,
{
    0x0,
    0x00,
    0x00,
    0x0,
    0x00,
    0x00,
    0x00,
    0x00,
    0x0,
    0x00,
    0x00,
    0x0,
    0x00,
    0x00,
    0x00,
    0x00,
    0x0,
    0x00,
    0x00,
    0x0,
    0x00,
    0x00,
    0x00,
    0x00,
    0x0,
    0x00,
    0x00,
    0x0,
    0x00,
    0x00,
    0x00,
    0x00
}
}
};

static const struct
{
    uint32_t s[4];
    uint8_t  a[16];
    uint8_t  b[16];

    uint32_t expect[4];
}
g_test_mm_dpbusd_epi32_data[] =
{
{
{0x02, 0x04, 0x10, 0x40},
{0x01, 0x02, 0x03, 0x04,
    0x05, 0x06, 0x07, 0x08,
    0x10, 0x20, 0x30, 0x40,
    0x50, 0x60, 0x70, 0x80},
{0x09, 0x0a, 0x0b, 0x0c,
    0x0d, 0x0e, 0x0f, 0x00,
    0x08, 0x07, 0x06, 0x05,
    0x04, 0x03, 0x02, 0x01},
{0x70, 0x102, 0x3d0, 0x400}
},

{
{0xff1, 0xfef4, 0x00, 0xbb21},
{0xf1, 0xc2, 0xe3, 0xf4,
    0x65, 0x06, 0x07, 0x38,
    0x1b, 0x27, 0x32, 0x49,
    0x5a, 0x68, 0x72, 0x8a},
{0x09, 0x0a, 0x0b, 0x0c,
    0x0d, 0x0e, 0x0f, 0x00,
    0x08, 0x07, 0x06, 0x05,
    0x04, 0x03, 0x02, 0x01},
{0x352f, 0x104d2, 0x482, 0xbf2f}
}
};

static const struct
{
    uint32_t s[4];
    uint8_t  a[16];
    uint8_t  b[16];
    uint8_t  m;

    uint32_t expect[4];
}
g_test_mm_mask_dpbusd_epi32_data[] =
{
{
{0x02, 0x04, 0x10, 0x40},
{0x01, 0x02, 0x03, 0x04,
    0x05, 0x06, 0x07, 0x08,
    0x10, 0x20, 0x30, 0x40,
    0x50, 0x60, 0x70, 0x80},
{0x09, 0x0a, 0x0b, 0x0c,
    0x0d, 0x0e, 0x0f, 0x00,
    0x08, 0x07, 0x06, 0x05,
    0x04, 0x03, 0x02, 0x01},
0x0f,
{0x70, 0x102, 0x3d0, 0x400}
},

{
{0xff1, 0xfef4, 0x00, 0xbb21},
{0xf1, 0xc2, 0xe3, 0xf4,
    0x65, 0x06, 0x07, 0x38,
    0x1b, 0x27, 0x32, 0x49,
    0x5a, 0x68, 0x72, 0x8a},
{0x09, 0x0a, 0x0b, 0x0c,
    0x0d, 0x0e, 0x0f, 0x00,
    0x08, 0x07, 0x06, 0x05,
    0x04, 0x03, 0x02, 0x01},
0x08,
{0xff1, 0xfef4, 0x00, 0xbf2f}
}
};

static const struct
{
    uint32_t s[4];
    uint8_t  a[16];
    uint8_t  b[16];
    uint8_t  m;

    uint32_t expect[4];
}
g_test_mm_maskz_dpbusd_epi32_data[] =
{
{
{0x02, 0x04, 0x10, 0x40},
{0x01, 0x02, 0x03, 0x04,
    0x05, 0x06, 0x07, 0x08,
    0x10, 0x20, 0x30, 0x40,
    0x50, 0x60, 0x70, 0x80},
{0x09, 0x0a, 0x0b, 0x0c,
    0x0d, 0x0e, 0x0f, 0x00,
    0x08, 0x07, 0x06, 0x05,
    0x04, 0x03, 0x02, 0x01},
0x07,
{0x70, 0x102, 0x3d0, 0x00}
},

{
{0xff1, 0xfef4, 0x00, 0xbb21},
{0xf1, 0xc2, 0xe3, 0xf4,
    0x65, 0x06, 0x07, 0x38,
    0x1b, 0x27, 0x32, 0x49,
    0x5a, 0x68, 0x72, 0x8a},
{0x09, 0x0a, 0x0b, 0x0c,
    0x0d, 0x0e, 0x0f, 0x00,
    0x08, 0x07, 0x06, 0x05,
    0x04, 0x03, 0x02, 0x01},
0x08,
{0, 0, 0, 0xbf2f}
}
};

static const struct
{
    uint32_t s[8];
    uint8_t  a[32];
    uint8_t  b[32];

    uint32_t expect[8];
}
g_test_mm256_dpbusd_epi32_data[] =
{
{
{0x02, 0x04, 0x10, 0x40, 0x22, 0x14, 0x1e, 0x807897},
{0x01, 0x02, 0x03, 0x04,
    0x05, 0x06, 0x07, 0x08,
    0x10, 0x20, 0x30, 0x40,
    0x50, 0x60, 0x70, 0x80,
    0x21, 0x22, 0x23, 0x24,
    0x15, 0x06, 0x17, 0x18,
    0x10, 0x23, 0x30, 0x40,
    0x59, 0x60, 0x78, 0x81},
{0x09, 0x0a, 0x0b, 0x0c,
    0x0d, 0x0e, 0x0f, 0x10,
    0x08, 0x07, 0x06, 0x05,
    0x04, 0x03, 0x02, 0x71,
    0x19, 0x1a, 0x0b, 0x0c,
    0x0d, 0x0e, 0x4f, 0x00,
    0x48, 0x57, 0x06, 0x05,
    0x74, 0x03, 0x42, 0x71},
{0x70, 0x182, 0x3d0, 0x3c00, 0xa00, 0x892, 0x12e3, 0x80f9ec}
},

{
{0x120ff1, 0xfef4, 0x30, 0xbb0, 0x70, 0x182, 0x3d0, 0x5c00},
{0xf1, 0xc2, 0xe3, 0xf4,
    0x65, 0x06, 0x07, 0x38,
    0x1b, 0x27, 0x32, 0x49,
    0x5a, 0x68, 0x72, 0x8a,
    0xf1, 0xc2, 0xe3, 0xf4,
    0x65, 0x16, 0x07, 0x38,
    0x1b, 0x27, 0x32, 0x49,
    0x5a, 0x68, 0x72, 0x8a},
{0x09, 0x0a, 0x0b, 0x5c,
    0x0d, 0x0e, 0x0f, 0x00,
    0x08, 0x07, 0x06, 0x05,
    0x04, 0x63, 0x02, 0x01,
    0x09, 0x0a, 0x0b, 0x0c,
    0x0d, 0x0e, 0x0f, 0xc0,
    0x98, 0x17, 0x06, 0xe5,
    0x04, 0x03, 0x02, 0x01},
{0x12816f, 0x104d2, 0x4b2, 0x36be, 0x25ae, 0xfffffa40, 0xfffff5d2, 0x600e}
}
};

static const struct
{
    uint32_t s[8];
    uint8_t  a[32];
    uint8_t  b[32];
    uint8_t  m;

    uint32_t expect[8];
}
g_test_mm256_mask_dpbusd_epi32_data[] =
{
{
{0x02, 0x04, 0x10, 0x40, 0x22, 0x14, 0x1e, 0x807897},
{0x01, 0x02, 0x03, 0x04,
    0x05, 0x06, 0x07, 0x08,
    0x10, 0x20, 0x30, 0x40,
    0x50, 0x60, 0x70, 0x80,
    0x21, 0x22, 0x23, 0x24,
    0x15, 0x06, 0x17, 0x18,
    0x10, 0x23, 0x30, 0x40,
    0x59, 0x60, 0x78, 0x81},
{0x09, 0x0a, 0x0b, 0x0c,
    0x0d, 0x0e, 0x0f, 0x10,
    0x08, 0x07, 0x06, 0x05,
    0x04, 0x03, 0x02, 0xb1,
    0x19, 0x1a, 0x0b, 0x0c,
    0x0d, 0x0e, 0x4f, 0x00,
    0x98, 0x57, 0x06, 0x05,
    0xe4, 0x03, 0x42, 0xa1},
0x8f,
{0x70, 0x182, 0x3d0, 0xffffdc00, 0x22, 0x14, 0x1e, 0x805f0c}
},

{
{0x120ff1, 0xfef4, 0x30, 0xbb0, 0x70, 0x182, 0x3d0, 0x5c00},
{0xf1, 0xc2, 0xe3, 0xf4,
    0x65, 0x06, 0x07, 0x38,
    0x1b, 0x27, 0x32, 0x49,
    0x5a, 0x68, 0x72, 0x8a,
    0xf1, 0xc2, 0xe3, 0xf4,
    0x65, 0x16, 0x07, 0x38,
    0x1b, 0x27, 0x32, 0x49,
    0x5a, 0x68, 0x72, 0x8a},
{0x09, 0x0a, 0x0b, 0x5c,
    0x0d, 0x0e, 0x0f, 0x00,
    0x08, 0x07, 0x06, 0x05,
    0x04, 0x63, 0x02, 0x01,
    0x09, 0x0a, 0x0b, 0x0c,
    0x0d, 0x0e, 0x0f, 0xc0,
    0x98, 0x17, 0x06, 0xe5,
    0x04, 0x03, 0x02, 0x01},
0xf1,
{0x12816f, 0xfef4, 0x30, 0xbb0, 0x25ae, 0xfffffa40, 0xfffff5d2, 0x600e}
}
};

static const struct
{
    uint32_t s[8];
    uint8_t  a[32];
    uint8_t  b[32];
    uint8_t  m;

    uint32_t expect[8];
}
g_test_mm256_maskz_dpbusd_epi32_data[] =
{
{
{0x02, 0x04, 0x10, 0x40, 0x22, 0x14, 0x1e, 0x807897},
{0x01, 0x02, 0x03, 0x04,
    0x05, 0x06, 0x07, 0x08,
    0x10, 0x20, 0x30, 0x40,
    0x50, 0x60, 0x70, 0x80,
    0x21, 0x22, 0x23, 0x24,
    0x15, 0x06, 0x17, 0x18,
    0x10, 0x23, 0x30, 0x40,
    0x59, 0x60, 0x78, 0x81},
{0x09, 0x0a, 0x0b, 0x0c,
    0x0d, 0x0e, 0x0f, 0x10,
    0x08, 0x07, 0x06, 0x05,
    0x04, 0x03, 0x02, 0xb1,
    0x19, 0x1a, 0x0b, 0x0c,
    0x0d, 0x0e, 0x4f, 0x00,
    0x98, 0x57, 0x06, 0x05,
    0xe4, 0x03, 0x42, 0xa1},
0x8f,
{0x70, 0x182, 0x3d0, 0xffffdc00, 0, 0, 0, 0x805f0c}
},

{
{0x120ff1, 0xfef4, 0x30, 0xbb0, 0x70, 0x182, 0x3d0, 0x5c00},
{0xf1, 0xc2, 0xe3, 0xf4,
    0x65, 0x06, 0x07, 0x38,
    0x1b, 0x27, 0x32, 0x49,
    0x5a, 0x68, 0x72, 0x8a,
    0xf1, 0xc2, 0xe3, 0xf4,
    0x65, 0x16, 0x07, 0x38,
    0x1b, 0x27, 0x32, 0x49,
    0x5a, 0x68, 0x72, 0x8a},
{0x09, 0x0a, 0x0b, 0x5c,
    0x0d, 0x0e, 0x0f, 0x00,
    0x08, 0x07, 0x06, 0x05,
    0x04, 0x63, 0x02, 0x01,
    0x09, 0x0a, 0x0b, 0x0c,
    0x0d, 0x0e, 0x0f, 0xc0,
    0x98, 0x17, 0x06, 0xe5,
    0x04, 0x03, 0x02, 0x01},
0xf1,
{0x12816f, 0, 0, 0, 0x25ae, 0xfffffa40, 0xfffff5d2, 0x600e}
}
};

static const struct
{
    uint32_t s[16];
    uint8_t  a[64];
    uint8_t  b[64];

    uint32_t expect[16];
}
g_test_mm512_dpbusd_epi32_data[] =
{
{
{0x02, 0x04, 0x10, 0x40, 0x22, 0x14, 0x1e, 0x8078,
    0x12, 0x14, 0x1e, 0x4a, 0x22, 0x74, 0x8e, 0x8078a},
{0x01, 0x02, 0x03, 0x04,
    0x05, 0x06, 0x07, 0x08,
    0x10, 0x20, 0x30, 0x40,
    0x50, 0x60, 0x70, 0x80,
    0x21, 0x22, 0x23, 0x24,
    0x15, 0x96, 0x17, 0x18,
    0x10, 0x23, 0x30, 0x40,
    0x59, 0x60, 0x78, 0x81,
    0x01, 0x12, 0xb3, 0x04,
    0x05, 0x96, 0x07, 0x08,
    0x10, 0x20, 0x30, 0x40,
    0x50, 0x60, 0x70, 0x80,
    0x21, 0x22, 0x23, 0x24,
    0x15, 0xa6, 0x17, 0x18,
    0x10, 0x23, 0x30, 0x40,
    0x59, 0x60, 0x78, 0x81},
{0x09, 0x0a, 0x0b, 0x0c,
    0x0d, 0x0e, 0x0f, 0x10,
    0x08, 0x07, 0x06, 0x05,
    0x04, 0x03, 0x02, 0xb1,
    0x19, 0x1a, 0x0b, 0x0c,
    0x0d, 0x2e, 0x4f, 0x20,
    0x98, 0x57, 0x06, 0x05,
    0xe4, 0x03, 0x42, 0xa1,
    0x79, 0x0a, 0xcb, 0xac,
    0x0d, 0x8e, 0x1f, 0x10,
    0x38, 0x17, 0x06, 0x05,
    0x74, 0x13, 0x02, 0xb1,
    0x19, 0x1a, 0x0b, 0x0c,
    0x0d, 0x0e, 0x4f, 0x00,
    0x98, 0x57, 0x06, 0x05,
    0xe4, 0x03, 0x42, 0xa1},
{0x70, 0x182, 0x3d0, 0xffffdc00, 0xa00, 0x2632, 0x7e3, 0x66ed,
    0xffffdae0, 0xffffbee2, 0x8de, 0x50a, 0xa00, 0x11b2, 0x853, 0x7edff}
},

{
{0x120ff1, 0xfef4, 0x30, 0xbb0, 0x70, 0x182, 0x3d0, 0x5c00,
 0x02, 0x14, 0x56, 0xb0, 0x11, 0x44, 0x66, 0x00},
{0xf1, 0xc2, 0xe3, 0xf4,
    0x65, 0x06, 0x07, 0x38,
    0x1b, 0x27, 0x32, 0x49,
    0x5a, 0x68, 0x72, 0x8a,
    0xf1, 0xc2, 0xe3, 0xf4,
    0x65, 0x16, 0x07, 0x38,
    0x1b, 0x27, 0x32, 0x49,
    0x5a, 0x68, 0x72, 0x8a,
    0xf4, 0x82, 0xe3, 0xf4,
    0x65, 0x06, 0x07, 0x38,
    0x1b, 0x27, 0x32, 0x49,
    0x5a, 0x68, 0x72, 0x8a,
    0xf1, 0xc6, 0xe3, 0xf4,
    0x65, 0x16, 0x57, 0x38,
    0x1b, 0x27, 0x32, 0x49,
    0x5a, 0x68, 0x72, 0x8a},
{0x09, 0x0a, 0x0b, 0x5c,
    0x0d, 0x0e, 0x0f, 0x00,
    0x08, 0x07, 0x06, 0x05,
    0x04, 0x63, 0xc2, 0x01,
    0x09, 0x0a, 0x0b, 0x0c,
    0x0d, 0x0e, 0x0f, 0xc0,
    0x98, 0x17, 0x96, 0xe5,
    0x34, 0x03, 0x02, 0x01,
    0x09, 0x0a, 0x5b, 0x5c,
    0x1d, 0x0e, 0x0f, 0x00,
    0x08, 0x07, 0xc6, 0x05,
    0x14, 0x63, 0x52, 0x01,
    0x09, 0x0a, 0x0b, 0x0c,
    0x0d, 0x0e, 0xaf, 0xc1,
    0x98, 0x17, 0x06, 0xe5,
    0x04, 0x03, 0x02, 0x01},
{0x12816f, 0x104d2, 0x4b2, 0x1a3e, 0x25ae, 0xfffffa40, 0xffffdff2, 0x70ee,
    0xb60b, 0xc42, 0xfffff858, 0x54fe, 0x2577, 0xffffdd4a, 0xfffff268, 0x40e}
}
};

static const struct
{
    uint32_t s[16];
    uint8_t  a[64];
    uint8_t  b[64];
    uint16_t m;

    uint32_t expect[16];
}
g_test_mm512_mask_dpbusd_epi32_data[] =
{
{
{0x02, 0x04, 0x10, 0x40, 0x22, 0x14, 0x1e, 0x8078,
    0x12, 0x14, 0x1e, 0x4a, 0x22, 0x74, 0x8e, 0x8078a},
{0x01, 0x02, 0x03, 0x04,
    0x05, 0x06, 0x07, 0x08,
    0x10, 0x20, 0x30, 0x40,
    0x50, 0x60, 0x70, 0x80,
    0x21, 0x22, 0x23, 0x24,
    0x15, 0x96, 0x17, 0x18,
    0x10, 0x23, 0x30, 0x40,
    0x59, 0x60, 0x78, 0x81,
    0x01, 0x12, 0xb3, 0x04,
    0x05, 0x96, 0x07, 0x08,
    0x10, 0x20, 0x30, 0x40,
    0x50, 0x60, 0x70, 0x80,
    0x21, 0x22, 0x23, 0x24,
    0x15, 0xa6, 0x17, 0x18,
    0x10, 0x23, 0x30, 0x40,
    0x59, 0x60, 0x78, 0x81},
{0x09, 0x0a, 0x0b, 0x0c,
    0x0d, 0x0e, 0x0f, 0x10,
    0x08, 0x07, 0x06, 0x05,
    0x04, 0x03, 0x02, 0xb1,
    0x19, 0x1a, 0x0b, 0x0c,
    0x0d, 0x2e, 0x4f, 0x20,
    0x98, 0x57, 0x06, 0x05,
    0xe4, 0x03, 0x42, 0xa1,
    0x79, 0x0a, 0xcb, 0xac,
    0x0d, 0x8e, 0x1f, 0x10,
    0x38, 0x17, 0x06, 0x05,
    0x74, 0x13, 0x02, 0xb1,
    0x19, 0x1a, 0x0b, 0x0c,
    0x0d, 0x0e, 0x4f, 0x00,
    0x98, 0x57, 0x06, 0x05,
    0xe4, 0x03, 0x42, 0xa1},
0xf0f1,
{0x70, 0x04, 0x10, 0x40, 0xa00, 0x2632, 0x7e3, 0x66ed,
    0x12, 0x14, 0x1e, 0x4a, 0xa00, 0x11b2, 0x853, 0x7edff}
},
{
{0x120ff1, 0xfef4, 0x30, 0xbb0, 0x70, 0x182, 0x3d0, 0x5c00,
 0x02, 0x14, 0x56, 0xb0, 0x11, 0x44, 0x66, 0x00},
{0xf1, 0xc2, 0xe3, 0xf4,
    0x65, 0x06, 0x07, 0x38,
    0x1b, 0x27, 0x32, 0x49,
    0x5a, 0x68, 0x72, 0x8a,
    0xf1, 0xc2, 0xe3, 0xf4,
    0x65, 0x16, 0x07, 0x38,
    0x1b, 0x27, 0x32, 0x49,
    0x5a, 0x68, 0x72, 0x8a,
    0xf4, 0x82, 0xe3, 0xf4,
    0x65, 0x06, 0x07, 0x38,
    0x1b, 0x27, 0x32, 0x49,
    0x5a, 0x68, 0x72, 0x8a,
    0xf1, 0xc6, 0xe3, 0xf4,
    0x65, 0x16, 0x57, 0x38,
    0x1b, 0x27, 0x32, 0x49,
    0x5a, 0x68, 0x72, 0x8a},
{0x09, 0x0a, 0x0b, 0x5c,
    0x0d, 0x0e, 0x0f, 0x00,
    0x08, 0x07, 0x06, 0x05,
    0x04, 0x63, 0xc2, 0x01,
    0x09, 0x0a, 0x0b, 0x0c,
    0x0d, 0x0e, 0x0f, 0xc0,
    0x98, 0x17, 0x96, 0xe5,
    0x34, 0x03, 0x02, 0x01,
    0x09, 0x0a, 0x5b, 0x5c,
    0x1d, 0x0e, 0x0f, 0x00,
    0x08, 0x07, 0xc6, 0x05,
    0x14, 0x63, 0x52, 0x01,
    0x09, 0x0a, 0x0b, 0x0c,
    0x0d, 0x0e, 0xaf, 0xc1,
    0x98, 0x17, 0x06, 0xe5,
    0x04, 0x03, 0x02, 0x01},
0xf37,
{0x12816f, 0x104d2, 0x4b2, 0xbb0, 0x25ae, 0xfffffa40, 0x3d0, 0x5c00,
    0xb60b, 0xc42, 0xfffff858, 0x54fe, 0x11, 0x44, 0x66, 0x00}
}
};

static const struct
{
    uint32_t s[16];
    uint8_t  a[64];
    uint8_t  b[64];
    uint16_t m;

    uint32_t expect[16];
}
g_test_mm512_maskz_dpbusd_epi32_data[] =
{
{
{0x02, 0x04, 0x10, 0x40, 0x22, 0x14, 0x1e, 0x8078,
    0x12, 0x14, 0x1e, 0x4a, 0x22, 0x74, 0x8e, 0x8078a},
{0x01, 0x02, 0x03, 0x04,
    0x05, 0x06, 0x07, 0x08,
    0x10, 0x20, 0x30, 0x40,
    0x50, 0x60, 0x70, 0x80,
    0x21, 0x22, 0x23, 0x24,
    0x15, 0x96, 0x17, 0x18,
    0x10, 0x23, 0x30, 0x40,
    0x59, 0x60, 0x78, 0x81,
    0x01, 0x12, 0xb3, 0x04,
    0x05, 0x96, 0x07, 0x08,
    0x10, 0x20, 0x30, 0x40,
    0x50, 0x60, 0x70, 0x80,
    0x21, 0x22, 0x23, 0x24,
    0x15, 0xa6, 0x17, 0x18,
    0x10, 0x23, 0x30, 0x40,
    0x59, 0x60, 0x78, 0x81},
{0x09, 0x0a, 0x0b, 0x0c,
    0x0d, 0x0e, 0x0f, 0x10,
    0x08, 0x07, 0x06, 0x05,
    0x04, 0x03, 0x02, 0xb1,
    0x19, 0x1a, 0x0b, 0x0c,
    0x0d, 0x2e, 0x4f, 0x20,
    0x98, 0x57, 0x06, 0x05,
    0xe4, 0x03, 0x42, 0xa1,
    0x79, 0x0a, 0xcb, 0xac,
    0x0d, 0x8e, 0x1f, 0x10,
    0x38, 0x17, 0x06, 0x05,
    0x74, 0x13, 0x02, 0xb1,
    0x19, 0x1a, 0x0b, 0x0c,
    0x0d, 0x0e, 0x4f, 0x00,
    0x98, 0x57, 0x06, 0x05,
    0xe4, 0x03, 0x42, 0xa1},
0xf0f1,
{0x70, 0, 0, 0, 0xa00, 0x2632, 0x7e3, 0x66ed,
    0, 0, 0, 0, 0xa00, 0x11b2, 0x853, 0x7edff}
},

{
{0x120ff1, 0xfef4, 0x30, 0xbb0, 0x70, 0x182, 0x3d0, 0x5c00,
 0x02, 0x14, 0x56, 0xb0, 0x11, 0x44, 0x66, 0x00},
{0xf1, 0xc2, 0xe3, 0xf4,
    0x65, 0x06, 0x07, 0x38,
    0x1b, 0x27, 0x32, 0x49,
    0x5a, 0x68, 0x72, 0x8a,
    0xf1, 0xc2, 0xe3, 0xf4,
    0x65, 0x16, 0x07, 0x38,
    0x1b, 0x27, 0x32, 0x49,
    0x5a, 0x68, 0x72, 0x8a,
    0xf4, 0x82, 0xe3, 0xf4,
    0x65, 0x06, 0x07, 0x38,
    0x1b, 0x27, 0x32, 0x49,
    0x5a, 0x68, 0x72, 0x8a,
    0xf1, 0xc6, 0xe3, 0xf4,
    0x65, 0x16, 0x57, 0x38,
    0x1b, 0x27, 0x32, 0x49,
    0x5a, 0x68, 0x72, 0x8a},
{0x09, 0x0a, 0x0b, 0x5c,
    0x0d, 0x0e, 0x0f, 0x00,
    0x08, 0x07, 0x06, 0x05,
    0x04, 0x63, 0xc2, 0x01,
    0x09, 0x0a, 0x0b, 0x0c,
    0x0d, 0x0e, 0x0f, 0xc0,
    0x98, 0x17, 0x96, 0xe5,
    0x34, 0x03, 0x02, 0x01,
    0x09, 0x0a, 0x5b, 0x5c,
    0x1d, 0x0e, 0x0f, 0x00,
    0x08, 0x07, 0xc6, 0x05,
    0x14, 0x63, 0x52, 0x01,
    0x09, 0x0a, 0x0b, 0x0c,
    0x0d, 0x0e, 0xaf, 0xc1,
    0x98, 0x17, 0x06, 0xe5,
    0x04, 0x03, 0x02, 0x01},
0xf37,
{0x12816f, 0x104d2, 0x4b2, 0, 0x25ae, 0xfffffa40, 0, 0,
    0xb60b, 0xc42, 0xfffff858, 0x54fe, 0, 0, 0, 0}
}
};

static const struct
{
    uint32_t s[4];
    uint16_t  a[8];
    uint16_t  b[8];

    uint32_t expect[4];
}
g_test_mm_dpwssd_epi32_data[] =
{
{
{0x112, 0x254, 0xa8, 0x40},
{0x0187, 0xa24, 0x123, 0x45b,
    0xb55, 0x666, 0x1c37, 0x126b},
{0x189, 0x9872, 0xab2b, 0x3e3,
    0x34d, 0x097, 0x132f, 0x06},
{0xfbe83d59, 0xffb081e6, 0x292e63, 0x21db1db}
},

{
{0xff1, 0xfef4, 0x00, 0xbb21},
{0xf19, 0xc2, 0xe3, 0xf4,
    0x65, 0x886, 0x437, 0x138},
{0x129, 0x0a, 0x2b, 0x9c,
    0x4d, 0x9e, 0x33f, 0x5613},
{0x119b86, 0x1b9c5, 0x56115, 0x7750d2}
}
};

static const struct
{
    uint32_t s[4];
    uint16_t  a[8];
    uint16_t  b[8];
    uint8_t m;

    uint32_t expect[4];
}
g_test_mm_mask_dpwssd_epi32_data[] =
{
{
{0x112, 0x254, 0xa8, 0x40},
{0x0187, 0xa24, 0x123, 0x45b,
    0xb55, 0x666, 0x1c37, 0x126b},
{0x189, 0x9872, 0xab2b, 0x3e3,
    0x34d, 0x097, 0x132f, 0x06},
0x02,
{0x112, 0xffb081e6, 0xa8, 0x40}
},

{
{0xff1, 0xfef4, 0x00, 0xbb21},
{0xf19, 0xc2, 0xe3, 0xf4,
    0x65, 0x886, 0x437, 0x138},
{0x129, 0x0a, 0x2b, 0x9c,
    0x4d, 0x9e, 0x33f, 0x5613},
0x06,
{0xff1, 0x1b9c5, 0x56115, 0xbb21}
}
};

static const struct
{
    uint32_t s[4];
    uint16_t  a[8];
    uint16_t  b[8];
    uint8_t m;

    uint32_t expect[4];
}
g_test_mm_maskz_dpwssd_epi32_data[] =
{
{
{0x112, 0x254, 0xa8, 0x40},
{0x0187, 0xa24, 0x123, 0x45b,
    0xb55, 0x666, 0x1c37, 0x126b},
{0x189, 0x9872, 0xab2b, 0x3e3,
    0x34d, 0x097, 0x132f, 0x06},
0x02,
{0, 0xffb081e6, 0, 0}
},

{
{0xff1, 0xfef4, 0x00, 0xbb21},
{0xf19, 0xc2, 0xe3, 0xf4,
    0x65, 0x886, 0x437, 0x138},
{0x129, 0x0a, 0x2b, 0x9c,
    0x4d, 0x9e, 0x33f, 0x5613},
0x06,
{0, 0x1b9c5, 0x56115, 0}
}
};

static const struct
{
    uint32_t s[8];
    uint16_t  a[16];
    uint16_t  b[16];

    uint32_t expect[8];
}
g_test_mm256_dpwssd_epi32_data[] =
{
{
{0x112, 0x254, 0xa8, 0x40, 0x112, 0x254, 0xa48, 0x406},
{0x0187, 0xa24, 0x123, 0x45b,
    0xb55, 0x666, 0x1c37, 0x126b,
    0x2187, 0xa24, 0x1123, 0x45b0,
    0x1b55, 0x6661, 0x1c37, 0x926b},
{0x2189, 0x9872, 0xab2b, 0x3e3,
    0x134d, 0x597, 0x132f, 0x976,
    0x2189, 0x9872, 0xab2b, 0x3e3,
    0x134d, 0x5907, 0x132f, 0x1976},
{0xfc191d59, 0xffb081e6, 0xfe7c63, 0x2cb83ab, 0x4a3d59, 0xfb611f45, 0x25aa1780, 0xf7373771}
},

{
{0xff1, 0xfef4, 0x00, 0xbb21, 0xff1, 0xfef4, 0x00, 0xbb21},
{0xf19, 0xc2, 0xe3, 0xf4,
    0x65, 0x886, 0x437, 0x138,
    0xf19, 0x6661, 0xe3, 0x926b,
    0x65, 0x886, 0x437, 0x138},
{0x129, 0x0a, 0x2b, 0x9c,
    0x4d, 0x9e, 0x33f, 0x5613,
    0x129, 0x11a, 0x42b, 0x59c,
    0x24d, 0x9e5, 0x133f, 0x5613},
{0x119b86, 0x1b9c5, 0x56115, 0x7750d2, 0x825acc, 0xfd9e0149, 0x553e3f, 0xbac0d2}
}
};

static const struct
{
    uint32_t s[8];
    uint16_t  a[16];
    uint16_t  b[16];
    uint8_t   m;

    uint32_t expect[8];
}
g_test_mm256_mask_dpwssd_epi32_data[] =
{
{
{0x112, 0x254, 0xa8, 0x40, 0x112, 0x254, 0xa48, 0x406},
{0x0187, 0xa24, 0x123, 0x45b,
    0xb55, 0x666, 0x1c37, 0x126b,
    0x2187, 0xa24, 0x1123, 0x45b0,
    0x1b55, 0x6661, 0x1c37, 0x926b},
{0x2189, 0x9872, 0xab2b, 0x3e3,
    0x134d, 0x597, 0x132f, 0x976,
    0x2189, 0x9872, 0xab2b, 0x3e3,
    0x134d, 0x5907, 0x132f, 0x1976},
0xff,
{0xfc191d59, 0xffb081e6, 0xfe7c63, 0x2cb83ab, 0x4a3d59, 0xfb611f45, 0x25aa1780, 0xf7373771}
},

{
{0xff1, 0xfef4, 0x00, 0xbb21, 0xff1, 0xfef4, 0x00, 0xbb21},
{0xf19, 0xc2, 0xe3, 0xf4,
    0x65, 0x886, 0x437, 0x138,
    0xf19, 0x6661, 0xe3, 0x926b,
    0x65, 0x886, 0x437, 0x138},
{0x129, 0x0a, 0x2b, 0x9c,
    0x4d, 0x9e, 0x33f, 0x5613,
    0x129, 0x11a, 0x42b, 0x59c,
    0x24d, 0x9e5, 0x133f, 0x5613},
0x0f,
{0x119b86, 0x1b9c5, 0x56115, 0x7750d2, 0xff1, 0xfef4, 0x00, 0xbb21}
}
};

static const struct
{
    uint32_t s[8];
    uint16_t  a[16];
    uint16_t  b[16];
    uint8_t   m;

    uint32_t expect[8];
}
g_test_mm256_maskz_dpwssd_epi32_data[] =
{
{
{0x112, 0x254, 0xa8, 0x40, 0x112, 0x254, 0xa48, 0x406},
{0x0187, 0xa24, 0x123, 0x45b,
    0xb55, 0x666, 0x1c37, 0x126b,
    0x2187, 0xa24, 0x1123, 0x45b0,
    0x1b55, 0x6661, 0x1c37, 0x926b},
{0x2189, 0x9872, 0xab2b, 0x3e3,
    0x134d, 0x597, 0x132f, 0x976,
    0x2189, 0x9872, 0xab2b, 0x3e3,
    0x134d, 0x5907, 0x132f, 0x1976},
0xff,
{0xfc191d59, 0xffb081e6, 0xfe7c63, 0x2cb83ab, 0x4a3d59, 0xfb611f45, 0x25aa1780, 0xf7373771}
},

{
{0xff1, 0xfef4, 0x00, 0xbb21, 0xff1, 0xfef4, 0x00, 0xbb21},
{0xf19, 0xc2, 0xe3, 0xf4,
    0x65, 0x886, 0x437, 0x138,
    0xf19, 0x6661, 0xe3, 0x926b,
    0x65, 0x886, 0x437, 0x138},
{0x129, 0x0a, 0x2b, 0x9c,
    0x4d, 0x9e, 0x33f, 0x5613,
    0x129, 0x11a, 0x42b, 0x59c,
    0x24d, 0x9e5, 0x133f, 0x5613},
0x0f,
{0x119b86, 0x1b9c5, 0x56115, 0x7750d2, 0, 0, 0, 0}
}
};
#endif	

