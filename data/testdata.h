#ifndef TESTDATA_H
#define TESTDATA_H

#include <stdint.h>
#include "typedef.h"

// 6-10
static const struct
{
    int16_t a[8];
    int16_t b[8];
    int     la;
    int     lb;
    int     expect;
}
g_test_mm_cmpestrs_data[] =
{
{
{0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC},
{0x3333, 0x3333 ,0x3333 ,0x3333, 0x3333, 0x3333, 0x3333, 0x3333},
8, 8, 0
},
{
{0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC},
{0x3333, 0x3333 ,0x3333 ,0x3333, 0x3333, 0x3333, 0x3333, 0x3333},
7, 8, 1
}
};

static const struct
{
    int16_t a[8];
    int16_t b[8];
    int     la;
    int     lb;
    int     expect;
}
g_test_mm_cmpestrz_data[] =
{
{
{0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC},
{0x3333, 0x3333 ,0x3333 ,0x3333, 0x3333, 0x3333, 0x3333, 0x3333},
8, 8, 0
},
{
{0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC},
{0x3333, 0x3333 ,0x3333 ,0x3333, 0x3333, 0x3333, 0x3333, 0x3333},
8, 7, 1
}
};

static const struct
{
    int16_t a[8];
    int16_t b[8];
    int     la;
    int     lb;
    int     expect;
}
g_test_mm_cmpistrs_data[] =
{
{
{0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC},
{0x3333, 0x3333 ,0x3333 ,0x3333, 0x3333, 0x3333, 0x3333, 0x3333},
8, 8, 0
},
{
{0x0, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC},
{0x3333, 0x3333 ,0x3333 ,0x3333, 0x3333, 0x3333, 0x3333, 0x3333},
7, 8, 1
}
};

static const struct
{
    int16_t a[8];
    int16_t b[8];
    int     la;
    int     lb;
    int     expect;
}
g_test_mm_cmpistrz_data[] =
{
{
{0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC},
{0x3333, 0x3333 ,0x3333 ,0x3333, 0x3333, 0x3333, 0x3333, 0x3333},
8, 8, 0
},
{
{0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC},
{0x0, 0x3333 ,0x3333 ,0x3333, 0x3333, 0x3333, 0x3333, 0x3333},
8, 7, 1
}
};

static const struct
{
    int16_t a[8];
    int16_t b[8];
    uint8_t expect[6];
}
g_test_mm_cmp_epi16_mask_data[] =
{
{
{0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC},
{0x3333, 0x3333 ,0x3333 ,0x3333, 0x3333, 0x3333, 0x3333, 0x3333},
{0x00, 0x00, 0x00, 0xff, 0xff, 0xff}
},
{
{0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC},
{0x3333, 0x4CCC ,0x3333 ,0x3333, 0x3333, 0x3333, 0x3333, 0x3333},
{0x02, 0x00, 0x02, 0xfd, 0xff, 0xfd}
},
{
{0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC},
{0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC},
{0xff, 0x00, 0xff, 0x00, 0xff, 0x00}
}
};

static const struct
{
    int16_t a[8];
    int16_t b[8];
    uint8_t mask[6];
    uint8_t expect[6];
}
g_test_mm_mask_cmp_epi16_mask_data[] =
{
{
{0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC},
{0x3333, 0x3333 ,0x3333 ,0x3333, 0x3333, 0x3333, 0x3333, 0x3333},
{0xff, 0xff, 0xff, 0xf0, 0x1f, 0x00},
{0x00, 0x00, 0x00, 0xf0, 0x1f, 0x00} // 0, 1, 2, 4, 5, 6
},
{
{0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC},
{0x3333, 0x4CCC ,0x3333 ,0x3333, 0x3333, 0x3333, 0x3333, 0x3333},
{0xf1, 0xff, 0xf2, 0x07, 0x1f, 0x0d},
{0x00, 0x00, 0x02, 0x05, 0x1f, 0x0d} // 0, 1, 2, 4, 5, 6
},
{
{0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC},
{0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC},
{0x00, 0x00, 0xf2, 0x07, 0x1f, 0x0d},
{0x00, 0x00, 0xf2, 0x00, 0x1f, 0x00}
}
};

static const struct
{
    int16_t  a[16];
    int16_t  b[16];
    uint16_t expect[6];
}
g_test_mm256_cmp_epi16_mask_data[] =
{
{
{0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC,
    0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC},
{0x3333, 0x3333 ,0x3333 ,0x3333, 0x3333, 0x3333, 0x3333, 0x3333,
    0x3333, 0x3333 ,0x3333 ,0x3333, 0x3333, 0x3333, 0x3333, 0x3333},
{0x0000, 0x0000, 0x0000, 0xffff, 0xffff, 0xffff}
},
{
{0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC,
    0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC},
{0x3333, 0x4CCC ,0x3333 ,0x3333, 0x3333, 0x3333, 0x3333, 0x3333,
    0x3333, 0x4CCC ,0x3333 ,0x3333, 0x3333, 0x3333, 0x3333, 0x3333},
{0x0202, 0x0000, 0x0202, 0xfdfd, 0xffff, 0xfdfd}
},
{
{0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC,
    0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC},
{0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC,
    0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC},
{0xffff, 0x00, 0xffff, 0x00, 0xffff, 0x00}
}
};

static const struct
{
    int16_t  a[16];
    int16_t  b[16];
    uint16_t mask[6];
    uint16_t expect[6];
}
g_test_mm256_mask_cmp_epi16_mask_data[] =
{
{
{0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC,
    0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC},
{0x3333, 0x3333 ,0x3333 ,0x3333, 0x3333, 0x3333, 0x3333, 0x3333,
    0x3333, 0x3333 ,0x3333 ,0x3333, 0x3333, 0x3333, 0x3333, 0x3333},
{0xffff, 0xffff, 0xffff, 0xf000, 0x1f00, 0x0000},
{0x0000, 0x0000, 0x0000, 0xf000, 0x1f00, 0x0000} // 0, 1, 2, 4, 5, 6
},
{
{0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC,
    0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC},
{0x3333, 0x4CCC ,0x3333 ,0x3333, 0x3333, 0x3333, 0x3333, 0x3333,
    0x3333, 0x4CCC ,0x3333 ,0x3333, 0x3333, 0x3333, 0x3333, 0x3333},
{0xf100, 0xffff, 0xf20f, 0x0700, 0x1f0f, 0x0d00},
{0x0000, 0x0000, 0x0202, 0x0500, 0x1f0f, 0x0d00}// 0, 1, 2, 4, 5, 6
},
{
{0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC,
    0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC},
{0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC,
    0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC},
{0x0000, 0x0000, 0xf200, 0x0700, 0x1f00, 0x0d00},
{0x0000, 0x0000, 0xf200, 0x0000, 0x1f00, 0x0000}
}
};

static const struct
{
    int16_t  a[32];
    int16_t  b[32];
    uint32_t expect[6];
}
g_test_mm512_cmp_epi16_mask_data[] =
{
{
{0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC,
    0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC,
    0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC,
    0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC},
{0x3333, 0x3333 ,0x3333 ,0x3333, 0x3333, 0x3333, 0x3333, 0x3333,
    0x3333, 0x3333 ,0x3333 ,0x3333, 0x3333, 0x3333, 0x3333, 0x3333,
    0x3333, 0x3333 ,0x3333 ,0x3333, 0x3333, 0x3333, 0x3333, 0x3333,
    0x3333, 0x3333 ,0x3333 ,0x3333, 0x3333, 0x3333, 0x3333, 0x3333},
{0x00000000, 0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0xffffffff}
},
{
{0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC,
    0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC,
    0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC,
    0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC},
{0x3333, 0x4CCC ,0x3333 ,0x3333, 0x3333, 0x3333, 0x3333, 0x3333,
    0x3333, 0x4CCC ,0x3333 ,0x3333, 0x3333, 0x3333, 0x3333, 0x3333,
    0x3333, 0x4CCC ,0x3333 ,0x3333, 0x3333, 0x3333, 0x3333, 0x3333,
    0x3333, 0x4CCC ,0x3333 ,0x3333, 0x3333, 0x3333, 0x3333, 0x3333},
{0x02020202, 0x00000000, 0x02020202, 0xfdfdfdfd, 0xffffffff, 0xfdfdfdfd}
},
{
{0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC,
    0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC,
    0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC,
    0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC},
{0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC,
    0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC,
    0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC,
    0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC},
{0xffffffff, 0x00000000, 0xffffffff, 0x00000000, 0xffffffff, 0x00000000}
}
};

static const struct
{
    int16_t  a[32];
    int16_t  b[32];
    uint32_t mask[6];
    uint32_t expect[6];
}
g_test_mm512_mask_cmp_epi16_mask_data[] =
{
{
{0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC,
    0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC,
    0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC,
    0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC},
{0x3333, 0x3333 ,0x3333 ,0x3333, 0x3333, 0x3333, 0x3333, 0x3333,
    0x3333, 0x3333 ,0x3333 ,0x3333, 0x3333, 0x3333, 0x3333, 0x3333,
    0x3333, 0x3333 ,0x3333 ,0x3333, 0x3333, 0x3333, 0x3333, 0x3333,
    0x3333, 0x3333 ,0x3333 ,0x3333, 0x3333, 0x3333, 0x3333, 0x3333},
{0xffff0000, 0xffff0000, 0xffff0000, 0xf0000000, 0x1f000000, 0x00000000},
{0x00000000, 0x00000000, 0x00000000, 0xf0000000, 0x1f000000, 0x00000000}// 0, 1, 2, 4, 5, 6
},
{
{0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC,
    0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC,
    0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC,
    0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC},
{0x3333, 0x4CCC ,0x3333 ,0x3333, 0x3333, 0x3333, 0x3333, 0x3333,
    0x3333, 0x4CCC ,0x3333 ,0x3333, 0x3333, 0x3333, 0x3333, 0x3333,
    0x3333, 0x4CCC ,0x3333 ,0x3333, 0x3333, 0x3333, 0x3333, 0x3333,
    0x3333, 0x4CCC ,0x3333 ,0x3333, 0x3333, 0x3333, 0x3333, 0x3333},
{0xf1000000, 0xffff0000, 0xf20f0000, 0x07000000, 0x1f0f0000, 0x0d000000},
{0x00000000, 0x00000000, 0x02020000, 0x05000000, 0x1f0f0000, 0x0d000000} // 0, 1, 2, 4, 5, 6
},
{
{0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC,
    0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC,
    0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC,
    0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC},
{0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC,
    0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC,
    0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC,
    0x4CCC, 0x4CCC ,0x4CCC ,0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC, 0x4CCC},
{0x00000000, 0x00000000, 0xf2000000, 0x07000000, 0x1f000000, 0x0d000000},
{0x00000000, 0x00000000, 0xf2000000, 0x00000000, 0x1f000000, 0x00000000}
}
};

static const struct
{
    int32_t a[4];
    int32_t b[4];
    uint8_t expect[6];
}
g_test_mm_cmp_epi32_mask_data[] =
{
{
{0x4CCCCCCC, 0x4CCCCCCC, 0x4CCCCCCC, 0x4CCCCCCC},
{0x33333333, 0x33333333 ,0x33333333 ,0x33333333},
{0x00, 0x00, 0x00, 0x0f, 0x0f, 0x0f}
},
{
{0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC},
{0x33333333, 0x4CCCCCCC ,0x33333333 ,0x33333333},
{0x02, 0x00, 0x02, 0x0d, 0x0f, 0x0d}
},
{
{0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC},
{0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC},
{0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00}
}
};

static const struct
{
    int32_t a[4];
    int32_t b[4];
    uint8_t mask[6];
    uint8_t expect[6];
}
g_test_mm_mask_cmp_epi32_mask_data[] =
{
{
{0x4CCCCCCC, 0x4CCCCCCC, 0x4CCCCCCC, 0x4CCCCCCC},
{0x33333333, 0x33333333 ,0x33333333 ,0x33333333},
{0x0f, 0x0f, 0x0f, 0x00, 0x03, 0x00},
{0x00, 0x00, 0x00, 0x00, 0x03, 0x00} // 0, 1, 2, 4, 5, 6
},
{
{0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC},
{0x33333333, 0x4CCCCCCC ,0x33333333 ,0x33333333},
{0x01, 0x0f, 0x02, 0x07, 0x0f, 0x0d},
{0x00, 0x00, 0x02, 0x05, 0x0f, 0x0d} // 0, 1, 2, 4, 5, 6
},
{
{0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC},
{0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC},
{0x00, 0x00, 0x02, 0x07, 0x0f, 0x0d},
{0x00, 0x00, 0x02, 0x00, 0x0f, 0x00}
}
};

static const struct
{
    int32_t  a[8];
    int32_t  b[8];
    uint8_t  expect[6];
}
g_test_mm256_cmp_epi32_mask_data[] =
{
{
{0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC,
    0x4CCCCCCC, 0x4CCCCCCC, 0x4CCCCCCC, 0x4CCCCCCC},
{0x33333333, 0x33333333 ,0x33333333 ,0x33333333,
    0x33333333, 0x33333333, 0x33333333, 0x33333333},
{0x00, 0x00, 0x00, 0xff, 0xff, 0xff}
},
{
{0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC,
    0x4CCCCCCC, 0x4CCCCCCC, 0x4CCCCCCC, 0x4CCCCCCC},
{0x33333333, 0x4CCCCCCC ,0x33333333 ,0x33333333,
    0x33333333, 0x33333333, 0x33333333, 0x33333333},
{0x02, 0x00, 0x02, 0xfd, 0xff, 0xfd}
},
{
{0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC,
    0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC},
{0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC,
    0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC},
{0xff, 0x00, 0xff, 0x00, 0xff, 0x00}
}
};

static const struct
{
    int32_t  a[8];
    int32_t  b[8];
    uint8_t mask[6];
    uint8_t expect[6];
}
g_test_mm256_mask_cmp_epi32_mask_data[] =
{
{
{0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC,
    0x4CCCCCCC, 0x4CCCCCCC, 0x4CCCCCCC, 0x4CCCCCCC},
{0x33333333, 0x33333333 ,0x33333333 ,0x33333333,
    0x33333333, 0x33333333, 0x33333333, 0x33333333},
{0xff, 0xff, 0xff, 0xf0, 0x1f, 0x00},
{0x00, 0x00, 0x00, 0xf0, 0x1f, 0x00} // 0, 1, 2, 4, 5, 6
},
{
{0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC,
    0x4CCCCCCC, 0x4CCCCCCC, 0x4CCCCCCC, 0x4CCCCCCC},
{0x33333333, 0x4CCCCCCC ,0x33333333 ,0x33333333,
    0x33333333, 0x33333333, 0x33333333, 0x33333333},
{0xf1, 0xff, 0xf2, 0x07, 0x1f, 0x0d},
{0x00, 0x00, 0x02, 0x05, 0x1f, 0x0d} // 0, 1, 2, 4, 5, 6
},
{
{0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC,
    0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC},
{0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC,
    0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC},
{0x00, 0x00, 0xf2, 0x07, 0x1f, 0x0d},
{0x00, 0x00, 0xf2, 0x00, 0x1f, 0x00}
}
};

static const struct
{
    int32_t  a[16];
    int32_t  b[16];
    uint16_t expect[6];
}
g_test_mm512_cmp_epi32_mask_data[] =
{
{
{0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC,
    0x4CCCCCCC, 0x4CCCCCCC, 0x4CCCCCCC, 0x4CCCCCCC,
    0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC,
    0x4CCCCCCC, 0x4CCCCCCC, 0x4CCCCCCC, 0x4CCCCCCC},
{0x33333333, 0x33333333 ,0x33333333 ,0x33333333,
    0x33333333, 0x33333333, 0x33333333, 0x33333333,
    0x33333333, 0x33333333 ,0x33333333 ,0x33333333,
    0x33333333, 0x33333333, 0x33333333, 0x33333333},
{0x0000, 0x0000, 0x0000, 0xffff, 0xffff, 0xffff}
},
{
{0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC,
    0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC,
    0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC,
    0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC},
{0x33333333, 0x4CCCCCCC ,0x33333333 ,0x33333333,
    0x33333333, 0x4CCCCCCC ,0x33333333 ,0x33333333,
    0x33333333, 0x4CCCCCCC ,0x33333333 ,0x33333333,
    0x33333333, 0x4CCCCCCC ,0x33333333 ,0x33333333},
{0x2222, 0x0000, 0x2222, 0xdddd, 0xffff, 0xdddd}
},
{
{0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC,
    0x4CCCCCCC, 0x4CCCCCCC, 0x4CCCCCCC, 0x4CCCCCCC,
    0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC,
    0x4CCCCCCC, 0x4CCCCCCC, 0x4CCCCCCC, 0x4CCCCCCC},
{0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC,
    0x4CCCCCCC, 0x4CCCCCCC, 0x4CCCCCCC, 0x4CCCCCCC,
    0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC,
    0x4CCCCCCC, 0x4CCCCCCC, 0x4CCCCCCC, 0x4CCCCCCC},
{0xffff, 0x0000, 0xffff, 0x0000, 0xffff, 0x0000}
}
};

static const struct
{
    int32_t  a[16];
    int32_t  b[16];
    uint16_t mask[6];
    uint16_t expect[6];
}
g_test_mm512_mask_cmp_epi32_mask_data[] =
{
{
{0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC,
    0x4CCCCCCC, 0x4CCCCCCC, 0x4CCCCCCC, 0x4CCCCCCC,
    0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC,
    0x4CCCCCCC, 0x4CCCCCCC, 0x4CCCCCCC, 0x4CCCCCCC},
{0x33333333, 0x33333333 ,0x33333333 ,0x33333333,
    0x33333333, 0x33333333, 0x33333333, 0x33333333,
    0x33333333, 0x33333333 ,0x33333333 ,0x33333333,
    0x33333333, 0x33333333, 0x33333333, 0x33333333},
{0xffff, 0xffff, 0xffff, 0xf000, 0x1f00, 0x0000},
{0x0000, 0x0000, 0x0000, 0xf000, 0x1f00, 0x0000} // 0, 1, 2, 4, 5, 6
},
{
{0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC,
    0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC,
    0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC,
    0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC},
{0x33333333, 0x4CCCCCCC ,0x33333333 ,0x33333333,
    0x33333333, 0x4CCCCCCC ,0x33333333 ,0x33333333,
    0x33333333, 0x4CCCCCCC ,0x33333333 ,0x33333333,
    0x33333333, 0x4CCCCCCC ,0x33333333 ,0x33333333},
{0xf100, 0xffff, 0xf20f, 0x0700, 0x1f0f, 0x0d00},
{0x2000, 0x0000, 0x2202, 0x0500, 0x1f0f, 0x0d00} // 0, 1, 2, 4, 5, 6
},
{
{0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC,
    0x4CCCCCCC, 0x4CCCCCCC, 0x4CCCCCCC, 0x4CCCCCCC,
    0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC,
    0x4CCCCCCC, 0x4CCCCCCC, 0x4CCCCCCC, 0x4CCCCCCC},
{0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC,
    0x4CCCCCCC, 0x4CCCCCCC, 0x4CCCCCCC, 0x4CCCCCCC,
    0x4CCCCCCC, 0x4CCCCCCC ,0x4CCCCCCC ,0x4CCCCCCC,
    0x4CCCCCCC, 0x4CCCCCCC, 0x4CCCCCCC, 0x4CCCCCCC},
{0x0000, 0x0000, 0xf200, 0x0700, 0x1f00, 0x0d00},
{0x0000, 0x0000, 0xf200, 0x0000, 0x1f00, 0x0000}
}
};

static const struct
{
    int64_t  a[2];
    int64_t  b[2];
    uint8_t  expect[6];
}
g_test_mm_cmp_epi64_mask_data[] =
{
{
{0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC},
{0x3333333333333333, 0x3333333333333333},
{0x00, 0x00, 0x00, 0x03, 0x03, 0x03}
},
{
{0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC},
{0x3333333333333333, 0x4CCCCCCCCCCCCCCC},
{0x02, 0x00, 0x02, 0x01, 0x03, 0x01}
},
{
{0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC },
{0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC },
{0x03, 0x00, 0x03, 0x00, 0x03, 0x00}
}
};

// 6-11
static const struct
{
    int64_t  a[2];
    int64_t  b[2];
    uint8_t  m;
    uint8_t  expect[6];
}
g_test_mm_mask_cmp_epi64_mask_data[] =
{
{
{0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC},
{0x3333333333333333, 0x3333333333333333},
0x0f,
{0x00, 0x00, 0x00, 0x03, 0x03, 0x03}
},
{
{0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC},
{0x3333333333333333, 0x4CCCCCCCCCCCCCCC},
0x0f,
{0x02, 0x00, 0x02, 0x01, 0x03, 0x01}
},
{
{0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC },
{0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC },
0x0f,
{0x03, 0x00, 0x03, 0x00, 0x03, 0x00}
}
};

static const struct
{
    int64_t  a[4];
    int64_t  b[4];
    uint8_t  expect[6];
}
g_test_mm256_cmp_epi64_mask_data[] =
{
{
{0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC},
{0x3333333333333333, 0x3333333333333333, 0x3333333333333333, 0x3333333333333333},
{0x00, 0x00, 0x00, 0x0f, 0x0f, 0x0f}
},
{
{0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC},
{0x3333333333333333, 0x4CCCCCCCCCCCCCCC, 0x3333333333333333, 0x4CCCCCCCCCCCCCCC},
{0x0a, 0x00, 0x0a, 0x05, 0x0f, 0x05}
},
{
{0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC},
{0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC},
{0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00}
}
};

static const struct
{
    int64_t  a[4];
    int64_t  b[4];
    uint8_t  m;
    uint8_t  expect[6];
}
g_test_mm256_mask_cmp_epi64_mask_data[] =
{
{
{0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC},
{0x3333333333333333, 0x3333333333333333, 0x3333333333333333, 0x3333333333333333},
0x04,
{0x00, 0x00, 0x00, 0x04, 0x04, 0x04}
},
{
{0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC},
{0x3333333333333333, 0x4CCCCCCCCCCCCCCC, 0x3333333333333333, 0x4CCCCCCCCCCCCCCC},
0x0f,
{0x0a, 0x00, 0x0a, 0x05, 0x0f, 0x05}
},
{
{0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC},
{0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC},
0x02,
{0x02, 0x00, 0x02, 0x00, 0x02, 0x00}
}
};

static const struct
{
    int64_t  a[8];
    int64_t  b[8];
    uint8_t  expect[6];
}
g_test_mm512_cmp_epi64_mask_data[] =
{
{
{0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC,
    0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC},
{0x3333333333333333, 0x3333333333333333, 0x3333333333333333, 0x3333333333333333,
    0x3333333333333333, 0x3333333333333333, 0x3333333333333333, 0x3333333333333333},
{0x00, 0x00, 0x00, 0xff, 0xff, 0xff}
},
{
{0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC,
    0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC},
{0x3333333333333333, 0x4CCCCCCCCCCCCCCC, 0x3333333333333333, 0x4CCCCCCCCCCCCCCC,
    0x3333333333333333, 0x4CCCCCCCCCCCCCCC, 0x3333333333333333, 0x4CCCCCCCCCCCCCCC},
{0xaa, 0x00, 0xaa, 0x55, 0xff, 0x55}
},
{
{0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC,
    0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC},
{0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC,
    0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC, 0x4CCCCCCCCCCCCCCC},
{0xff, 0x00, 0xff, 0x00, 0xff, 0x00}
}
};

static const struct
{
    uint8_t  a[16];
    uint8_t  b[16];
    uint16_t expect[6];
}
g_test_mm_cmp_epu8_mask_data[] =
{
{
{0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C},
{0x33, 0x33 ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x33 ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33},
{0x00, 0x00, 0x00, 0xffff, 0xffff, 0xffff}
},
{
{0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C},
{0x33, 0x4C ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x4C ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33},
{0x0202, 0x00, 0x0202, 0xfdfd, 0xffff, 0xfdfd}
},
{
{0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C},
{0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C},
{0xffff, 0x00, 0xffff, 0x00, 0xffff, 0x00}
}
};
static const struct
{
    uint8_t  a[16];
    uint8_t  b[16];
    uint16_t m;
    uint16_t expect[6];
}
g_test_mm_mask_cmp_epu8_mask_data[] =
{
{
{0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C},
{0x33, 0x33 ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x33 ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33},
0xffff,
{0x00, 0x00, 0x00, 0xffff, 0xffff, 0xffff}
},
{
{0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C},
{0x33, 0x4C ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x4C ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33},
0xffff,
{0x0202, 0x00, 0x0202, 0xfdfd, 0xffff, 0xfdfd}
},
{
{0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C},
{0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C},
0xffff,
{0xffff, 0x00, 0xffff, 0x00, 0xffff, 0x00}
}
};
static const struct
{
    uint8_t  a[32];
    uint8_t  b[32];
    uint32_t expect[6];
}
g_test_mm256_cmp_epu8_mask_data[] =
{
{
{0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C},
{0x33, 0x33 ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x33 ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x33 ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x33 ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33},
{0x00, 0x00, 0x00, 0xffffffff, 0xffffffff, 0xffffffff}
},
{
{0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C},
{0x33, 0x4C ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x4C ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x4C ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x4C ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33},
{0x02020202, 0x00, 0x02020202, 0xfdfdfdfd, 0xffffffff, 0xfdfdfdfd}
},
{
{0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C},
{0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C},
{0xffffffff, 0x00, 0xffffffff, 0x00, 0xffffffff, 0x00}
}
};

static const struct
{
    uint8_t  a[32];
    uint8_t  b[32];
    uint32_t m;
    uint32_t expect[6];
}
g_test_mm256_mask_cmp_epu8_mask_data[] =
{
{
{0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C},
{0x33, 0x33 ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x33 ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x33 ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x33 ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33},
0x1f000000,
{0x00, 0x00, 0x00, 0x1f000000, 0x1f000000, 0x1f000000}
},
{
{0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C},
{0x33, 0x4C ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x4C ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x4C ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x4C ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33},
0xf00f000f,
{0x00020002, 0x00, 0x00020002, 0xf00d000d, 0xf00f000f, 0xf00d000d}
},
{
{0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C},
{0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C},
0x0,
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
}
};
static const struct
{
    uint8_t  a[64];
    uint8_t  b[64];
    uint64_t expect[6];
}
g_test_mm512_cmp_epu8_mask_data[] =
{
{
{0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C},
{0x33, 0x33 ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x33 ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x33 ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x33 ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x33 ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x33 ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x33 ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x33 ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33},
{0x00, 0x00, 0x00, 0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff}
},
{
{0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C},
{0x33, 0x4C ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x4C ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x4C ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x4C ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x4C ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x4C ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x4C ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x4C ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33},
{0x0202020202020202, 0x00, 0x0202020202020202,
    0xfdfdfdfdfdfdfdfd, 0xffffffffffffffff, 0xfdfdfdfdfdfdfdfd}
},
{
{0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C},
{0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C},
{0xffffffffffffffff, 0x00, 0xffffffffffffffff, 0x00, 0xffffffffffffffff, 0x00}
}
};
static const struct
{
    uint8_t  a[64];
    uint8_t  b[64];
    uint64_t m;
    uint64_t expect[6];
}
g_test_mm512_mask_cmp_epu8_mask_data[] =
{
{
{0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C},
{0x33, 0x33 ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x33 ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x33 ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x33 ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x33 ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x33 ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x33 ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x33 ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33},
0x0f,
{0x00, 0x00, 0x00, 0x0f, 0x0f, 0x0f}
},
{
{0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C},
{0x33, 0x4C ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x4C ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x4C ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x4C ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x4C ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x4C ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x4C ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x4C ,0x33 ,0x33, 0x33, 0x33, 0x33, 0x33},
0xf0f,
{0x202, 0x00, 0x202,0xd0d, 0xf0f, 0xd0d}
},
{
{0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C},
{0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
    0x4C, 0x4C ,0x4C ,0x4C, 0x4C, 0x4C, 0x4C, 0x4C},
0x00,
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
}
};

static const struct
{
    double   a[2];
    double   b[2];
    const struct
    {
        int imm;
        uint64_t e[2];
    } expect[32];
}
g_test_mm_cmp_pd_data[] =
{

{
{0.0/0.0, 0.0/0.0},
{1.1, 1.1},

{
{0, {0x0, 0x0}},
{1, {0x0, 0x0}},
{2, {0x0, 0x0}},
{3, {0xffffffffffffffff, 0xffffffffffffffff}},
{4, {0xffffffffffffffff, 0xffffffffffffffff}},
{5, {0xffffffffffffffff, 0xffffffffffffffff}},
{6, {0xffffffffffffffff, 0xffffffffffffffff}},
{7, {0x0, 0x0}},
{8, {0xffffffffffffffff, 0xffffffffffffffff}},
{9, {0xffffffffffffffff, 0xffffffffffffffff}},
{10, {0xffffffffffffffff, 0xffffffffffffffff}},
{11, {0x0, 0x0}},
{12, {0x0, 0x0}},
{13, {0x0, 0x0}},
{14, {0x0, 0x0}},
{15, {0xffffffffffffffff, 0xffffffffffffffff}},
{16, {0x0, 0x0}},
{17, {0x0, 0x0}},
{18, {0x0, 0x0}},
{19, {0xffffffffffffffff, 0xffffffffffffffff}},
{20, {0xffffffffffffffff, 0xffffffffffffffff}},
{21, {0xffffffffffffffff, 0xffffffffffffffff}},
{22, {0xffffffffffffffff, 0xffffffffffffffff}},
{23, {0x0, 0x0}},
{24, {0xffffffffffffffff, 0xffffffffffffffff}},
{25, {0xffffffffffffffff, 0xffffffffffffffff}},
{26, {0xffffffffffffffff, 0xffffffffffffffff}},
{27, {0x0, 0x0}},
{28, {0x0, 0x0}},
{29, {0x0, 0x0}},
{30, {0x0, 0x0}},
{31, {0xffffffffffffffff, 0xffffffffffffffff}}
}
},

{
{1.0, 1.1},
{1.0, 1.1},

{
{0, {0xffffffffffffffff, 0xffffffffffffffff}},
{1, {0x0, 0x0}},
{2, {0xffffffffffffffff, 0xffffffffffffffff}},
{3, {0x0, 0x0}},
{4, {0x0, 0x0}},
{5, {0xffffffffffffffff, 0xffffffffffffffff}},
{6, {0x0, 0x0}},
{7, {0xffffffffffffffff, 0xffffffffffffffff}},
{8, {0xffffffffffffffff, 0xffffffffffffffff}},
{9, {0x0, 0x0}},
{10, {0xffffffffffffffff, 0xffffffffffffffff}},
{11, {0x0, 0x0}},
{12, {0x0, 0x0}},
{13, {0xffffffffffffffff, 0xffffffffffffffff}},
{14, {0x0, 0x0}},
{15, {0xffffffffffffffff, 0xffffffffffffffff}},
{16, {0xffffffffffffffff, 0xffffffffffffffff}},
{17, {0x0, 0x0}},
{18, {0xffffffffffffffff, 0xffffffffffffffff}},
{19, {0x0, 0x0}},
{20, {0x0, 0x0}},
{21, {0xffffffffffffffff, 0xffffffffffffffff}},
{22, {0x0, 0x0}},
{23, {0xffffffffffffffff, 0xffffffffffffffff}},
{24, {0xffffffffffffffff, 0xffffffffffffffff}},
{25, {0x0, 0x0}},
{26, {0xffffffffffffffff, 0xffffffffffffffff}},
{27, {0x0, 0x0}},
{28, {0x0, 0x0}},
{29, {0xffffffffffffffff, 0xffffffffffffffff}},
{30, {0x0, 0x0}},
{31, {0xffffffffffffffff, 0xffffffffffffffff}}
}
},

{
{0.0/0.0, 0.0/0.0},
{0.0/0.0, 0.0/0.0},
{
{0, {0x0, 0x0}},
{1, {0x0, 0x0}},
{2, {0x0, 0x0}},
{3, {0xffffffffffffffff, 0xffffffffffffffff}},
{4, {0xffffffffffffffff, 0xffffffffffffffff}},
{5, {0xffffffffffffffff, 0xffffffffffffffff}},
{6, {0xffffffffffffffff, 0xffffffffffffffff}},
{7, {0x0, 0x0}},
{8, {0xffffffffffffffff, 0xffffffffffffffff}},
{9, {0xffffffffffffffff, 0xffffffffffffffff}},
{10, {0xffffffffffffffff, 0xffffffffffffffff}},
{11, {0x0, 0x0}},
{12, {0x0, 0x0}},
{13, {0x0, 0x0}},
{14, {0x0, 0x0}},
{15, {0xffffffffffffffff, 0xffffffffffffffff}},
{16, {0x0, 0x0}},
{17, {0x0, 0x0}},
{18, {0x0, 0x0}},
{19, {0xffffffffffffffff, 0xffffffffffffffff}},
{20, {0xffffffffffffffff, 0xffffffffffffffff}},
{21, {0xffffffffffffffff, 0xffffffffffffffff}},
{22, {0xffffffffffffffff, 0xffffffffffffffff}},
{23, {0x0, 0x0}},
{24, {0xffffffffffffffff, 0xffffffffffffffff}},
{25, {0xffffffffffffffff, 0xffffffffffffffff}},
{26, {0xffffffffffffffff, 0xffffffffffffffff}},
{27, {0x0, 0x0}},
{28, {0x0, 0x0}},
{29, {0x0, 0x0}},
{30, {0x0, 0x0}},
{31, {0xffffffffffffffff, 0xffffffffffffffff}}
}
},

{
{0.0, 0.0},
{1.0, 1.0},
{
{0, {0x0, 0x0}},
{1, {0xffffffffffffffff, 0xffffffffffffffff}},
{2, {0xffffffffffffffff, 0xffffffffffffffff}},
{3, {0x0, 0x0}},
{4, {0xffffffffffffffff, 0xffffffffffffffff}},
{5, {0x0, 0x0}},
{6, {0x0, 0x0}},
{7, {0xffffffffffffffff, 0xffffffffffffffff}},
{8, {0x0, 0x0}},
{9, {0xffffffffffffffff, 0xffffffffffffffff}},
{10, {0xffffffffffffffff, 0xffffffffffffffff}},
{11, {0x0, 0x0}},
{12, {0xffffffffffffffff, 0xffffffffffffffff}},
{13, {0x0, 0x0}},
{14, {0x0, 0x0}},
{15, {0xffffffffffffffff, 0xffffffffffffffff}},
{16, {0x0, 0x0}},
{17, {0xffffffffffffffff, 0xffffffffffffffff}},
{18, {0xffffffffffffffff, 0xffffffffffffffff}},
{19, {0x0, 0x0}},
{20, {0xffffffffffffffff, 0xffffffffffffffff}},
{21, {0x0, 0x0}},
{22, {0x0, 0x0}},
{23, {0xffffffffffffffff, 0xffffffffffffffff}},
{24, {0x0, 0x0}},
{25, {0xffffffffffffffff, 0xffffffffffffffff}},
{26, {0xffffffffffffffff, 0xffffffffffffffff}},
{27, {0x0, 0x0}},
{28, {0xffffffffffffffff, 0xffffffffffffffff}},
{29, {0x0, 0x0}},
{30, {0x0, 0x0}},
{31, {0xffffffffffffffff, 0xffffffffffffffff}}
}
},

{
{1.0, 1.0},
{0.0, 0.0},
{
{0, {0x0, 0x0}},
{1, {0x0, 0x0}},
{2, {0x0, 0x0}},
{3, {0x0, 0x0}},
{4, {0xffffffffffffffff, 0xffffffffffffffff}},
{5, {0xffffffffffffffff, 0xffffffffffffffff}},
{6, {0xffffffffffffffff, 0xffffffffffffffff}},
{7, {0xffffffffffffffff, 0xffffffffffffffff}},
{8, {0x0, 0x0}},
{9, {0x0, 0x0}},
{10, {0x0, 0x0}},
{11, {0x0, 0x0}},
{12, {0xffffffffffffffff, 0xffffffffffffffff}},
{13, {0xffffffffffffffff, 0xffffffffffffffff}},
{14, {0xffffffffffffffff, 0xffffffffffffffff}},
{15, {0xffffffffffffffff, 0xffffffffffffffff}},
{16, {0x0, 0x0}},
{17, {0x0, 0x0}},
{18, {0x0, 0x0}},
{19, {0x0, 0x0}},
{20, {0xffffffffffffffff, 0xffffffffffffffff}},
{21, {0xffffffffffffffff, 0xffffffffffffffff}},
{22, {0xffffffffffffffff, 0xffffffffffffffff}},
{23, {0xffffffffffffffff, 0xffffffffffffffff}},
{24, {0x0, 0x0}},
{25, {0x0, 0x0}},
{26, {0x0, 0x0}},
{27, {0x0, 0x0}},
{28, {0xffffffffffffffff, 0xffffffffffffffff}},
{29, {0xffffffffffffffff, 0xffffffffffffffff}},
{30, {0xffffffffffffffff, 0xffffffffffffffff}},
{31, {0xffffffffffffffff, 0xffffffffffffffff}}
}
},

{
{1.0, 0.0},
{0.0, 1.0},
{
{0, {0x0, 0x0}},
{1, {0x0, 0xffffffffffffffff}},
{2, {0x0, 0xffffffffffffffff}},
{3, {0x0, 0x0}},
{4, {0xffffffffffffffff, 0xffffffffffffffff}},
{5, {0xffffffffffffffff, 0x0}},
{6, {0xffffffffffffffff, 0x0}},
{7, {0xffffffffffffffff, 0xffffffffffffffff}},
{8, {0x0, 0x0}},
{9, {0x0, 0xffffffffffffffff}},
{10, {0x0, 0xffffffffffffffff}},
{11, {0x0, 0x0}},
{12, {0xffffffffffffffff, 0xffffffffffffffff}},
{13, {0xffffffffffffffff, 0x0}},
{14, {0xffffffffffffffff, 0x0}},
{15, {0xffffffffffffffff, 0xffffffffffffffff}},
{16, {0x0, 0x0}},
{17, {0x0, 0xffffffffffffffff}},
{18, {0x0, 0xffffffffffffffff}},
{19, {0x0, 0x0}},
{20, {0xffffffffffffffff, 0xffffffffffffffff}},
{21, {0xffffffffffffffff, 0x0}},
{22, {0xffffffffffffffff, 0x0}},
{23, {0xffffffffffffffff, 0xffffffffffffffff}},
{24, {0x0, 0x0}},
{25, {0x0, 0xffffffffffffffff}},
{26, {0x0, 0xffffffffffffffff}},
{27, {0x0, 0x0}},
{28, {0xffffffffffffffff, 0xffffffffffffffff}},
{29, {0xffffffffffffffff, 0x0}},
{30, {0xffffffffffffffff, 0x0}},
{31, {0xffffffffffffffff, 0xffffffffffffffff}}
}
},

{
{0.0, 1.0},
{1.0, 0.0},
{
{0, {0x0, 0x0}},
{1, {0xffffffffffffffff, 0x0}},
{2, {0xffffffffffffffff, 0x0}},
{3, {0x0, 0x0}},
{4, {0xffffffffffffffff, 0xffffffffffffffff}},
{5, {0x0, 0xffffffffffffffff}},
{6, {0x0, 0xffffffffffffffff}},
{7, {0xffffffffffffffff, 0xffffffffffffffff}},
{8, {0x0, 0x0}},
{9, {0xffffffffffffffff, 0x0}},
{10, {0xffffffffffffffff, 0x0}},
{11, {0x0, 0x0}},
{12, {0xffffffffffffffff, 0xffffffffffffffff}},
{13, {0x0, 0xffffffffffffffff}},
{14, {0x0, 0xffffffffffffffff}},
{15, {0xffffffffffffffff, 0xffffffffffffffff}},
{16, {0x0, 0x0}},
{17, {0xffffffffffffffff, 0x0}},
{18, {0xffffffffffffffff, 0x0}},
{19, {0x0, 0x0}},
{20, {0xffffffffffffffff, 0xffffffffffffffff}},
{21, {0x0, 0xffffffffffffffff}},
{22, {0x0, 0xffffffffffffffff}},
{23, {0xffffffffffffffff, 0xffffffffffffffff}},
{24, {0x0, 0x0}},
{25, {0xffffffffffffffff, 0x0}},
{26, {0xffffffffffffffff, 0x0}},
{27, {0x0, 0x0}},
{28, {0xffffffffffffffff, 0xffffffffffffffff}},
{29, {0x0, 0xffffffffffffffff}},
{30, {0x0, 0xffffffffffffffff}},
{31, {0xffffffffffffffff, 0xffffffffffffffff}}
}
},

{
{1.0, 0.0},
{1.0, 0.0},
{
{0, {0xffffffffffffffff, 0xffffffffffffffff}},
{1, {0x0, 0x0}},
{2, {0xffffffffffffffff, 0xffffffffffffffff}},
{3, {0x0, 0x0}},
{4, {0x0, 0x0}},
{5, {0xffffffffffffffff, 0xffffffffffffffff}},
{6, {0x0, 0x0}},
{7, {0xffffffffffffffff, 0xffffffffffffffff}},
{8, {0xffffffffffffffff, 0xffffffffffffffff}},
{9, {0x0, 0x0}},
{10, {0xffffffffffffffff, 0xffffffffffffffff}},
{11, {0x0, 0x0}},
{12, {0x0, 0x0}},
{13, {0xffffffffffffffff, 0xffffffffffffffff}},
{14, {0x0, 0x0}},
{15, {0xffffffffffffffff, 0xffffffffffffffff}},
{16, {0xffffffffffffffff, 0xffffffffffffffff}},
{17, {0x0, 0x0}},
{18, {0xffffffffffffffff, 0xffffffffffffffff}},
{19, {0x0, 0x0}},
{20, {0x0, 0x0}},
{21, {0xffffffffffffffff, 0xffffffffffffffff}},
{22, {0x0, 0x0}},
{23, {0xffffffffffffffff, 0xffffffffffffffff}},
{24, {0xffffffffffffffff, 0xffffffffffffffff}},
{25, {0x0, 0x0}},
{26, {0xffffffffffffffff, 0xffffffffffffffff}},
{27, {0x0, 0x0}},
{28, {0x0, 0x0}},
{29, {0xffffffffffffffff, 0xffffffffffffffff}},
{30, {0x0, 0x0}},
{31, {0xffffffffffffffff, 0xffffffffffffffff}},
}
},

{
{0.0, 1.0},
{0.0, 1.0},
{
{0, {0xffffffffffffffff, 0xffffffffffffffff}},
{1, {0x0, 0x0}},
{2, {0xffffffffffffffff, 0xffffffffffffffff}},
{3, {0x0, 0x0}},
{4, {0x0, 0x0}},
{5, {0xffffffffffffffff, 0xffffffffffffffff}},
{6, {0x0, 0x0}},
{7, {0xffffffffffffffff, 0xffffffffffffffff}},
{8, {0xffffffffffffffff, 0xffffffffffffffff}},
{9, {0x0, 0x0}},
{10, {0xffffffffffffffff, 0xffffffffffffffff}},
{11, {0x0, 0x0}},
{12, {0x0, 0x0}},
{13, {0xffffffffffffffff, 0xffffffffffffffff}},
{14, {0x0, 0x0}},
{15, {0xffffffffffffffff, 0xffffffffffffffff}},
{16, {0xffffffffffffffff, 0xffffffffffffffff}},
{17, {0x0, 0x0}},
{18, {0xffffffffffffffff, 0xffffffffffffffff}},
{19, {0x0, 0x0}},
{20, {0x0, 0x0}},
{21, {0xffffffffffffffff, 0xffffffffffffffff}},
{22, {0x0, 0x0}},
{23, {0xffffffffffffffff, 0xffffffffffffffff}},
{24, {0xffffffffffffffff, 0xffffffffffffffff}},
{25, {0x0, 0x0}},
{26, {0xffffffffffffffff, 0xffffffffffffffff}},
{27, {0x0, 0x0}},
{28, {0x0, 0x0}},
{29, {0xffffffffffffffff, 0xffffffffffffffff}},
{30, {0x0, 0x0}},
{31, {0xffffffffffffffff, 0xffffffffffffffff}}
}
},

{
{1.0, 1.0},
{0.0, 1.0},
{
{0, {0x0, 0xffffffffffffffff}},
{1, {0x0, 0x0}},
{2, {0x0, 0xffffffffffffffff}},
{3, {0x0, 0x0}},
{4, {0xffffffffffffffff, 0x0}},
{5, {0xffffffffffffffff, 0xffffffffffffffff}},
{6, {0xffffffffffffffff, 0x0}},
{7, {0xffffffffffffffff, 0xffffffffffffffff}},
{8, {0x0, 0xffffffffffffffff}},
{9, {0x0, 0x0}},
{10, {0x0, 0xffffffffffffffff}},
{11, {0x0, 0x0}},
{12, {0xffffffffffffffff, 0x0}},
{13, {0xffffffffffffffff, 0xffffffffffffffff}},
{14, {0xffffffffffffffff, 0x0}},
{15, {0xffffffffffffffff, 0xffffffffffffffff}},
{16, {0x0, 0xffffffffffffffff}},
{17, {0x0, 0x0}},
{18, {0x0, 0xffffffffffffffff}},
{19, {0x0, 0x0}},
{20, {0xffffffffffffffff, 0x0}},
{21, {0xffffffffffffffff, 0xffffffffffffffff}},
{22, {0xffffffffffffffff, 0x0}},
{23, {0xffffffffffffffff, 0xffffffffffffffff}},
{24, {0x0, 0xffffffffffffffff}},
{25, {0x0, 0x0}},
{26, {0x0, 0xffffffffffffffff}},
{27, {0x0, 0x0}},
{28, {0xffffffffffffffff, 0x0}},
{29, {0xffffffffffffffff, 0xffffffffffffffff}},
{30, {0xffffffffffffffff, 0x0}},
{31, {0xffffffffffffffff, 0xffffffffffffffff}},
}
},

{
{1.0, -1.0},
{0.0, 1.0},
{
{0, {0x0, 0x0}},
{1, {0x0, 0xffffffffffffffff}},
{2, {0x0, 0xffffffffffffffff}},
{3, {0x0, 0x0}},
{4, {0xffffffffffffffff, 0xffffffffffffffff}},
{5, {0xffffffffffffffff, 0x0}},
{6, {0xffffffffffffffff, 0x0}},
{7, {0xffffffffffffffff, 0xffffffffffffffff}},
{8, {0x0, 0x0}},
{9, {0x0, 0xffffffffffffffff}},
{10, {0x0, 0xffffffffffffffff}},
{11, {0x0, 0x0}},
{12, {0xffffffffffffffff, 0xffffffffffffffff}},
{13, {0xffffffffffffffff, 0x0}},
{14, {0xffffffffffffffff, 0x0}},
{15, {0xffffffffffffffff, 0xffffffffffffffff}},
{16, {0x0, 0x0}},
{17, {0x0, 0xffffffffffffffff}},
{18, {0x0, 0xffffffffffffffff}},
{19, {0x0, 0x0}},
{20, {0xffffffffffffffff, 0xffffffffffffffff}},
{21, {0xffffffffffffffff, 0x0}},
{22, {0xffffffffffffffff, 0x0}},
{23, {0xffffffffffffffff, 0xffffffffffffffff}},
{24, {0x0, 0x0}},
{25, {0x0, 0xffffffffffffffff}},
{26, {0x0, 0xffffffffffffffff}},
{27, {0x0, 0x0}},
{28, {0xffffffffffffffff, 0xffffffffffffffff}},
{29, {0xffffffffffffffff, 0x0}},
{30, {0xffffffffffffffff, 0x0}},
{31, {0xffffffffffffffff, 0xffffffffffffffff}}
}
},

{
{1.0, -1.0},
{0.0, -1.0},
{
{0, {0x0, 0xffffffffffffffff}},
{1, {0x0, 0x0}},
{2, {0x0, 0xffffffffffffffff}},
{3, {0x0, 0x0}},
{4, {0xffffffffffffffff, 0x0}},
{5, {0xffffffffffffffff, 0xffffffffffffffff}},
{6, {0xffffffffffffffff, 0x0}},
{7, {0xffffffffffffffff, 0xffffffffffffffff}},
{8, {0x0, 0xffffffffffffffff}},
{9, {0x0, 0x0}},
{10, {0x0, 0xffffffffffffffff}},
{11, {0x0, 0x0}},
{12, {0xffffffffffffffff, 0x0}},
{13, {0xffffffffffffffff, 0xffffffffffffffff}},
{14, {0xffffffffffffffff, 0x0}},
{15, {0xffffffffffffffff, 0xffffffffffffffff}},
{16, {0x0, 0xffffffffffffffff}},
{17, {0x0, 0x0}},
{18, {0x0, 0xffffffffffffffff}},
{19, {0x0, 0x0}},
{20, {0xffffffffffffffff, 0x0}},
{21, {0xffffffffffffffff, 0xffffffffffffffff}},
{22, {0xffffffffffffffff, 0x0}},
{23, {0xffffffffffffffff, 0xffffffffffffffff}},
{24, {0x0, 0xffffffffffffffff}},
{25, {0x0, 0x0}},
{26, {0x0, 0xffffffffffffffff}},
{27, {0x0, 0x0}},
{28, {0xffffffffffffffff, 0x0}},
{29, {0xffffffffffffffff, 0xffffffffffffffff}},
{30, {0xffffffffffffffff, 0x0}},
{31, {0xffffffffffffffff, 0xffffffffffffffff}},
}
},

};

static const struct
{
    double   a[4];
    double   b[4];

    const struct
    {
        int imm;
        uint64_t e[4];
    } expect[32];
}
g_test_mm256_cmp_pd_data[] =
{
{
{0.0/0.0, 0.0/0.0, 0.0/0.0, 0.0/0.0},
{1.1, 1.1, 1.1, 1.1},

{
{0, {0x0, 0x0, 0x0, 0x0}},
{1, {0x0, 0x0, 0x0, 0x0}},
{2, {0x0, 0x0, 0x0, 0x0}},
{3, {0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff}},
{4, {0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff}},
{5, {0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff}},
{6, {0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff}},
{7, {0x0, 0x0, 0x0, 0x0}},
{8, {0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff}},
{9, {0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff}},
{10, {0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff}},
{11, {0x0, 0x0, 0x0, 0x0}},
{12, {0x0, 0x0, 0x0, 0x0}},
{13, {0x0, 0x0, 0x0, 0x0}},
{14, {0x0, 0x0, 0x0, 0x0}},
{15, {0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff}},
{16, {0x0, 0x0, 0x0, 0x0}},
{17, {0x0, 0x0, 0x0, 0x0}},
{18, {0x0, 0x0, 0x0, 0x0}},
{19, {0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff}},
{20, {0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff}},
{21, {0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff}},
{22, {0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff}},
{23, {0x0, 0x0, 0x0, 0x0}},
{24, {0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff}},
{25, {0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff}},
{26, {0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff}},
{27, {0x0, 0x0, 0x0, 0x0}},
{28, {0x0, 0x0, 0x0, 0x0}},
{29, {0x0, 0x0, 0x0, 0x0}},
{30, {0x0, 0x0, 0x0, 0x0}},
{31, {0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff}}
}
},

{
{1.0, -1.0, 1.0, -1.0},
{0.0, 1.0, 0.0, 1.0},
{
{0, {0x0, 0x0, 0x0, 0x0}},
{1, {0x0, 0xffffffffffffffff, 0x0, 0xffffffffffffffff}},
{2, {0x0, 0xffffffffffffffff, 0x0, 0xffffffffffffffff}},
{3, {0x0, 0x0, 0x0, 0x0}},
{4, {0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff}},
{5, {0xffffffffffffffff, 0x0, 0xffffffffffffffff, 0x0}},
{6, {0xffffffffffffffff, 0x0, 0xffffffffffffffff, 0x0}},
{7, {0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff}},
{8, {0x0, 0x0, 0x0, 0x0}},
{9, {0x0, 0xffffffffffffffff, 0x0, 0xffffffffffffffff}},
{10, {0x0, 0xffffffffffffffff, 0x0, 0xffffffffffffffff}},
{11, {0x0, 0x0, 0x0, 0x0}},
{12, {0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff}},
{13, {0xffffffffffffffff, 0x0, 0xffffffffffffffff, 0x0}},
{14, {0xffffffffffffffff, 0x0, 0xffffffffffffffff, 0x0}},
{15, {0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff}},
{16, {0x0, 0x0, 0x0, 0x0}},
{17, {0x0, 0xffffffffffffffff, 0x0, 0xffffffffffffffff}},
{18, {0x0, 0xffffffffffffffff, 0x0, 0xffffffffffffffff}},
{19, {0x0, 0x0,0x0, 0x0}},
{20, {0xffffffffffffffff, 0xffffffffffffffff,0xffffffffffffffff, 0xffffffffffffffff}},
{21, {0xffffffffffffffff, 0x0, 0xffffffffffffffff, 0x0}},
{22, {0xffffffffffffffff, 0x0, 0xffffffffffffffff, 0x0}},
{23, {0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff}},
{24, {0x0, 0x0, 0x0, 0x0}},
{25, {0x0, 0xffffffffffffffff, 0x0, 0xffffffffffffffff}},
{26, {0x0, 0xffffffffffffffff, 0x0, 0xffffffffffffffff}},
{27, {0x0, 0x0, 0x0, 0x0}},
{28, {0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff}},
{29, {0xffffffffffffffff, 0x0, 0xffffffffffffffff, 0x0}},
{30, {0xffffffffffffffff, 0x0, 0xffffffffffffffff, 0x0}},
{31, {0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff}}
}
}
};

static const struct
{
    double   a[2];
    double   b[2];

    uint8_t expect[32];
}
g_test_mm_cmp_pd_mask_data[] =
{
{
{0.0/0.0, 0.0/0.0},
{1.1, 1.1},

{
    0x0,
    0x0,
    0x0,
    0x03,
    0x03,
    0x03,
    0x03,
    0x0,
    0x03,
    0x03,
    0x03,
    0x0,
    0x0,
    0x0,
    0x0,
    0x03,
    0x0,
    0x0,
    0x0,
    0x03,
    0x03,
    0x03,
    0x03,
    0x0,
    0x03,
    0x03,
    0x03,
    0x0,
    0x0,
    0x0,
    0x0,
    0x03
}
},

{
{1.0, -1.0},
{0.0, 1.0},

{
    0x0,
    0x02,
    0x02,
    0x0,
    0x03,
    0x01,
    0x01,
    0x03,
    0x0,
    0x02,
    0x02,
    0x0,
    0x03,
    0x01,
    0x01,
    0x03,
    0x0,
    0x02,
    0x02,
    0x0,
    0x03,
    0x01,
    0x01,
    0x03,
    0x0,
    0x02,
    0x02,
    0x0,
    0x03,
    0x01,
    0x01,
    0x03
}
}
};

static const struct
{
    double   a[4];
    double   b[4];

    uint8_t expect[32];
}
g_test_mm256_cmp_pd_mask_data[] =
{
{
{0.0/0.0, 0.0/0.0, 0.0/0.0, 0.0/0.0},
{1.1, 1.1, 1.1, 1.1},

{
    0x0,
    0x0,
    0x0,
    0x0f,
    0x0f,
    0x0f,
    0x0f,
    0x0,
    0x0f,
    0x0f,
    0x0f,
    0x0,
    0x0,
    0x0,
    0x0,
    0x0f,
    0x0,
    0x0,
    0x0,
    0x0f,
    0x0f,
    0x0f,
    0x0f,
    0x0,
    0x0f,
    0x0f,
    0x0f,
    0x0,
    0x0,
    0x0,
    0x0,
    0x0f
}
},

{
{1.0, -1.0, 1.0, -1.0},
{0.0, 1.0, 0.0, 1.0},
{
    0x0,
    0x0a,
    0x0a,
    0x0,
    0x0f,
    0x05,
    0x05,
    0x0f,
    0x0,
    0x0a,
    0x0a,
    0x0,
    0x0f,
    0x05,
    0x05,
    0x0f,
    0x0,
    0x0a,
    0x0a,
    0x0,
    0x0f,
    0x05,
    0x05,
    0x0f,
    0x0,
    0x0a,
    0x0a,
    0x0,
    0x0f,
    0x05,
    0x05,
    0x0f
}
}
};

static const struct
{
    double   a[2];
    double   b[2];
    uint8_t  m;

    uint8_t expect[32];
}
g_test_mm_mask_cmp_pd_mask_data[] =
{
{
{0.0/0.0, 0.0/0.0},
{1.1, 1.1},
0x03,
{
    0x0,
    0x0,
    0x0,
    0x03,
    0x03,
    0x03,
    0x03,
    0x0,
    0x03,
    0x03,
    0x03,
    0x0,
    0x0,
    0x0,
    0x0,
    0x03,
    0x0,
    0x0,
    0x0,
    0x03,
    0x03,
    0x03,
    0x03,
    0x0,
    0x03,
    0x03,
    0x03,
    0x0,
    0x0,
    0x0,
    0x0,
    0x03
}
},

{
{1.0, -1.0},
{0.0, 1.0},
0x02,
{
    0x0,
    0x02,
    0x02,
    0x0,
    0x02,
    0x00,
    0x00,
    0x02,
    0x0,
    0x02,
    0x02,
    0x0,
    0x02,
    0x00,
    0x00,
    0x02,
    0x0,
    0x02,
    0x02,
    0x0,
    0x02,
    0x00,
    0x00,
    0x02,
    0x0,
    0x02,
    0x02,
    0x0,
    0x02,
    0x00,
    0x00,
    0x02
}
}
};

static const struct
{
    double   a[4];
    double   b[4];
    uint8_t  m;
    uint8_t expect[32];
}
g_test_mm256_mask_cmp_pd_mask_data[] =
{
{
{0.0/0.0, 0.0/0.0, 0.0/0.0, 0.0/0.0},
{1.1, 1.1, 1.1, 1.1},
0x0f,
{
    0x0,
    0x0,
    0x0,
    0x0f,
    0x0f,
    0x0f,
    0x0f,
    0x0,
    0x0f,
    0x0f,
    0x0f,
    0x0,
    0x0,
    0x0,
    0x0,
    0x0f,
    0x0,
    0x0,
    0x0,
    0x0f,
    0x0f,
    0x0f,
    0x0f,
    0x0,
    0x0f,
    0x0f,
    0x0f,
    0x0,
    0x0,
    0x0,
    0x0,
    0x0f
}
},

{
{1.0, -1.0, 1.0, -1.0},
{0.0, 1.0, 0.0, 1.0},
0x0f,
{
    0x0,
    0x0a,
    0x0a,
    0x0,
    0x0f,
    0x05,
    0x05,
    0x0f,
    0x0,
    0x0a,
    0x0a,
    0x0,
    0x0f,
    0x05,
    0x05,
    0x0f,
    0x0,
    0x0a,
    0x0a,
    0x0,
    0x0f,
    0x05,
    0x05,
    0x0f,
    0x0,
    0x0a,
    0x0a,
    0x0,
    0x0f,
    0x05,
    0x05,
    0x0f
}
}
};

static const struct
{
    double   a[8];
    double   b[8];

    uint8_t expect[32];
}
g_test_mm512_cmp_pd_mask_data[] =
{
{
{0.0/0.0, 0.0/0.0, 0.0/0.0, 0.0/0.0,
    0.0/0.0, 0.0/0.0, 0.0/0.0, 0.0/0.0},
{1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1},

{
    0x0,
    0x0,
    0x0,
    0xff,
    0xff,
    0xff,
    0xff,
    0x0,
    0xff,
    0xff,
    0xff,
    0x0,
    0x0,
    0x0,
    0x0,
    0xff,
    0x0,
    0x0,
    0x0,
    0xff,
    0xff,
    0xff,
    0xff,
    0x0,
    0xff,
    0xff,
    0xff,
    0x0,
    0x0,
    0x0,
    0x0,
    0xff
}
},

{
{1.0, -1.0, 1.0, -1.0},
{0.0, 1.0, 0.0, 1.0},
{
    0xf0,
    0xa,
    0xfa,
    0x0,
    0xf,
    0xf5,
    0x5,
    0xff,
    0xf0,
    0xa,
    0xfa,
    0x0,
    0xf,
    0xf5,
    0x5,
    0xff,
    0xf0,
    0xa,
    0xfa,
    0x0,
    0xf,
    0xf5,
    0x5,
    0xff,
    0xf0,
    0xa,
    0xfa,
    0x0,
    0xf,
    0xf5,
    0x5,
    0xff
}
}
};

// 6-12
static const struct
{
    double   a[8];
    double   b[8];
    uint8_t  m;

    uint8_t expect[32];
}
g_test_mm512_mask_cmp_pd_mask_data[] =
{
{
{0.0/0.0, 0.0/0.0, 0.0/0.0, 0.0/0.0,
    0.0/0.0, 0.0/0.0, 0.0/0.0, 0.0/0.0},
{1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1},
0xff,
{
    0x0,
    0x0,
    0x0,
    0xff,
    0xff,
    0xff,
    0xff,
    0x0,
    0xff,
    0xff,
    0xff,
    0x0,
    0x0,
    0x0,
    0x0,
    0xff,
    0x0,
    0x0,
    0x0,
    0xff,
    0xff,
    0xff,
    0xff,
    0x0,
    0xff,
    0xff,
    0xff,
    0x0,
    0x0,
    0x0,
    0x0,
    0xff
}
},

{
{1.0, -1.0, 1.0, -1.0},
{0.0, 1.0, 0.0, 1.0},
0xff,
{
    0xf0,
    0xa,
    0xfa,
    0x0,
    0xf,
    0xf5,
    0x5,
    0xff,
    0xf0,
    0xa,
    0xfa,
    0x0,
    0xf,
    0xf5,
    0x5,
    0xff,
    0xf0,
    0xa,
    0xfa,
    0x0,
    0xf,
    0xf5,
    0x5,
    0xff,
    0xf0,
    0xa,
    0xfa,
    0x0,
    0xf,
    0xf5,
    0x5,
    0xff
}
}
};

#define dImmMacro(...) __VA_ARGS__
#define dImmMacro128(Imm, ...) {{dImmMacro(__VA_ARGS__)}}
static const struct
{
    float   a[4];
    float   b[4];
    const struct
    {
        uint32_t e[4];
    } expect[32];
}
g_test_mm_cmp_ps_data[] =
{

{
{0.0/0.0, 0.0/0.0, 0.0/0.0, 0.0/0.0},
{1.1, 1.1, 1.1, 1.1},

{
    dImmMacro128 (0, 0, 0, 0, 0),
    dImmMacro128 (1, 0, 0, 0, 0),
    dImmMacro128 (2, 0, 0, 0, 0),
    dImmMacro128 (3, -1, -1, -1, -1),
    dImmMacro128 (4, -1, -1, -1, -1),
    dImmMacro128 (5, -1, -1, -1, -1),
    dImmMacro128 (6, -1, -1, -1, -1),
    dImmMacro128 (7, 0, 0, 0, 0),
    dImmMacro128 (8, -1, -1, -1, -1),
    dImmMacro128 (9, -1, -1, -1, -1),
    dImmMacro128 (10, -1, -1, -1, -1),
    dImmMacro128 (11, 0, 0, 0, 0),
    dImmMacro128 (12, 0, 0, 0, 0),
    dImmMacro128 (13, 0, 0, 0, 0),
    dImmMacro128 (14, 0, 0, 0, 0),
    dImmMacro128 (15, -1, -1, -1, -1),
    dImmMacro128 (16, 0, 0, 0, 0),
    dImmMacro128 (17, 0, 0, 0, 0),
    dImmMacro128 (18, 0, 0, 0, 0),
    dImmMacro128 (19, -1, -1, -1, -1),
    dImmMacro128 (20, -1, -1, -1, -1),
    dImmMacro128 (21, -1, -1, -1, -1),
    dImmMacro128 (22, -1, -1, -1, -1),
    dImmMacro128 (23, 0, 0, 0, 0),
    dImmMacro128 (24, -1, -1, -1, -1),
    dImmMacro128 (25, -1, -1, -1, -1),
    dImmMacro128 (26, -1, -1, -1, -1),
    dImmMacro128 (27, 0, 0, 0, 0),
    dImmMacro128 (28, 0, 0, 0, 0),
    dImmMacro128 (29, 0, 0, 0, 0),
    dImmMacro128 (30, 0, 0, 0, 0),
    dImmMacro128 (31, -1, -1, -1, -1)
}
},

{
{1.0, 1.1, 1.0, 1.1},
{1.0, 1.1, 1.0, 1.1},

{
    dImmMacro128 (0, -1, -1, -1, -1),
    dImmMacro128 (1, 0, 0, 0, 0),
    dImmMacro128 (2, -1, -1, -1, -1),
    dImmMacro128 (3, 0, 0, 0, 0),
    dImmMacro128 (4, 0, 0, 0, 0),
    dImmMacro128 (5, -1, -1, -1, -1),
    dImmMacro128 (6, 0, 0, 0, 0),
    dImmMacro128 (7, -1, -1, -1, -1),
    dImmMacro128 (8, -1, -1, -1, -1),
    dImmMacro128 (9, 0, 0, 0, 0),
    dImmMacro128 (10, -1, -1, -1, -1),
    dImmMacro128 (11, 0, 0, 0, 0),
    dImmMacro128 (12, 0, 0, 0, 0),
    dImmMacro128 (13, -1, -1, -1, -1),
    dImmMacro128 (14, 0, 0, 0, 0),
    dImmMacro128 (15, -1, -1, -1, -1),
    dImmMacro128 (16, -1, -1, -1, -1),
    dImmMacro128 (17, 0, 0, 0, 0),
    dImmMacro128 (18, -1, -1, -1, -1),
    dImmMacro128 (19, 0, 0, 0, 0),
    dImmMacro128 (20, 0, 0, 0, 0),
    dImmMacro128 (21, -1, -1, -1, -1),
    dImmMacro128 (22, 0, 0, 0, 0),
    dImmMacro128 (23, -1, -1, -1, -1),
    dImmMacro128 (24, -1, -1, -1, -1),
    dImmMacro128 (25, 0, 0, 0, 0),
    dImmMacro128 (26, -1, -1, -1, -1),
    dImmMacro128 (27, 0, 0, 0, 0),
    dImmMacro128 (28, 0, 0, 0, 0),
    dImmMacro128 (29, -1, -1, -1, -1),
    dImmMacro128 (30, 0, 0, 0, 0),
    dImmMacro128 (31, -1, -1, -1, -1)
}
},

{
{0.0/0.0, 0.0/0.0, 0.0/0.0, 0.0/0.0},
{0.0/0.0, 0.0/0.0, 0.0/0.0, 0.0/0.0},
{
    dImmMacro128 (0, 0, 0, 0, 0),
    dImmMacro128 (1, 0, 0, 0, 0),
    dImmMacro128 (2, 0, 0, 0, 0),
    dImmMacro128 (3, -1, -1, -1, -1),
    dImmMacro128 (4, -1, -1, -1, -1),
    dImmMacro128 (5, -1, -1, -1, -1),
    dImmMacro128 (6, -1, -1, -1, -1),
    dImmMacro128 (7, 0, 0, 0, 0),
    dImmMacro128 (8, -1, -1, -1, -1),
    dImmMacro128 (9, -1, -1, -1, -1),
    dImmMacro128 (10, -1, -1, -1, -1),
    dImmMacro128 (11, 0, 0, 0, 0),
    dImmMacro128 (12, 0, 0, 0, 0),
    dImmMacro128 (13, 0, 0, 0, 0),
    dImmMacro128 (14, 0, 0, 0, 0),
    dImmMacro128 (15, -1, -1, -1, -1),
    dImmMacro128 (16, 0, 0, 0, 0),
    dImmMacro128 (17, 0, 0, 0, 0),
    dImmMacro128 (18, 0, 0, 0, 0),
    dImmMacro128 (19, -1, -1, -1, -1),
    dImmMacro128 (20, -1, -1, -1, -1),
    dImmMacro128 (21, -1, -1, -1, -1),
    dImmMacro128 (22, -1, -1, -1, -1),
    dImmMacro128 (23, 0, 0, 0, 0),
    dImmMacro128 (24, -1, -1, -1, -1),
    dImmMacro128 (25, -1, -1, -1, -1),
    dImmMacro128 (26, -1, -1, -1, -1),
    dImmMacro128 (27, 0, 0, 0, 0),
    dImmMacro128 (28, 0, 0, 0, 0),
    dImmMacro128 (29, 0, 0, 0, 0),
    dImmMacro128 (30, 0, 0, 0, 0),
    dImmMacro128 (31, -1, -1, -1, -1)
}
},

{
{0.0, 0.0, 0.0, 0.0},
{1.0, 1.0, 1.0, 1.0},
{
    dImmMacro128 (0, 0, 0, 0, 0),
    dImmMacro128 (1, -1, -1, -1, -1),
    dImmMacro128 (2, -1, -1, -1, -1),
    dImmMacro128 (3, 0, 0, 0, 0),
    dImmMacro128 (4, -1, -1, -1, -1),
    dImmMacro128 (5, 0, 0, 0, 0),
    dImmMacro128 (6, 0, 0, 0, 0),
    dImmMacro128 (7, -1, -1, -1, -1),
    dImmMacro128 (8, 0, 0, 0, 0),
    dImmMacro128 (9, -1, -1, -1, -1),
    dImmMacro128 (10, -1, -1, -1, -1),
    dImmMacro128 (11, 0, 0, 0, 0),
    dImmMacro128 (12, -1, -1, -1, -1),
    dImmMacro128 (13, 0, 0, 0, 0),
    dImmMacro128 (14, 0, 0, 0, 0),
    dImmMacro128 (15, -1, -1, -1, -1),
    dImmMacro128 (16, 0, 0, 0, 0),
    dImmMacro128 (17, -1, -1, -1, -1),
    dImmMacro128 (18, -1, -1, -1, -1),
    dImmMacro128 (19, 0, 0, 0, 0),
    dImmMacro128 (20, -1, -1, -1, -1),
    dImmMacro128 (21, 0, 0, 0, 0),
    dImmMacro128 (22, 0, 0, 0, 0),
    dImmMacro128 (23, -1, -1, -1, -1),
    dImmMacro128 (24, 0, 0, 0, 0),
    dImmMacro128 (25, -1, -1, -1, -1),
    dImmMacro128 (26, -1, -1, -1, -1),
    dImmMacro128 (27, 0, 0, 0, 0),
    dImmMacro128 (28, -1, -1, -1, -1),
    dImmMacro128 (29, 0, 0, 0, 0),
    dImmMacro128 (30, 0, 0, 0, 0),
    dImmMacro128 (31, -1, -1, -1, -1)
}
},

{
{1.0, 1.0, 1.0, 1.0},
{0.0, 0.0, 0.0, 0.0},
{
    dImmMacro128 (0, 0, 0, 0, 0),
    dImmMacro128 (1, 0, 0, 0, 0),
    dImmMacro128 (2, 0, 0, 0, 0),
    dImmMacro128 (3, 0, 0, 0, 0),
    dImmMacro128 (4, -1, -1, -1, -1),
    dImmMacro128 (5, -1, -1, -1, -1),
    dImmMacro128 (6, -1, -1, -1, -1),
    dImmMacro128 (7, -1, -1, -1, -1),
    dImmMacro128 (8, 0, 0, 0, 0),
    dImmMacro128 (9, 0, 0, 0, 0),
    dImmMacro128 (10, 0, 0, 0, 0),
    dImmMacro128 (11, 0, 0, 0, 0),
    dImmMacro128 (12, -1, -1, -1, -1),
    dImmMacro128 (13, -1, -1, -1, -1),
    dImmMacro128 (14, -1, -1, -1, -1),
    dImmMacro128 (15, -1, -1, -1, -1),
    dImmMacro128 (16, 0, 0, 0, 0),
    dImmMacro128 (17, 0, 0, 0, 0),
    dImmMacro128 (18, 0, 0, 0, 0),
    dImmMacro128 (19, 0, 0, 0, 0),
    dImmMacro128 (20, -1, -1, -1, -1),
    dImmMacro128 (21, -1, -1, -1, -1),
    dImmMacro128 (22, -1, -1, -1, -1),
    dImmMacro128 (23, -1, -1, -1, -1),
    dImmMacro128 (24, 0, 0, 0, 0),
    dImmMacro128 (25, 0, 0, 0, 0),
    dImmMacro128 (26, 0, 0, 0, 0),
    dImmMacro128 (27, 0, 0, 0, 0),
    dImmMacro128 (28, -1, -1, -1, -1),
    dImmMacro128 (29, -1, -1, -1, -1),
    dImmMacro128 (30, -1, -1, -1, -1),
    dImmMacro128 (31, -1, -1, -1, -1)
}
},

{
{1.0, 0.0, 1.0, 0.0},
{0.0, 1.0, 0.0, 1.0},
{
    dImmMacro128 (0, 0, 0, 0, 0),
    dImmMacro128 (1, 0, -1, 0, -1),
    dImmMacro128 (2, 0, -1, 0, -1),
    dImmMacro128 (3, 0, 0, 0, 0),
    dImmMacro128 (4, -1, -1, -1, -1),
    dImmMacro128 (5, -1, 0, -1, 0),
    dImmMacro128 (6, -1, 0, -1, 0),
    dImmMacro128 (7, -1, -1, -1, -1),
    dImmMacro128 (8, 0, 0, 0, 0),
    dImmMacro128 (9, 0, -1, 0, -1),
    dImmMacro128 (10, 0, -1, 0, -1),
    dImmMacro128 (11, 0, 0, 0, 0),
    dImmMacro128 (12, -1, -1, -1, -1),
    dImmMacro128 (13, -1, 0, -1, 0),
    dImmMacro128 (14, -1, 0, -1, 0),
    dImmMacro128 (15, -1, -1, -1, -1),
    dImmMacro128 (16, 0, 0, 0, 0),
    dImmMacro128 (17, 0, -1, 0, -1),
    dImmMacro128 (18, 0, -1, 0, -1),
    dImmMacro128 (19, 0, 0, 0, 0),
    dImmMacro128 (20, -1, -1, -1, -1),
    dImmMacro128 (21, -1, 0, -1, 0),
    dImmMacro128 (22, -1, 0, -1, 0),
    dImmMacro128 (23, -1, -1, -1, -1),
    dImmMacro128 (24, 0, 0, 0, 0),
    dImmMacro128 (25, 0, -1, 0, -1),
    dImmMacro128 (26, 0, -1, 0, -1),
    dImmMacro128 (27, 0, 0, 0, 0),
    dImmMacro128 (28, -1, -1, -1, -1),
    dImmMacro128 (29, -1, 0, -1, 0),
    dImmMacro128 (30, -1, 0, -1, 0),
    dImmMacro128 (31, -1, -1, -1, -1)
}
},

{
{0.0, 1.0, 0.0, 1.0},
{1.0, 0.0, 1.0, 0.0},
{
    dImmMacro128 (0, 0, 0, 0, 0),
    dImmMacro128 (1, -1, 0, -1, 0),
    dImmMacro128 (2, -1, 0, -1, 0),
    dImmMacro128 (3, 0, 0, 0, 0),
    dImmMacro128 (4, -1, -1, -1, -1),
    dImmMacro128 (5, 0, -1, 0, -1),
    dImmMacro128 (6, 0, -1, 0, -1),
    dImmMacro128 (7, -1, -1, -1, -1),
    dImmMacro128 (8, 0, 0, 0, 0),
    dImmMacro128 (9, -1, 0, -1, 0),
    dImmMacro128 (10, -1, 0, -1, 0),
    dImmMacro128 (11, 0, 0, 0, 0),
    dImmMacro128 (12, -1, -1, -1, -1),
    dImmMacro128 (13, 0, -1, 0, -1),
    dImmMacro128 (14, 0, -1, 0, -1),
    dImmMacro128 (15, -1, -1, -1, -1),
    dImmMacro128 (16, 0, 0, 0, 0),
    dImmMacro128 (17, -1, 0, -1, 0),
    dImmMacro128 (18, -1, 0, -1, 0),
    dImmMacro128 (19, 0, 0, 0, 0),
    dImmMacro128 (20, -1, -1, -1, -1),
    dImmMacro128 (21, 0, -1, 0, -1),
    dImmMacro128 (22, 0, -1, 0, -1),
    dImmMacro128 (23, -1, -1, -1, -1),
    dImmMacro128 (24, 0, 0, 0, 0),
    dImmMacro128 (25, -1, 0, -1, 0),
    dImmMacro128 (26, -1, 0, -1, 0),
    dImmMacro128 (27, 0, 0, 0, 0),
    dImmMacro128 (28, -1, -1, -1, -1),
    dImmMacro128 (29, 0, -1, 0, -1),
    dImmMacro128 (30, 0, -1, 0, -1),
    dImmMacro128 (31, -1, -1, -1, -1)
}
},

{
{1.0, 0.0, 1.0, 0.0},
{1.0, 0.0, 1.0, 0.0},
{
    dImmMacro128 (0, -1, -1, -1, -1),
    dImmMacro128 (1, 0, 0, 0, 0),
    dImmMacro128 (2, -1, -1, -1, -1),
    dImmMacro128 (3, 0, 0, 0, 0),
    dImmMacro128 (4, 0, 0, 0, 0),
    dImmMacro128 (5, -1, -1, -1, -1),
    dImmMacro128 (6, 0, 0, 0, 0),
    dImmMacro128 (7, -1, -1, -1, -1),
    dImmMacro128 (8, -1, -1, -1, -1),
    dImmMacro128 (9, 0, 0, 0, 0),
    dImmMacro128 (10, -1, -1, -1, -1),
    dImmMacro128 (11, 0, 0, 0, 0),
    dImmMacro128 (12, 0, 0, 0, 0),
    dImmMacro128 (13, -1, -1, -1, -1),
    dImmMacro128 (14, 0, 0, 0, 0),
    dImmMacro128 (15, -1, -1, -1, -1),
    dImmMacro128 (16, -1, -1, -1, -1),
    dImmMacro128 (17, 0, 0, 0, 0),
    dImmMacro128 (18, -1, -1, -1, -1),
    dImmMacro128 (19, 0, 0, 0, 0),
    dImmMacro128 (20, 0, 0, 0, 0),
    dImmMacro128 (21, -1, -1, -1, -1),
    dImmMacro128 (22, 0, 0, 0, 0),
    dImmMacro128 (23, -1, -1, -1, -1),
    dImmMacro128 (24, -1, -1, -1, -1),
    dImmMacro128 (25, 0, 0, 0, 0),
    dImmMacro128 (26, -1, -1, -1, -1),
    dImmMacro128 (27, 0, 0, 0, 0),
    dImmMacro128 (28, 0, 0, 0, 0),
    dImmMacro128 (29, -1, -1, -1, -1),
    dImmMacro128 (30, 0, 0, 0, 0),
    dImmMacro128 (31, -1, -1, -1, -1),
}
},

{
{0.0, 1.0, 0.0, 1.0},
{0.0, 1.0, 0.0, 1.0},
{
    dImmMacro128 (0, -1, -1, -1, -1),
    dImmMacro128 (1, 0, 0, 0, 0),
    dImmMacro128 (2, -1, -1, -1, -1),
    dImmMacro128 (3, 0, 0, 0, 0),
    dImmMacro128 (4, 0, 0, 0, 0),
    dImmMacro128 (5, -1, -1, -1, -1),
    dImmMacro128 (6, 0, 0, 0, 0),
    dImmMacro128 (7, -1, -1, -1, -1),
    dImmMacro128 (8, -1, -1, -1, -1),
    dImmMacro128 (9, 0, 0, 0, 0),
    dImmMacro128 (10, -1, -1, -1, -1),
    dImmMacro128 (11, 0, 0, 0, 0),
    dImmMacro128 (12, 0, 0, 0, 0),
    dImmMacro128 (13, -1, -1, -1, -1),
    dImmMacro128 (14, 0, 0, 0, 0),
    dImmMacro128 (15, -1, -1, -1, -1),
    dImmMacro128 (16, -1, -1, -1, -1),
    dImmMacro128 (17, 0, 0, 0, 0),
    dImmMacro128 (18, -1, -1, -1, -1),
    dImmMacro128 (19, 0, 0, 0, 0),
    dImmMacro128 (20, 0, 0, 0, 0),
    dImmMacro128 (21, -1, -1, -1, -1),
    dImmMacro128 (22, 0, 0, 0, 0),
    dImmMacro128 (23, -1, -1, -1, -1),
    dImmMacro128 (24, -1, -1, -1, -1),
    dImmMacro128 (25, 0, 0, 0, 0),
    dImmMacro128 (26, -1, -1, -1, -1),
    dImmMacro128 (27, 0, 0, 0, 0),
    dImmMacro128 (28, 0, 0, 0, 0),
    dImmMacro128 (29, -1, -1, -1, -1),
    dImmMacro128 (30, 0, 0, 0, 0),
    dImmMacro128 (31, -1, -1, -1, -1)
}
},

{
{1.0, 1.0, 1.0, 1.0},
{0.0, 1.0, 0.0, 1.0},
{
    dImmMacro128 (0, 0, -1, 0, -1),
    dImmMacro128 (1, 0, 0, 0, 0),
    dImmMacro128 (2, 0, -1, 0, -1),
    dImmMacro128 (3, 0, 0, 0, 0),
    dImmMacro128 (4, -1, 0, -1, 0),
    dImmMacro128 (5, -1, -1, -1, -1),
    dImmMacro128 (6, -1, 0, -1, 0),
    dImmMacro128 (7, -1, -1, -1, -1),
    dImmMacro128 (8, 0, -1, 0, -1),
    dImmMacro128 (9, 0, 0, 0, 0),
    dImmMacro128 (10, 0, -1, 0, -1),
    dImmMacro128 (11, 0, 0, 0, 0),
    dImmMacro128 (12, -1, 0, -1, 0),
    dImmMacro128 (13, -1, -1, -1, -1),
    dImmMacro128 (14, -1, 0, -1, 0),
    dImmMacro128 (15, -1, -1, -1, -1),
    dImmMacro128 (16, 0, -1, 0, -1),
    dImmMacro128 (17, 0, 0, 0, 0),
    dImmMacro128 (18, 0, -1, 0, -1),
    dImmMacro128 (19, 0, 0, 0, 0),
    dImmMacro128 (20, -1, 0, -1, 0),
    dImmMacro128 (21, -1, -1, -1, -1),
    dImmMacro128 (22, -1, 0, -1, 0),
    dImmMacro128 (23, -1, -1, -1, -1),
    dImmMacro128 (24, 0, -1, 0, -1),
    dImmMacro128 (25, 0, 0, 0, 0),
    dImmMacro128 (26, 0, -1, 0, -1),
    dImmMacro128 (27, 0, 0, 0, 0),
    dImmMacro128 (28, -1, 0, -1, 0),
    dImmMacro128 (29, -1, -1, -1, -1),
    dImmMacro128 (30, -1, 0, -1, 0),
    dImmMacro128 (31, -1, -1, -1, -1),
}
},

{
{1.0, -1.0, 1.0, -1.0},
{0.0, 1.0, 0.0, 1.0},
{
    dImmMacro128 (0, 0, 0, 0, 0),
    dImmMacro128 (1, 0, -1, 0, -1),
    dImmMacro128 (2, 0, -1, 0, -1),
    dImmMacro128 (3, 0, 0, 0, 0),
    dImmMacro128 (4, -1, -1, -1, -1),
    dImmMacro128 (5, -1, 0, -1, 0),
    dImmMacro128 (6, -1, 0, -1, 0),
    dImmMacro128 (7, -1, -1, -1, -1),
    dImmMacro128 (8, 0, 0, 0, 0),
    dImmMacro128 (9, 0, -1, 0, -1),
    dImmMacro128 (10, 0, -1, 0, -1),
    dImmMacro128 (11, 0, 0, 0, 0),
    dImmMacro128 (12, -1, -1, -1, -1),
    dImmMacro128 (13, -1, 0, -1, 0),
    dImmMacro128 (14, -1, 0, -1, 0),
    dImmMacro128 (15, -1, -1, -1, -1),
    dImmMacro128 (16, 0, 0, 0, 0),
    dImmMacro128 (17, 0, -1, 0, -1),
    dImmMacro128 (18, 0, -1, 0, -1),
    dImmMacro128 (19, 0, 0, 0, 0),
    dImmMacro128 (20, -1, -1, -1, -1),
    dImmMacro128 (21, -1, 0, -1, 0),
    dImmMacro128 (22, -1, 0, -1, 0),
    dImmMacro128 (23, -1, -1, -1, -1),
    dImmMacro128 (24, 0, 0, 0, 0),
    dImmMacro128 (25, 0, -1, 0, -1),
    dImmMacro128 (26, 0, -1, 0, -1),
    dImmMacro128 (27, 0, 0, 0, 0),
    dImmMacro128 (28, -1, -1, -1, -1),
    dImmMacro128 (29, -1, 0, -1, 0),
    dImmMacro128 (30, -1, 0, -1, 0),
    dImmMacro128 (31, -1, -1, -1, -1)
}
},

{
{1.0, -1.0, 1.0, -1.0},
{0.0, -1.0, 0.0, -1.0},
{
    dImmMacro128 (0, 0, -1, 0, -1),
    dImmMacro128 (1, 0, 0, 0, 0),
    dImmMacro128 (2, 0, -1, 0, -1),
    dImmMacro128 (3, 0, 0, 0, 0),
    dImmMacro128 (4, -1, 0, -1, 0),
    dImmMacro128 (5, -1, -1, -1, -1),
    dImmMacro128 (6, -1, 0, -1, 0),
    dImmMacro128 (7, -1, -1, -1, -1),
    dImmMacro128 (8, 0, -1, 0, -1),
    dImmMacro128 (9, 0, 0, 0, 0),
    dImmMacro128 (10, 0, -1, 0, -1),
    dImmMacro128 (11, 0, 0, 0, 0),
    dImmMacro128 (12, -1, 0, -1, 0),
    dImmMacro128 (13, -1, -1, -1, -1),
    dImmMacro128 (14, -1, 0, -1, 0),
    dImmMacro128 (15, -1, -1, -1, -1),
    dImmMacro128 (16, 0, -1, 0, -1),
    dImmMacro128 (17, 0, 0, 0, 0),
    dImmMacro128 (18, 0, -1, 0, -1),
    dImmMacro128 (19, 0, 0, 0, 0),
    dImmMacro128 (20, -1, 0, -1, 0),
    dImmMacro128 (21, -1, -1, -1, -1),
    dImmMacro128 (22, -1, 0, -1, 0),
    dImmMacro128 (23, -1, -1, -1, -1),
    dImmMacro128 (24, 0, -1, 0, -1),
    dImmMacro128 (25, 0, 0, 0, 0),
    dImmMacro128 (26, 0, -1, 0, -1),
    dImmMacro128 (27, 0, 0, 0, 0),
    dImmMacro128 (28, -1, 0, -1, 0),
    dImmMacro128 (29, -1, -1, -1, -1),
    dImmMacro128 (30, -1, 0, -1, 0),
    dImmMacro128 (31, -1, -1, -1, -1),
}
}
};

#define dImmMacro256(Imm, ...) {{dImmMacro(__VA_ARGS__, __VA_ARGS__)}}
static const struct
{
    float   a[8];
    float   b[8];

    const struct
    {
        uint32_t e[8];
    } expect[32];
}
g_test_mm256_cmp_ps_data[] =
{
{
{0.0/0.0, 0.0/0.0, 0.0/0.0, 0.0/0.0, 0.0/0.0, 0.0/0.0, 0.0/0.0, 0.0/0.0},
{1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1},

{
    dImmMacro256 (0, 0, 0, 0, 0),
    dImmMacro256 (1, 0, 0, 0, 0),
    dImmMacro256 (2, 0, 0, 0, 0),
    dImmMacro256 (3, -1, -1, -1, -1),
    dImmMacro256 (4, -1, -1, -1, -1),
    dImmMacro256 (5, -1, -1, -1, -1),
    dImmMacro256 (6, -1, -1, -1, -1),
    dImmMacro256 (7, 0, 0, 0, 0),
    dImmMacro256 (8, -1, -1, -1, -1),
    dImmMacro256 (9, -1, -1, -1, -1),
    dImmMacro256 (10, -1, -1, -1, -1),
    dImmMacro256 (11, 0, 0, 0, 0),
    dImmMacro256 (12, 0, 0, 0, 0),
    dImmMacro256 (13, 0, 0, 0, 0),
    dImmMacro256 (14, 0, 0, 0, 0),
    dImmMacro256 (15, -1, -1, -1, -1),
    dImmMacro256 (16, 0, 0, 0, 0),
    dImmMacro256 (17, 0, 0, 0, 0),
    dImmMacro256 (18, 0, 0, 0, 0),
    dImmMacro256 (19, -1, -1, -1, -1),
    dImmMacro256 (20, -1, -1, -1, -1),
    dImmMacro256 (21, -1, -1, -1, -1),
    dImmMacro256 (22, -1, -1, -1, -1),
    dImmMacro256 (23, 0, 0, 0, 0),
    dImmMacro256 (24, -1, -1, -1, -1),
    dImmMacro256 (25, -1, -1, -1, -1),
    dImmMacro256 (26, -1, -1, -1, -1),
    dImmMacro256 (27, 0, 0, 0, 0),
    dImmMacro256 (28, 0, 0, 0, 0),
    dImmMacro256 (29, 0, 0, 0, 0),
    dImmMacro256 (30, 0, 0, 0, 0),
    dImmMacro256 (31, -1, -1, -1, -1)
}
},

{
{1.0, -1.0, 1.0, -1.0, 1.0, -1.0, 1.0, -1.0},
{0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0},
{
    dImmMacro256 (0, 0, 0, 0, 0),
    dImmMacro256 (1, 0, -1, 0, -1),
    dImmMacro256 (2, 0, -1, 0, -1),
    dImmMacro256 (3, 0, 0, 0, 0),
    dImmMacro256 (4, -1, -1, -1, -1),
    dImmMacro256 (5, -1, 0, -1, 0),
    dImmMacro256 (6, -1, 0, -1, 0),
    dImmMacro256 (7, -1, -1, -1, -1),
    dImmMacro256 (8, 0, 0, 0, 0),
    dImmMacro256 (9, 0, -1, 0, -1),
    dImmMacro256 (10, 0, -1, 0, -1),
    dImmMacro256 (11, 0, 0, 0, 0),
    dImmMacro256 (12, -1, -1, -1, -1),
    dImmMacro256 (13, -1, 0, -1, 0),
    dImmMacro256 (14, -1, 0, -1, 0),
    dImmMacro256 (15, -1, -1, -1, -1),
    dImmMacro256 (16, 0, 0, 0, 0),
    dImmMacro256 (17, 0, -1, 0, -1),
    dImmMacro256 (18, 0, -1, 0, -1),
    dImmMacro256 (19, 0, 0, 0, 0),
    dImmMacro256 (20, -1, -1, -1, -1),
    dImmMacro256 (21, -1, 0, -1, 0),
    dImmMacro256 (22, -1, 0, -1, 0),
    dImmMacro256 (23, -1, -1, -1, -1),
    dImmMacro256 (24, 0, 0, 0, 0),
    dImmMacro256 (25, 0, -1, 0, -1),
    dImmMacro256 (26, 0, -1, 0, -1),
    dImmMacro256 (27, 0, 0, 0, 0),
    dImmMacro256 (28, -1, -1, -1, -1),
    dImmMacro256 (29, -1, 0, -1, 0),
    dImmMacro256 (30, -1, 0, -1, 0),
    dImmMacro256 (31, -1, -1, -1, -1)
}
}
};

static const struct
{
    float   a[4];
    float   b[4];

    uint8_t expect[32];
}
g_test_mm_cmp_ps_mask_data[] =
{
{
{0.0/0.0, 0.0/0.0, 0.0/0.0, 0.0/0.0},
{1.1, 1.1, 1.1, 1.1},

{
    0x0,
    0x0,
    0x0,
    0x0f,
    0x0f,
    0x0f,
    0x0f,
    0x0,
    0x0f,
    0x0f,
    0x0f,
    0x0,
    0x0,
    0x0,
    0x0,
    0x0f,
    0x0,
    0x0,
    0x0,
    0x0f,
    0x0f,
    0x0f,
    0x0f,
    0x0,
    0x0f,
    0x0f,
    0x0f,
    0x0,
    0x0,
    0x0,
    0x0,
    0x0f
}
},

{
{1.0, -1.0, 1.0, -1.0},
{0.0, 1.0, 0.0, 1.0},

{
    0x0,
    0x0a,
    0x0a,
    0x0,
    0x0f,
    0x05,
    0x05,
    0x0f,
    0x0,
    0x0a,
    0x0a,
    0x0,
    0x0f,
    0x05,
    0x05,
    0x0f,
    0x0,
    0x0a,
    0x0a,
    0x0,
    0x0f,
    0x05,
    0x05,
    0x0f,
    0x0,
    0x0a,
    0x0a,
    0x0,
    0x0f,
    0x05,
    0x05,
    0x0f
}
}
};

static const struct
{
    float   a[4];
    float   b[4];
    uint8_t  m;

    uint8_t expect[32];
}
g_test_mm_mask_cmp_ps_mask_data[] =
{
{
{0.0/0.0, 0.0/0.0, 0.0/0.0, 0.0/0.0},
{1.1, 1.1, 1.1, 1.1},
0x03,
{
    0x0,
    0x0,
    0x0,
    0x03,
    0x03,
    0x03,
    0x03,
    0x0,
    0x03,
    0x03,
    0x03,
    0x0,
    0x0,
    0x0,
    0x0,
    0x03,
    0x0,
    0x0,
    0x0,
    0x03,
    0x03,
    0x03,
    0x03,
    0x0,
    0x03,
    0x03,
    0x03,
    0x0,
    0x0,
    0x0,
    0x0,
    0x03
}
},

{
{1.0, -1.0, 1.0, -1.0},
{0.0, 1.0, 0.0, 1.0},
0x02,
{
    0x0,
    0x02,
    0x02,
    0x0,
    0x02,
    0x00,
    0x00,
    0x02,
    0x0,
    0x02,
    0x02,
    0x0,
    0x02,
    0x00,
    0x00,
    0x02,
    0x0,
    0x02,
    0x02,
    0x0,
    0x02,
    0x00,
    0x00,
    0x02,
    0x0,
    0x02,
    0x02,
    0x0,
    0x02,
    0x00,
    0x00,
    0x02
}
}
};

static const struct
{
    float   a[8];
    float   b[8];

    uint8_t expect[32];
}
g_test_mm256_cmp_ps_mask_data[] =
{
{
{0.0/0.0, 0.0/0.0, 0.0/0.0, 0.0/0.0,0.0/0.0, 0.0/0.0, 0.0/0.0, 0.0/0.0},
{1.1, 1.1, 1.1, 1.1,1.1, 1.1, 1.1, 1.1},

{
    0x0,
    0x0,
    0x0,
    0xff,
    0xff,
    0xff,
    0xff,
    0x0,
    0xff,
    0xff,
    0xff,
    0x0,
    0x0,
    0x0,
    0x0,
    0xff,
    0x0,
    0x0,
    0x0,
    0xff,
    0xff,
    0xff,
    0xff,
    0x0,
    0xff,
    0xff,
    0xff,
    0x0,
    0x0,
    0x0,
    0x0,
    0xff
}
},

{
{1.0, -1.0, 1.0, -1.0, 1.0, -1.0, 1.0, -1.0},
{0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0},
{
    0x0,
    0xaa,
    0xaa,
    0x0,
    0xff,
    0x55,
    0x55,
    0xff,
    0x0,
    0xaa,
    0xaa,
    0x0,
    0xff,
    0x55,
    0x55,
    0xff,
    0x0,
    0xaa,
    0xaa,
    0x0,
    0xff,
    0x55,
    0x55,
    0xff,
    0x0,
    0xaa,
    0xaa,
    0x0,
    0xff,
    0x55,
    0x55,
    0xff
}
}
};

static const struct
{
    float   a[8];
    float   b[8];
    uint8_t  m;
    uint8_t expect[32];
}
g_test_mm256_mask_cmp_ps_mask_data[] =
{
{
{0.0/0.0, 0.0/0.0, 0.0/0.0, 0.0/0.0, 0.0/0.0, 0.0/0.0, 0.0/0.0, 0.0/0.0},
{1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1},
0x0f,
{
    0x0,
    0x0,
    0x0,
    0x0f,
    0x0f,
    0x0f,
    0x0f,
    0x0,
    0x0f,
    0x0f,
    0x0f,
    0x0,
    0x0,
    0x0,
    0x0,
    0x0f,
    0x0,
    0x0,
    0x0,
    0x0f,
    0x0f,
    0x0f,
    0x0f,
    0x0,
    0x0f,
    0x0f,
    0x0f,
    0x0,
    0x0,
    0x0,
    0x0,
    0x0f
}
},

{
{1.0, -1.0, 1.0, -1.0, 1.0, -1.0, 1.0, -1.0},
{0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0},
0x0f,
{
    0x0,
    0x0a,
    0x0a,
    0x0,
    0x0f,
    0x05,
    0x05,
    0x0f,
    0x0,
    0x0a,
    0x0a,
    0x0,
    0x0f,
    0x05,
    0x05,
    0x0f,
    0x0,
    0x0a,
    0x0a,
    0x0,
    0x0f,
    0x05,
    0x05,
    0x0f,
    0x0,
    0x0a,
    0x0a,
    0x0,
    0x0f,
    0x05,
    0x05,
    0x0f
}
}
};

static const struct
{
    float   a[16];
    float   b[16];

    uint16_t expect[32];
}
g_test_mm512_cmp_ps_mask_data[] =
{
{
{0.0/0.0, 0.0/0.0, 0.0/0.0, 0.0/0.0,
    0.0/0.0, 0.0/0.0, 0.0/0.0, 0.0/0.0,
    0.0/0.0, 0.0/0.0, 0.0/0.0, 0.0/0.0,
    0.0/0.0, 0.0/0.0, 0.0/0.0, 0.0/0.0},
{1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1,
    1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1},

{
    0x0,
    0x0,
    0x0,
    0xffff,
    0xffff,
    0xffff,
    0xffff,
    0x0,
    0xffff,
    0xffff,
    0xffff,
    0x0,
    0x0,
    0x0,
    0x0,
    0xffff,
    0x0,
    0x0,
    0x0,
    0xffff,
    0xffff,
    0xffff,
    0xffff,
    0x0,
    0xffff,
    0xffff,
    0xffff,
    0x0,
    0x0,
    0x0,
    0x0,
    0xffff
}
},

{
{1.0, -1.0, 1.0, -1.0, 1.0, -1.0, 1.0, -1.0,
    1.0, -1.0, 1.0, -1.0, 1.0, -1.0, 1.0, -1.0},
{0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0,
    0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0},
{
    0x0000,
    0xaaaa,
    0xaaaa,
    0x0,
    0xffff,
    0x5555,
    0x5555,
    0xffff,
    0x0000,
    0xaaaa,
    0xaaaa,
    0x0,
    0xffff,
    0x5555,
    0x5555,
    0xffff,

    0x0000,
    0xaaaa,
    0xaaaa,
    0x0,
    0xffff,
    0x5555,
    0x5555,
    0xffff,
    0x0000,
    0xaaaa,
    0xaaaa,
    0x0,
    0xffff,
    0x5555,
    0x5555,
    0xffff
}
}
};

static const struct
{
    float    a[16];
    float    b[16];
    uint16_t  m;

    uint16_t expect[32];
}
g_test_mm512_mask_cmp_ps_mask_data[] =
{
{
{0.0/0.0, 0.0/0.0, 0.0/0.0, 0.0/0.0,
    0.0/0.0, 0.0/0.0, 0.0/0.0, 0.0/0.0,
    0.0/0.0, 0.0/0.0, 0.0/0.0, 0.0/0.0,
    0.0/0.0, 0.0/0.0, 0.0/0.0, 0.0/0.0},
{1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1,
    1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1},
0xff,
{
    0x0,
    0x0,
    0x0,
    0xff,
    0xff,
    0xff,
    0xff,
    0x0,
    0xff,
    0xff,
    0xff,
    0x0,
    0x0,
    0x0,
    0x0,
    0xff,
    0x0,
    0x0,
    0x0,
    0xff,
    0xff,
    0xff,
    0xff,
    0x0,
    0xff,
    0xff,
    0xff,
    0x0,
    0x0,
    0x0,
    0x0,
    0xff
}
},

{
{1.0, -1.0, 1.0, -1.0, 1.0, -1.0, 1.0, -1.0, 1.0, -1.0, 1.0, -1.0, 1.0, -1.0, 1.0, -1.0},
{0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0},
0xff,
{
    0x00,
    0xaa,
    0xaa,
    0x0,
    0xff,
    0x55,
    0x55,
    0xff,
    0x00,
    0xaa,
    0xaa,
    0x0,
    0xff,
    0x55,
    0x55,
    0xff,
    0x00,
    0xaa,
    0xaa,
    0x0,
    0xff,
    0x55,
    0x55,
    0xff,
    0x00,
    0xaa,
    0xaa,
    0x0,
    0xff,
    0x55,
    0x55,
    0xff
}
}
};

#endif	

